<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>jsdelivr - 标签 - zu1k</title>
        <link>https://lgf.im/tags/jsdelivr/</link>
        <description>jsdelivr - 标签 - zu1k</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor>
            <webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 19 Mar 2020 17:17:53 &#43;0000</lastBuildDate><atom:link href="https://lgf.im/tags/jsdelivr/" rel="self" type="application/rss+xml" /><item>
    <title>加快Github Pages国内访问速度</title>
    <link>https://lgf.im/posts/coding/speedup-github-page/</link>
    <pubDate>Thu, 19 Mar 2020 17:17:53 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://lgf.im/posts/coding/speedup-github-page/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<p>相信不少小伙伴都在使用 Github Pages 提供的免费静态网站托管来搭建自己的博客，但是因为墙的存在和特殊国情，使用 Github Pages 搭建的网站速度普遍不快，因此很多小伙伴只能转战国内付费的服务器和 CDN。</p>
<p>正巧我也在使用 Github Pages 搭建自己的静态博客，正好来说一下我的优化方法。</p>
<h2 id="压缩">压缩</h2>
<p>默认情况下，如果我们查看 Hexo 生成的静态网页源代码，会发现存在大量的空格、空行、注释等无用内容。同样的，如果使用的 hexo 主题没有进行优化，大量的 css 和 js 文件也存在这样的垃圾内容。</p>
<p>如果你在一些大型网站右键查看网页源代码，你会发现他们的 html\js\css 是经过压缩处理的，没有多余的换行和注释，这势必会节省带宽流量和传输时间，提升用户体验。</p>
<p>所以我们优化速度的第一关就是对 Hexo 生成的代码进行压缩。</p>
<p>这里我使用的工具是 gulp</p>
<h3 id="安装-gulp">安装 gulp</h3>
<p>在自己本机安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install gulp -g
</code></pre></td></tr></table>
</div>
</div><p>为了 Github Action 或其他 CI\CD 平台也能够进行安装，这里推荐</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install gulp --save-dev
</code></pre></td></tr></table>
</div>
</div><p>我们还需要一些依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install --save-dev <span class="se">\
</span><span class="se"></span>            gulp-minify-css <span class="se">\
</span><span class="se"></span>            gulp-babel <span class="se">\
</span><span class="se"></span>            gulp-uglify <span class="se">\
</span><span class="se"></span>            gulp-htmlmin <span class="se">\
</span><span class="se"></span>            gulp-htmlclean <span class="se">\
</span><span class="se"></span>            gulp-imagemin <span class="se">\
</span><span class="se"></span>            imagemin-jpegtran <span class="se">\
</span><span class="se"></span>            imagemin-svgo <span class="se">\
</span><span class="se"></span>            imagemin-gifsicle <span class="se">\
</span><span class="se"></span>            imagemin-optipng
</code></pre></td></tr></table>
</div>
</div><h3 id="创建配置文件">创建配置文件</h3>
<p>在博客 hexo 的根目录下，新建 <code>gulpfile.js</code> 配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">minifycss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-minify-css&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-uglify&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">htmlmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-htmlmin&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">htmlclean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-htmlclean&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">imagemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-imagemin&#34;</span><span class="p">);</span>

<span class="c1">// 压缩css文件
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-css&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;./public/**/*.css&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifycss</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩html
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-html&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;./public/**/*.html&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlclean</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">htmlmin</span><span class="p">({</span>
        <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">collapseBooleanAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeEmptyAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeScriptTypeAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeStyleLinkTypeAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyJS</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyCSS</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyURLs</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">ignoreCustomFragments</span><span class="o">:</span> <span class="p">[</span><span class="sr">/\{\{[\s\S]*?\}\}/</span><span class="p">],</span>
      <span class="p">})</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩js文件
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-js&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s2">&#34;./public/**/*.js&#34;</span><span class="p">,</span> <span class="s2">&#34;!./public/js/**/*min.js&#34;</span><span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩图片
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-images&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">([</span>
      <span class="s2">&#34;./public/**/*.png&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.jpg&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.gif&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.svg&#34;</span><span class="p">,</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">imagemin</span><span class="p">([</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">gifsicle</span><span class="p">({</span> <span class="nx">interlaced</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">mozjpeg</span><span class="p">({</span> <span class="nx">quality</span><span class="o">:</span> <span class="mi">75</span><span class="p">,</span> <span class="nx">progressive</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">optipng</span><span class="p">({</span> <span class="nx">optimizationLevel</span><span class="o">:</span> <span class="mi">5</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">svgo</span><span class="p">({</span>
          <span class="nx">plugins</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">removeViewBox</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">cleanupIDs</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}],</span>
        <span class="p">}),</span>
      <span class="p">])</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span>
  <span class="s2">&#34;default&#34;</span><span class="p">,</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">series</span><span class="p">(</span>
    <span class="nx">gulp</span><span class="p">.</span><span class="nx">parallel</span><span class="p">(</span><span class="s2">&#34;minify-html&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-css&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-js&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-images&#34;</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用方法">使用方法</h3>
<p>在使用 <code>hexo g</code> 生成静态网站后， 运行 <code>gulp</code> 进行压缩</p>
<h2 id="使用-cdn">使用 CDN</h2>
<p>如果你查看博客的网络请求内容，你会发现在 html 加载之后，还有一堆小文件等待加载，而这些 css\js\图片文件的加载占据了大部分的网页打开时间。</p>
<p>因为 Github Pages 的延迟巨大，速度极慢，我们更有必要使用国内的 CDN 对这些资源进行分发。</p>
<p>不想使用国内付费的 CDN 服务，我尝试过使用 CloudFlare 进行加速（实质减速）效果不佳，后来发现了 jsDelivr。</p>
<p>jsDelivr 是一家开源免费 CDN，主要是对 npm 包进行 CDN 分发</p>
<p>绝妙的是它还能对 Github 和 Wordpress 进行 CDN 分发</p>
<p>我们可以借助 jsDelivr 的 Github 资源分发 服务来对我们博客中的 css\js\小图片进行加速</p>
<blockquote>
<p>这是我目前找到的唯一一家在国内有节点并且不需要备案的 CDN 分发服务</p>
</blockquote>
<p>这里我就以我使用的主题为例，分享一下我如何使用 jsDelivr 进行 CDN 分发</p>
<h3 id="链接格式">链接格式</h3>
<p>jsDelivr 针对 Github 资源有众多 URL 格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://cdn.jsdelivr.net/gh/user/repo@version/file
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery/
</code></pre></td></tr></table>
</div>
</div><p>考虑到 jsDelivr 默认缓存时间是 7 天，如果我们想要修改实时生效而不需要等到缓存过期，最适合的是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js

https://cdn.jsdelivr.net/gh/ github用户名 / 库名 @ 版本号或者tag / 路径/文件名
</code></pre></td></tr></table>
</div>
</div><p>我们可以通过打 tag 来访问同一个资源文件的不同版本，而不需要考虑缓存时间</p>
<h3 id="替换链接">替换链接</h3>
<p>大部分 hexo 主题并不会对使用到的 js\css\图片\字体 套上 CDN，我们来手动替换</p>
<h4 id="css-样式表">css 样式表</h4>
<p>大部分 css 样式会在 <code>head</code> 标签里面引入，这里的 css 样式表会阻塞页面的渲染，导致打开慢的体验，所以需要特别注意</p>
<p>我将我使用的主题的 style.css \ rtl.css \ disquesjs.css 替换成 jsDelivr，明显提升了等待时间</p>
<p>![css]](head.jpg [head)</p>
<p>还有一些其他地方的 css 引入</p>
<p>![style]](css2.jpg [css in)</p>
<h4 id="js-脚本">js 脚本</h4>
<p>寻找并替换各种调用到的 js 脚本</p>
<p>![style]](js1.jpg [css in)</p>
<p>main.js</p>
<p>![style]](js2.jpg [css in)</p>
<p>disqusjs.js</p>
<p>![style]](js3.jpg [css in)</p>
<p>还有其他的一些地方，不一一列举了</p>
<h4 id="字体">字体</h4>
<p>字体需要特别注意，通常情况下比较大，耗时比较长</p>
<p>![replace]](font1.jpg [font)</p>
<p>我使用的主题使用的字体通过 <code>all.min.css</code> 引入，因为前面这个 css 样式已经通过 jsDelivr 导入，里面的字体使用的是相对链接，所以字体默认也是通过 jsDelivr 引入了</p>
<h4 id="img-小图片">img 小图片</h4>
<p>一般是 logo 等资源，根据主题自行替换</p>
<blockquote>
<p>更新：为了更好的控制版本和决定是否使用 jsDelivr, 可以将这个地方独立出来放到配置文件里</p>
</blockquote>
<p>_config.yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">cdn</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://cdn.jsdelivr.net/gh/zu1k/blog@0.0.1.2</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>用到的地方</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;!-- styles --&gt;
&lt;% if (theme.cdn.enabled) { %&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;&lt;%= theme.cdn.url %&gt;/css/style.css&#34;&gt;
&lt;% } else { %&gt;
  &lt;%- css(&#39;css/style&#39;) %&gt;
&lt;% } %&gt;

其他的地方同样的方法
</code></pre></td></tr></table>
</div>
</div><h2 id="加载时文字可见">加载时文字可见</h2>
<p>无论怎样优化，字体加载的时间无法忽略，这段时间的网页文字显示为空，这给用户带来卡顿感</p>
<p>我们必须使字体加载时文字可见，这样才能弥补 github pages 的慢</p>
<p>具体方法是将各 <code>@font-face</code> 中 <code>font-display</code> 设置为 <code>swap</code>, 这样可以在字体未加载完时临时使用系统字体替代，加载完后重新渲染字体</p>
<p>![display]](font-swap.jpg [font)</p>
<p>每一个地方都需要改，自己搜索吧</p>
<h2 id="使用-disqusjs">使用 DisqusJS</h2>
<p>由于众所周知的原因，disqus 被墙了，国内访问不了，而大部分 hexo 网站都使用 disqus 作为评论系统，这导致网页会卡在评论区的加载上，虽然网页已经加载完了，但进度条还在进行，给用户带来慢的感觉。</p>
<p>并且，即使有的用户翻墙能够访问 Disqus，但 Disqus 本身非常笨重，各种 CSS/JS/Font/API 加起来请求不小于 2MB，当 Disqus 加载时，浏览器会在主线程中同步解析、渲染 Disqus，造成卡顿感。</p>
<p>在上网搜索之后，找到了一个替代方案，那就是苏卡卡大佬的 DisqusJS，大家可以根据教程对自己博客的主题进行修改</p>
<p>参考链接：</p>
<ul>
<li><a href="https://blog.skk.moe/post/disqusjs/">https://blog.skk.moe/post/disqusjs/</a></li>
<li><a href="https://disqusjs.skk.moe/">https://disqusjs.skk.moe/</a></li>
<li><a href="https://github.com/SukkaW/DisqusJS">https://github.com/SukkaW/DisqusJS</a></li>
</ul>
<p>对于使用的 Disqus API 反代，我自己测试发现苏卡卡大佬提供的速度不太行，不知道是什么原因，所以推荐自己进行搭建，我是用的是 zeit 进行搭建，感觉还不错</p>
<blockquote>
<p>如果 disqusJS 默认样式不适合自己的主题，推荐 fork 原库进行修改，注意要使用 1.2.6，最新的 master 在懒加载上有点问题</p>
</blockquote>
<h2 id="使用懒加载">使用懒加载</h2>
<p>如果图片和评论区随着页面在一开始就加载，势必会拖累网页首次渲染和文字的迅速显示，这里最好的办法是使用懒加载技术</p>
<h3 id="图片懒加载">图片懒加载</h3>
<p>对于图片，我使用了 <code>hexo-lazyload-image</code> 这个插件</p>
<p>安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install hexo-lazyload-image --save
</code></pre></td></tr></table>
</div>
</div><p>配置文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lazyload:
  enable: <span class="nb">true</span>
  onlypost: <span class="nb">false</span>
  loadingImg: https://cdn.jsdelivr.net/gh/zu1k/blog@0.0.1.2/images/loading.png
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>顺便给懒加载添加了 cdn 功能，可以替换成 cdn 链接来加速</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install hexo-lazyload-image-cdn --save
</code></pre></td></tr></table>
</div>
</div><p>配置文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lazyload:
  enable: <span class="nb">true</span>
  onlypost: <span class="nb">false</span>
  loadingImg: <span class="c1"># eg ./images/loading.gif</span>
  cdn:
    enabled: <span class="nb">false</span>
    url: https://cdn.com
</code></pre></td></tr></table>
</div>
</div><h3 id="评论懒加载">评论懒加载</h3>
<p>对于评论区，很多情况下用户根本不会划到页面底部（文章写得太烂没人看得下去）。</p>
<p>所以我这里对 disqus 的加载使用懒加载技术，参考 <a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/">https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/</a></p>
<p>我使用的是 disqusJS, 下面给出加载的 js 代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c">&lt;!--</span> <span class="nx">DisqusJS</span> <span class="nx">Comments</span> <span class="o">--&gt;</span>
<span class="o">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="nx">theme</span><span class="p">.</span><span class="nx">disqusjs</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">&amp;&amp;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">disqusjs</span><span class="p">.</span><span class="nx">shortname</span><span class="p">){</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">crossorigin</span> <span class="nx">defer</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://cdn.jsdelivr.net/gh/zu1k/DisqusJS@1.2.6.3/dist/disqus.js&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;disqusjs-script&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
  <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;disqusjs-script&#34;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="kd">function</span> <span class="nx">t</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">dsqjs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DisqusJS</span><span class="p">({</span>
                  <span class="nx">shortname</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.shortname %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">siteName</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.siteName %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.api %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">apikey</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.apikey %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">admin</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.admin %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">adminLabel</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.adminLabel %&gt;&#39;</span>
              <span class="p">});</span>
          <span class="p">}</span>
          <span class="kd">var</span> <span class="nx">runningOnBrowser</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nb">window</span> <span class="o">!==</span> <span class="s2">&#34;undefined&#34;</span><span class="p">;</span>
          <span class="kd">var</span> <span class="nx">isBot</span> <span class="o">=</span> <span class="nx">runningOnBrowser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="s2">&#34;onscroll&#34;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">navigator</span> <span class="o">!==</span> <span class="s2">&#34;undefined&#34;</span> <span class="o">&amp;&amp;</span> <span class="sr">/(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span>
          <span class="kd">var</span> <span class="nx">supportsIntersectionObserver</span> <span class="o">=</span> <span class="nx">runningOnBrowser</span> <span class="o">&amp;&amp;</span> <span class="s2">&#34;IntersectionObserver&#34;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isBot</span> <span class="o">&amp;&amp;</span> <span class="nx">supportsIntersectionObserver</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">disqus_observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">entries</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">isIntersecting</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">t</span><span class="p">();</span>
                  <span class="nx">disqus_observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
                <span class="p">}</span>
              <span class="p">},</span> <span class="p">{</span> <span class="nx">threshold</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">});</span>
              <span class="nx">disqus_observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;disqus_thread&#39;</span><span class="p">));</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">t</span><span class="p">();</span>
          <span class="p">}</span>
      <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span><span class="o">!</span><span class="mi">0</span>
  <span class="p">);</span>
  <span class="o">&lt;</span><span class="err">/script&gt;</span>
<span class="o">&lt;%</span> <span class="p">}</span> <span class="o">%&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="终极大招">终极大招</h2>
<p>如果经过上面的优化，你还对博客的加载速度不满意，那一定是 github pages 服务器在美国的原因，200+ms 的延迟导致首字节返回时间不短</p>
<p>其实支持通过 Github 仓库代码进行构建，部署为静态网站的平台不值 github pages 一家，我使用过的比较好的是 <code>zeit.co</code> ， 国内访问走的是台湾的 gcp 节点，延迟低速度快，推荐</p>
<p>具体使用方法非常简单，自行摸索吧</p>
<blockquote>
<p>更新: 刚知道，如果更新太快的话，zeit 会暂停构建部署的</p>
<p>You are pushing commits at a very fast pace (across the whole organization).<br>
Due to that, we cannot deploy the commit e80751b.</p>
<p>You can try again later or upgrade your plan.</p>
</blockquote>
<h2 id="辅助优化">辅助优化</h2>
<p>使用谷歌提供的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener noreffer">Pagespeed Insights</a> 工具分析网页加载并根据建议进行优化</p>
]]></description>
</item></channel>
</rss>
