<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>tor - 标签 - zu1k</title><link>https://lgf.im/tags/tor/</link><description>tor - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 25 May 2020 15:22:09 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/tor/" rel="self" type="application/rss+xml"/><item><title>一个来自保留IP地址的连接</title><link>https://lgf.im/posts/events/why-reveice-connection-from-class-e-ip/</link><pubDate>Mon, 25 May 2020 15:22:09 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/events/why-reveice-connection-from-class-e-ip/</guid><description><![CDATA[<p>昨天看了一篇文章，文章最后使用IP logger进行钓鱼，最后记录下来的IP地址让我大跌眼镜</p>
<p>万万没有想到，记录下来的IP地址竟然是是 244.242.105.51</p>
<p>![Logger]](ip-logger.pn)</p>
<p>这可是一个E类IP地址，是属于保留地址，是未来用来做ip研究用的，目前并没有开放使用啊</p>
<p>考虑到文章中是对一个地下黑客组织进行钓鱼，所以我有理由相信，这个访问记录是通过某种高超的我从来没有听说过的手段实现的</p>
<p>IP Logger为啥会记录到这样一个IP的访问呢？ 这个问题一直到现在都在困扰我</p>
<p>下面记录一下我对这个的分析</p>
<h2 id="大端小端">大端？小端？</h2>
<p>众所周知计算机程序根据cpu架构和操作系统种类不同，数据在内存中存放有大端序和小端序两种情况，这个顺序叫做主机序</p>
<p>而网络传输需要在不同主机序的计算机之间兼容，所以又规定了一个网络序，规定网络传输一律使用大端序</p>
<p>文章中作者猜测是访问者使用的主机是小端序的，所以会又这样一个记录</p>
<p>我个人认为这个猜测不成立</p>
<p>因为一般ip层报文都是由操作系统网络栈来构造的，操作系统自身不会犯忘记转换成网络序的错误</p>
<p>即使是访问者技术高超自己写代码构造的ip包，那源ip是E类ip地址，返程的ip包根本没有路由啊，这样子连tcp连接都建立不了，更不要谈ip logger记录下浏览器的user-agent</p>
<h2 id="tor">Tor?</h2>
<p>考虑到记录下来的user-agent与tor浏览器的一致，并且对方是黑客组织，使用tor也是非常普遍，所以分析一下通过tor能不能实现伪造自己的ip为E类ip</p>
<p>tor连接的流程中，每个tor relay不会知道完整的路由路径，只知道上一个节点与下一个节点，并且这个路由是在应用层实现的，如果黑客控制了某些tor relay，通过这些relay能不能实现这个伪造？</p>
<h3 id="提供onion-service">提供onion service</h3>
<p>如果ip logger提供onion service，那他记录下来的ip应该是 会合节点的ip</p>
<p>通过我上一篇博客学习的内容可以知道，这个会合节点是由客户端选择的，所以我们假设黑客这里选择了自己控制的某个tor relay作为会合节点，并且将这个E类ip地址写在介绍信中发送给介绍节点</p>
<p>ip logger服务器如果没有怀疑这个E类IP地址，通过tor网络去连接这个会合节点，那在它的exit relay那里一定会连不上这个ip，因为会出现空路由</p>
<p>所以如果要让连接成功建立，必须让ip logger到会合节点的relay路径中某个relay节点对这个错误的ip进行了更正，最简单的是控制exit relay，检查到最终访问的是错误ip便进行更正</p>
<p>而这个relay路径中的每个relay都是ip logger自己选择的，所以黑客需要控制tor网络中的大部分relay????这不现实！！！</p>
<h3 id="不提供onion-service">不提供onion service</h3>
<p>如果ip logger不是提供onion service，而是提供公开的服务，那它记录下来的应该是 黑客选择的exit relay，即使黑客控制了这个relay也没办法伪造ip啊</p>
<p>所以通过tor的某些机制伪造成这个E类ip不太现实</p>
<h2 id="路由劫持">路由劫持？</h2>
<p>我对公网的路由不太了解，但是看样子进行路由劫持是有可能的</p>
<p>如果黑客创建了一条假的路由路径，并在路由途中的某个节点对这个E类ip进行更正，也是有可能的，不过看起来难度很大啊</p>
<blockquote>
<p>才疏学浅，文中可能有错误，欢迎指正
目前这个问题还在困扰我，如果有大佬知道答案，希望能够告诉我</p>
</blockquote>
]]></description></item><item><title>Tor洋葱服务如何工作</title><link>https://lgf.im/posts/learn/how-do-onion-service-work/</link><pubDate>Mon, 25 May 2020 14:13:37 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/learn/how-do-onion-service-work/</guid><description><![CDATA[<p>昨天遇到了点问题，为了研究清楚原理，把Tor客户端与服务端通信的具体流程学习了一下，这篇博文写来记录</p>
<h2 id="通信流程">通信流程</h2>
<p>这里要描述的通讯是 用户通过 tor浏览器 连接 洋葱服务 的过程</p>
<p>为了方便表达，这里用Alice表示客户端，Bob表示服务端</p>
<h3 id="第一步服务端设置自己的介绍节点">第一步：服务端设置自己的介绍节点</h3>
<p></p>
<p>服务端为了不暴漏自己的IP，使用 介绍节点(introduction points) 来转发来自客户端的介绍信</p>
<p>首先，Bob从 tor中继节点列表 中挑选几个节点来做自己的 介绍节点，然后与它们建立 长连接(long-term circuits)</p>
<p>这里的长连接是通过tor网络建立起来的，所以是匿名的，介绍节点不会知道Bob的IP</p>
<p>同时，Bob会给介绍节点发送一个 身份验证密钥(authentication key)，当有客户端连接这个介绍节点时，通过这个密钥便能判断这个连接是否是找Bob的</p>
<h3 id="第二步服务端公开自己的信息">第二步：服务端公开自己的信息</h3>
<p></p>
<p>Bob 生成一个 描述信息(onion service descriptor)，里面存储了介绍节点列表，包括介绍节点的ip和相应的身份验证密钥</p>
<p>然后Bob用自己的私钥对这个消息签名，并将这个消息发布到Tor的DHT中</p>
<p>经过这步操作，tor客户端便可以通过某个key从DHT中获取到这个消息，从而找到Bob的介绍节点</p>
<h3 id="第三步客户端获取介绍节点列表">第三步：客户端获取介绍节点列表</h3>
<p></p>
<p>Alice（客户端）从某些途径知道Bob有一个洋葱服务，并且知道这个服务的onion域名，例如 xyz.onion，此时Alice想要访问Bob.</p>
<p>首先，她向DHT网络请求该域名对应的信息，也就是第二步中Bob发布的那个描述消息</p>
<p>获取到消息后，Alice对其签名进行验证，验证使用的Bob的公钥其实已经被编码到 xyz.onion 这个域名中了，Alice可以从域名中解码出来</p>
<p>消息没问题，Alice从消息中解析出Bob的介绍节点列表，选择其中一个介绍节点，Alice将要向Bob介绍自己</p>
<h3 id="第四步客户端选择一个会合节点">第四步：客户端选择一个会合节点</h3>
<p></p>
<p>Alice从tor中继节点列表中选择一个节点作为 会合节点(rendezvous point)，然后通过tor与该 会合节点(RP) 建立连接</p>
<p>同时，Alice会给会合节点发送一个 一次性密码(one-time secret)，这个密码会在回合过程中使用</p>
<h3 id="第五步客户端向服务端介绍自己">第五步：客户端向服务端介绍自己</h3>
<p>Alice生成一个消息，包含 会合节点 和 一次性密码，然后用Bob的公钥对消息进行加密</p>
<p>Alice通过Tor网络连接上 Bob 的一个介绍节点，让该介绍节点把加密后的消息转发给Bob</p>
<p></p>
<h3 id="第六步服务端与客户端回合">第六步：服务端与客户端回合</h3>
<p></p>
<p>此时Bob已经收到介绍节点转发过来的消息，知道Alice想要访问自己，并且知道了会合节点的信息</p>
<p>Bob通过Tor网络连接会合节点，然后将收到的一次性密码发送给会合节点，会合节点由此知道 Bob是要与Alice通信，从而可以将Alice与Bob的消息进行中继</p>
<h2 id="安全性">安全性</h2>
<p>客户端与服务端最终是通过会合节点通讯的，他们都各自通过tor网络分别连接会合节点，因此既能够保证客户端的隐匿性又能够保证服务端不暴露</p>
<p>在上面流程中的所有通讯都是用过tor网络建立的，包括 服务端与介绍节点的通讯、客户端与介绍节点的通讯、客户端与会合节点的通讯、服务端与会合节点的通讯</p>
<p>因此，正常情况下tor客户端与洋葱服务通讯是经过6次中转的，包括客户端连接会合节点的3次和服务端连接会合节点的3次</p>
<p>如果tor客户端访问的服务不是洋葱服务，那通讯过程就不是上面那个流程了，也只有3次中转了</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://community.torproject.org/onion-services/overview/">https://community.torproject.org/onion-services/overview/</a></p>
]]></description></item></channel></rss>