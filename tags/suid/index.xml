<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>suid - 标签 - zu1k</title><link>https://lgf.im/tags/suid/</link><description>suid - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 30 Mar 2020 11:36:25 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/suid/" rel="self" type="application/rss+xml"/><item><title>学习Linux中的SUID机制</title><link>https://lgf.im/posts/linux/linux-suid/</link><pubDate>Mon, 30 Mar 2020 11:36:25 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/linux-suid/</guid><description><![CDATA[<h2 id="什么是suid">什么是SUID</h2>
<p>SUID简称位，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>同一类的还有SGID，就不详细说了，原理与SUID一样，就以SUID为例</p>
<p>在一个程序执行的时候会有三个ID状态，在深入学习SUID之前必须能够区分下面三种ID：</p>
<ul>
<li>Real User ID</li>
<li>Effective User ID</li>
<li>Saved User ID</li>
</ul>
<p><code>Real User ID</code> 是执行这个程序的用户的真实ID，是已用户login时候的ID为准</p>
<p><code>Effective User ID</code> 是程序执行过程中使用权限时真正起作用的用户ID，操作系统在检查一个程序有没有某个权限的时候会看这个ID</p>
<p><code>Saved User ID</code> 是程序临时提权时需要保存的先前的用户ID，等提权结束后需要回退到这个用户ID</p>
<h2 id="suid的作用">SUID的作用</h2>
<p>如果用户user2有另一个用户user1的程序的执行权限，并且user1给这个程序设置了SUID位，那么user2就可以用user1的权限来执行这个程序</p>
<p>简单来说，SUID能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>举个例子：</p>
<p>所有用户的密码保存在 <code>/etc/shadow</code> 文件中，但是这个文件只有root用户能够进行写操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /etc/shadow
-rw-r----- <span class="m">1</span> root shadow <span class="m">1639</span> Jan <span class="m">27</span> 12:50 /etc/shadow
</code></pre></td></tr></table>
</div>
</div><p>那如果普通用户想要修改自己的密码，是否需要让root用户帮着修改呢？</p>
<p>显然不需要，修改密码用到了 <code>/usr/bin/passwd</code> 这个程序，我们来看一下它的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /usr/bin/passwd
-rwsr-xr-x <span class="m">1</span> root root <span class="m">63944</span> Dec <span class="m">20</span> 10:39 /usr/bin/passwd
</code></pre></td></tr></table>
</div>
</div><p>可以看到，这个程序的所有者是root用户，但是所有用户都有执行权限，并且设置了s位（怎么看出来的后面会说）</p>
<p>这样SUID机制就会在程序执行的时候发生作用，让普通用户可以用root权限修改<code>/etc/shadow</code>文件</p>
<p>SUID机制的存在使程序权限的控制更加方便，用户可以执行某个程序而不需要登录到程序拥有者的账号</p>
<h2 id="如何使用suid">如何使用SUID</h2>
<h3 id="查看suid">查看SUID</h3>
<p>通过命令 <code>ls -l</code> 即可看到文件的详细信息，包括权限表 <code>-rwxrwxrwx</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">-   rwx   rwx   rwx

第一位是文件类型，-就是普通文件，d代表目录，l代表链接文件，还有一些其他类型的文件不详细说了

后面的9位可以分成三组，分别表示所有者权限、同组内用户权限，组外其他用户权限

每一组都有三位，r 代表有读取权限，w 代表有写入权限，x 代表有执行权限，如果是 _ 就代表没有相应的权限

如果文件所有者权限的 x 换成 s 就代表设置了SUID

同理如果组内用户权限的 x 换成了 s 就代表设置了SGID
</code></pre></td></tr></table>
</div>
</div><h3 id="设置suid">设置SUID</h3>
<p>使用 <code>chmod 4000 filename</code> 可以设置SUID位</p>
<p>使用 <code>chmod 2000 filename</code> 可以设置SGID位</p>
<p>使用 <code>chmod 6000 filename</code> 可以同时设置SGID和SUID位</p>
<blockquote>
<p>注意: 2000\4000\6000都是不完整的权限，正常使用应该将000替换为相应的权限，例如 4755</p>
</blockquote>
<h3 id="取消suid">取消SUID</h3>
<p>使用 <code>chmod 755 filename</code> 可以取消SGID和SUID位</p>
<p>或者 <code>chmod u-s filename</code> or <code>chmod g-s filename</code> 也可以</p>
<h2 id="suid提权">SUID提权</h2>
<p>因为SUID位让程序在执行的时候有了所有者的权限，所以可以利用这点来提权</p>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 进入nmap的交互模式</span>
nmap --interactive
<span class="c1"># 执行sh，提权成功</span>
!sh
</code></pre></td></tr></table>
</div>
</div><p>详细介绍见： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p>
<h2 id="suid在脚本中失效">SUID在脚本中失效</h2>
<p>假如user1用 <code>chmod 4777 /home/user1/script.sh</code> 命令给<code>script.sh</code>脚本设置SUID位，登录user2后执行这个脚本提示没有权限</p>
<p>这是因为SUID位只对编译过的可执行程序起作用，sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的SUID位，那就不会起作用了</p>
<p>Perl执行器会检查perl脚本的suid位，所以可以给pl脚本设置suid位</p>
]]></description></item></channel></rss>