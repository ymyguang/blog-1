<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>linux - 标签 - zu1k</title><link>https://lgf.im/tags/linux/</link><description>linux - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><lastBuildDate>Sun, 12 Apr 2020 20:38:26 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/linux/" rel="self" type="application/rss+xml"/><item><title>Linux添加swap</title><link>https://lgf.im/posts/linux/linux-add-swap/</link><pubDate>Sun, 12 Apr 2020 20:38:26 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/linux-add-swap/</guid><description><![CDATA[<p>给 linux 服务器添加swap做了好几次了，每一次都没记住，临时去网上查命令，这里特地记录一下</p>
<h2 id="查看当前swap">查看当前swap</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo swapon --show
</code></pre></td></tr></table>
</div>
</div><p>如果没有输出说明没有swap</p>
<p>也可以通过free命令来查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">free -h
</code></pre></td></tr></table>
</div>
</div><h2 id="添加swap">添加swap</h2>
<p>添加swap基本步骤： 创建一个大文件 -&gt; 初始化文件为swap交换文件格式 -&gt; 启用这个文件</p>
<h3 id="创建大文件">创建大文件</h3>
<p>先找一个剩余空间大点的地方创建一个大文件，这里以1G的大小为例，一般swap空间大小以真实物理内存1-2倍大小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 我喜欢用的方法，速度快</span>
sudo fallocate -l 1G /swapfile
<span class="c1"># 如果没有安装可以用dd命令，比较慢</span>
sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span><span class="m">1024</span> <span class="nv">count</span><span class="o">=</span><span class="m">1048576</span>
</code></pre></td></tr></table>
</div>
</div><p>修改文件的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo chmod <span class="m">600</span> /swapfile
</code></pre></td></tr></table>
</div>
</div><h3 id="初始化文件">初始化文件</h3>
<p>创建完文件后需要将文件进行初始化，标记为swap文件格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo mkswap /swapfile
</code></pre></td></tr></table>
</div>
</div><h3 id="启用swap">启用swap</h3>
<p>接下来使用 命令启用这个swap交换文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo swapon /swapfile
</code></pre></td></tr></table>
</div>
</div><p>要让创建好的 swap 分区永久生效，可以将 swapfile 路径内容写入到 <code>/etc/fstab</code> 文件当中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">/swapfile swap swap defaults <span class="m">0</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="检查">检查</h3>
<p>用一开始的命令检查一下swap是否启用正常</p>
<h2 id="移除swap分区">移除SWAP分区</h2>
<p>根据添加的顺序反着来就行： 取消swap -&gt; 删除swap分页文件</p>
<h3 id="取消swap">取消swap</h3>
<p>首先输入以下命令停用 SWAP 空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo swapoff -v /swapfile
</code></pre></td></tr></table>
</div>
</div><p>在 <code>/etc/fstab</code> 文件中删除有效 swap 的行。</p>
<h3 id="删除文件">删除文件</h3>
<p>最后执行以下命令删除 swapfile 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo rm /swapfile
</code></pre></td></tr></table>
</div>
</div><h2 id="调整swappiness值">调整Swappiness值</h2>
<p>Swappiness 是一个 Linux 内核属性，用于定义 Linux 系统使用 SWAP 空间的频率。Swappiness 值可以从 0 至 100，较低的值会让内核尽可能少的使用 SWAP 空间，而较高的值将让 Linux Kernel 能够更加积极地使用 SWAP 分区。</p>
<p>Ubuntu 18.04 默认的 Swappiness 值为 60，您可以使用如下命令来查看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">cat /proc/sys/vm/swappiness
</code></pre></td></tr></table>
</div>
</div><p>值为 60 对于 Ubuntu 18.04 桌面还算行，但对于 Ubuntu Server 来说，SWAP 的使用频率就比较高了，所以您可能需要设置较低的值。例如，要将 swappiness 值设置为 40，请执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo sysctl vm.swappiness<span class="o">=</span><span class="m">40</span>
</code></pre></td></tr></table>
</div>
</div><p>如果要让设置在系统重启后依然有效，则必要在 /etc/sysctl.conf 文件中添加以下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">vm.swappiness<span class="o">=</span><span class="m">40</span>
</code></pre></td></tr></table>
</div>
</div><p>最佳 swappiness 值取决于您系统的工作负载以及内存的使用方式，您应该以小增量的方式来调整此参数，以查到最佳值。</p>
]]></description></item><item><title>学习Linux中的SUID机制</title><link>https://lgf.im/posts/linux/linux-suid/</link><pubDate>Mon, 30 Mar 2020 11:36:25 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/linux-suid/</guid><description><![CDATA[<h2 id="什么是suid">什么是SUID</h2>
<p>SUID简称位，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>同一类的还有SGID，就不详细说了，原理与SUID一样，就以SUID为例</p>
<p>在一个程序执行的时候会有三个ID状态，在深入学习SUID之前必须能够区分下面三种ID：</p>
<ul>
<li>Real User ID</li>
<li>Effective User ID</li>
<li>Saved User ID</li>
</ul>
<p><code>Real User ID</code> 是执行这个程序的用户的真实ID，是已用户login时候的ID为准</p>
<p><code>Effective User ID</code> 是程序执行过程中使用权限时真正起作用的用户ID，操作系统在检查一个程序有没有某个权限的时候会看这个ID</p>
<p><code>Saved User ID</code> 是程序临时提权时需要保存的先前的用户ID，等提权结束后需要回退到这个用户ID</p>
<h2 id="suid的作用">SUID的作用</h2>
<p>如果用户user2有另一个用户user1的程序的执行权限，并且user1给这个程序设置了SUID位，那么user2就可以用user1的权限来执行这个程序</p>
<p>简单来说，SUID能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>举个例子：</p>
<p>所有用户的密码保存在 <code>/etc/shadow</code> 文件中，但是这个文件只有root用户能够进行写操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /etc/shadow
-rw-r----- <span class="m">1</span> root shadow <span class="m">1639</span> Jan <span class="m">27</span> 12:50 /etc/shadow
</code></pre></td></tr></table>
</div>
</div><p>那如果普通用户想要修改自己的密码，是否需要让root用户帮着修改呢？</p>
<p>显然不需要，修改密码用到了 <code>/usr/bin/passwd</code> 这个程序，我们来看一下它的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /usr/bin/passwd
-rwsr-xr-x <span class="m">1</span> root root <span class="m">63944</span> Dec <span class="m">20</span> 10:39 /usr/bin/passwd
</code></pre></td></tr></table>
</div>
</div><p>可以看到，这个程序的所有者是root用户，但是所有用户都有执行权限，并且设置了s位（怎么看出来的后面会说）</p>
<p>这样SUID机制就会在程序执行的时候发生作用，让普通用户可以用root权限修改<code>/etc/shadow</code>文件</p>
<p>SUID机制的存在使程序权限的控制更加方便，用户可以执行某个程序而不需要登录到程序拥有者的账号</p>
<h2 id="如何使用suid">如何使用SUID</h2>
<h3 id="查看suid">查看SUID</h3>
<p>通过命令 <code>ls -l</code> 即可看到文件的详细信息，包括权限表 <code>-rwxrwxrwx</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">-   rwx   rwx   rwx

第一位是文件类型，-就是普通文件，d代表目录，l代表链接文件，还有一些其他类型的文件不详细说了

后面的9位可以分成三组，分别表示所有者权限、同组内用户权限，组外其他用户权限

每一组都有三位，r 代表有读取权限，w 代表有写入权限，x 代表有执行权限，如果是 _ 就代表没有相应的权限

如果文件所有者权限的 x 换成 s 就代表设置了SUID

同理如果组内用户权限的 x 换成了 s 就代表设置了SGID
</code></pre></td></tr></table>
</div>
</div><h3 id="设置suid">设置SUID</h3>
<p>使用 <code>chmod 4000 filename</code> 可以设置SUID位</p>
<p>使用 <code>chmod 2000 filename</code> 可以设置SGID位</p>
<p>使用 <code>chmod 6000 filename</code> 可以同时设置SGID和SUID位</p>
<blockquote>
<p>注意: 2000\4000\6000都是不完整的权限，正常使用应该将000替换为相应的权限，例如 4755</p>
</blockquote>
<h3 id="取消suid">取消SUID</h3>
<p>使用 <code>chmod 755 filename</code> 可以取消SGID和SUID位</p>
<p>或者 <code>chmod u-s filename</code> or <code>chmod g-s filename</code> 也可以</p>
<h2 id="suid提权">SUID提权</h2>
<p>因为SUID位让程序在执行的时候有了所有者的权限，所以可以利用这点来提权</p>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 进入nmap的交互模式</span>
nmap --interactive
<span class="c1"># 执行sh，提权成功</span>
!sh
</code></pre></td></tr></table>
</div>
</div><p>详细介绍见： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p>
<h2 id="suid在脚本中失效">SUID在脚本中失效</h2>
<p>假如user1用 <code>chmod 4777 /home/user1/script.sh</code> 命令给<code>script.sh</code>脚本设置SUID位，登录user2后执行这个脚本提示没有权限</p>
<p>这是因为SUID位只对编译过的可执行程序起作用，sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的SUID位，那就不会起作用了</p>
<p>Perl执行器会检查perl脚本的suid位，所以可以给pl脚本设置suid位</p>
]]></description></item><item><title>Linux Shell中的重定向</title><link>https://lgf.im/posts/linux/redirect-in-shell/</link><pubDate>Tue, 24 Mar 2020 15:50:07 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/redirect-in-shell/</guid><description><![CDATA[<p>经常会看到别人的shell脚本后面有一个 <code>2&gt;&amp;1</code> ，一直没去深究，今天这个话题就以这个为出发点进行展开，学习一下linux shell中重定向的话题。</p>
<h2 id="特殊的东西">特殊的东西</h2>
<p>先来看一点linux中特殊的东西，为后面的内容打下基础</p>
<h3 id="特殊的文件">特殊的文件</h3>
<ul>
<li><code>/dev/null</code> 空，可以将垃圾内容导入其中，就会消失</li>
<li><code>/dev/zero</code> 零，可以从中读出无穷无尽的0</li>
<li><code>/dev/urandom</code> 随机数，可以从中读出无穷无尽的随机数</li>
<li><code>/dev/stdin</code> 标准输入流</li>
<li><code>/dev/stdout</code> 标准输出流</li>
<li><code>/dev/stderr</code> 标准错误输出流</li>
</ul>
<p>我们可以看到后三个文件其实是个链接，指向内核的文件描述符 0\1\2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stderr -&gt; /proc/self/fd/2
lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stdin -&gt; /proc/self/fd/0
lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stdout -&gt; /proc/self/fd/1
</code></pre></td></tr></table>
</div>
</div><h3 id="特殊的文件描述符">特殊的文件描述符</h3>
<p>在Linux shell中有三个特殊的文件描述符（<code>File descriptor</code> or <code>fd</code>）:</p>
<ul>
<li>fd<code>0</code> 是标准输入: <code>stdin</code></li>
<li>fd<code>1</code> 是标准输出: <code>stdout</code></li>
<li>fd<code>2</code> 是标准错误输出: <code>stderr</code></li>
</ul>
<p>通过这三个特殊的文件描述符我们可以控制输入输出流</p>
<h2 id="重定向">重定向</h2>
<p>我们经常会接触到 <code>&gt;</code> 这个符号，叫做重定向，其实还有另一个符号 <code>&gt;&gt;</code> 有着类似的功能，他们之间有一点小区别：</p>
<ul>
<li><code>&gt;</code> 是覆盖的方式</li>
<li><code>&gt;&gt;</code> 是追加的方式</li>
</ul>
<blockquote>
<p>下面的内容将全部以 <code>&gt;</code> 为例，<code>&gt;&gt;</code> 除了内容是追加之外没有其他区别，就不赘述</p>
</blockquote>
<h2 id="使用重定向">使用重定向</h2>
<h3 id="重定向到文件">重定向到文件</h3>
<p>先来看一下最基本的重定向的使用方法，我们将 <code>echo</code> 命令的输出重定向到一个文件中</p>
<p><code>echo &quot;hello&quot; &gt; a.txt</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt; a.txt
root@ubuntu:~# cat a.txt
hello
</code></pre></td></tr></table>
</div>
</div><p>这里是将 <strong>stdout</strong> 重定向到文件 <strong>a.txt</strong> 中，与下面的命令等价</p>
<p><code>echo &quot;hello&quot; 1&gt; a.txt</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# rm a.txt
root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> 1&gt; a.txt
root@ubuntu:~# cat a.txt
hello
</code></pre></td></tr></table>
</div>
</div><p>这里我们看到重定向符号 <code>&gt;</code> 默认是将 <code>stdout</code> 也就是 fd<code>1</code> 重定向到别处</p>
<p>如果我们想要将标准错误输出<code>stderr</code>进行重定向，只需要将上面命令中的文件描述符<code>1</code>修改为标准错误输出的文件描述符<code>2</code>即可</p>
<h3 id="重定向到文件描述符">重定向到文件描述符</h3>
<p>有些情况下 <code>stderr</code> 是会被程序控制写入错误日志的，如果我们想要在命令运行的时候将错误显示在屏幕上，就需要将错误输出重定向到标准输出流中</p>
<p>我们先来尝试一下, 这里我们没有找到一个合适的命令，就拿 <code>ls</code> 命令查看一个不存在的目录，这样会产生错误输出</p>
<blockquote>
<p>这里错误默认是会被输出到屏幕的，只是我暂时没有找到一个更好的程序，我们先假设他不会输出到屏幕</p>
</blockquote>
<p><code>ls error 2&gt;1</code></p>
<p>这里我们的猜想是将 <code>stderr</code> 重定向到 <code>stdout</code>, 所以写了 <code>2&gt;1</code>, 我们来看一下会不会成功？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls error 2&gt;1
root@ubuntu:~#
root@ubuntu:~# ls
<span class="m">1</span>
root@ubuntu:~# cat <span class="m">1</span>
ls: cannot access <span class="s1">&#39;error&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><p>我们看到了，并没有输出，而是在当前目录下生成了一个文件 <code>1</code>, 这说明如果我们只写 <code>&gt;1</code> 会被当做重定向到文件 <code>1</code> 中</p>
<p>此时，我们的 <code>&amp;</code> 就要上场了</p>
<p><code>&gt;&amp;</code> 是将一个流重定向到一个文件描述符的语法，所以刚刚我们应该指明要重定向到 fd<code>1</code>, 也就是 <code>&amp;1</code></p>
<p><code>ls error 2&gt;&amp;1</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls error 2&gt;<span class="p">&amp;</span><span class="m">1</span>
ls: cannot access <span class="s1">&#39;error&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>到这里我们就可以自主发挥了</p>
</blockquote>
<p>将标准输出重定向到标准错误输出</p>
<p><code>echo &quot;hello&quot; 1&gt;&amp;2</code> or <code>echo &quot;hello&quot; &gt;&amp;2</code></p>
<p>甚至我们可以玩点复杂的</p>
<p><code>(echo &quot;hello&quot; &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="o">(</span><span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt;<span class="p">&amp;</span>9<span class="o">)</span> 9&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
hello
</code></pre></td></tr></table>
</div>
</div><p>这里的文件描述符<code>9</code>会自动生成，但是去除括号就会提示错误了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt;<span class="p">&amp;</span><span class="m">9</span> 9&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
bash: 9: Bad file descriptor
</code></pre></td></tr></table>
</div>
</div><p>在 bash &gt;4.0 的版本中，又出了新的重定向语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls -ld /tmp /tnt 2&gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> &gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/O: /&#39;</span><span class="o">)</span>
O: drwxrwxrwt <span class="m">17</span> root root <span class="m">28672</span> Nov  <span class="m">5</span> 23:00 /tmp
E: ls: cannot access /tnt: No such file or directory
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这种写法我还没有学习，等我后面学会了再进行更新</p>
</blockquote>
<h3 id="格式化输出">格式化输出</h3>
<p>来点高端点的用法</p>
<p>用于格式化输出, 将标准输出和错误输出两个流重定向到不同的处理中，最后汇总</p>
<p><code>((ls -ld /tmp /tnt |sed 's/^/O: /' &gt;&amp;9 ) 2&gt;&amp;1 |sed 's/^/E: /') 9&gt;&amp;1| cat -n</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="o">((</span>ls -ld /tmp /tnt <span class="p">|</span>sed <span class="s1">&#39;s/^/O: /&#39;</span> &gt;<span class="p">&amp;</span><span class="m">9</span> <span class="o">)</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> 9&gt;<span class="p">&amp;</span>1<span class="p">|</span> cat -n
     <span class="m">1</span>  O: drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 18:59 /tmp
     <span class="m">2</span>  E: ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><p>相同作用的新版语法</p>
<p><code>cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed 's/^/E: /') &gt; &gt;(sed 's/^/O: /'))</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# cat -n &lt;<span class="o">(</span>ls -ld /tmp /tnt 2&gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> &gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/O: /&#39;</span><span class="o">))</span>
     <span class="m">1</span>  O: drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 18:59 /tmp
     <span class="m">2</span>  E: ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><h3 id="合并文件">合并文件</h3>
<p>将输出文件 m 和 n 合并: <code>n &gt;&amp; m</code></p>
<p>将输入文件 m 和 n 合并: <code>n &lt;&amp; m</code></p>
<h3 id="输入边界">输入边界</h3>
<p>将开始标记 tag 和结束标记 tag 之间的内容作为输入: <code>&lt;&lt; tag</code></p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# wc -l <span class="s">&lt;&lt; EOF
</span><span class="s">    document line 1
</span><span class="s">    document line 2
</span><span class="s">    document line 3
</span><span class="s">EOF</span>
<span class="m">3</span> //表明收到3行输入
</code></pre></td></tr></table>
</div>
</div><p>它的作用是将两个 EOF 之间的内容(document) 作为输入传递给 command。</p>
<blockquote>
<p>注意：</p>
<ul>
<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进</li>
<li>开始的delimiter前后的空格会被忽略掉</li>
</ul>
</blockquote>
<h2 id="有关覆盖">有关覆盖</h2>
<p>如果我们用 <code>set -o noclobber</code> 设置bash，那bash将不会覆盖任何已经存在的文件，但是我们可以通过 <code>&gt;|</code> 绕过这个限制</p>
<p><strong>先来看一下默认的情况</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nv">testfile</span><span class="o">=</span><span class="k">$(</span>mktemp /tmp/testNoClobberDate-XXXXXX<span class="k">)</span>
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:05:53 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:05:56 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
</code></pre></td></tr></table>
</div>
</div><p>如预期的一样，每一次重定向都覆盖了原文件</p>
<p><strong>下面我们设置 <code>noclobber</code> 标志</strong></p>
<p><code>set -o noclobber</code></p>
<p>然后重复上面的操作试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
</code></pre></td></tr></table>
</div>
</div><p>我们看到了bash的提示，不能覆盖已存在的文件，实际结果也是一样</p>
<p>如何进行绕过呢? 我们来试一下用 <code>&gt;|</code> 代替 <code>&gt;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# date &gt;<span class="p">|</span> <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:10:45 PM CST
root@ubuntu:~# date &gt;<span class="p">|</span> <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:10:49 PM CST
</code></pre></td></tr></table>
</div>
</div><p>我们发现此时可以覆盖已经存在的文件，我们查看一下目前的设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">set</span> -o <span class="p">|</span> grep noclobber
noclobber       on
</code></pre></td></tr></table>
</div>
</div><p><code>noclobber</code> 的确是开启的，所以 <code>&gt;|</code> 的确可以绕过这一限制</p>
<p>使用 <code>set +o noclobber</code> 关闭这个限制，防止对我们后面的使用造成影响</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">set</span> +o noclobber
root@ubuntu:~# <span class="nb">set</span> -o <span class="p">|</span> grep noclobber
noclobber       off
root@ubuntu:~# rm <span class="nv">$testfile</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="其他的小点">其他的小点</h2>
<h3 id="重定向到一处">重定向到一处</h3>
<p>如果我们要将 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个地方，该怎么写呢？</p>
<p>下面两种哪种是对的？</p>
<ol>
<li><code>ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</code></li>
<li><code>ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</code></li>
</ol>
<p>验证一下</p>
<p><strong>第一种写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt;a.txt
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
root@ubuntu:~# cat a.txt
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p><strong>第二种写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 1&gt;b.txt 2&gt;<span class="p">&amp;</span><span class="m">1</span>
root@ubuntu:~# cat b.txt
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们可以看到第二种写法是正确的</p>
<p>同理，下面这种写法也正确</p>
<p><code>ls -ld /tmp /tnt 2&gt;b.txt 1&gt;&amp;2</code></p>
<h3 id="套个娃a">套个娃a</h3>
<p>来点奇葩的，如果我们将 <code>stderr</code> 重定向到 <code>stdout</code>, 同时又将 <code>stdout</code> 重定向到 <code>stderr</code> 会发生什么？</p>
<p>如此套娃会不会导致回环卡死？</p>
<p>试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt;<span class="p">&amp;</span><span class="m">2</span>  <span class="p">|</span> sed -e s/^/++/
++ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
++drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们发现都会从标准输出出来</p>
<p>反过来呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 1&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>  <span class="p">|</span> sed -e s/^/++/
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们发现都没有从标准输出出来，都是从标准错误输出出来的</p>
<blockquote>
<p>也就是说 <code>a&gt;&amp;b b&gt;&amp;a</code> 这种套娃写法中， b才是出口</p>
</blockquote>
<h2 id="阅读更多内容">阅读更多内容</h2>
<p>如果你想了解功能，通过下面的命令查看官方文档吧</p>
<p><code>man -Len -Pless\ +/^REDIRECTION bash</code></p>
<p>本文的参考资料： <a href="https://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean" target="_blank" rel="noopener noreffer">stack overflow</a></p>
]]></description></item><item><title>屏蔽一个国家所有IP</title><link>https://lgf.im/posts/linux/block-all-ips-in-a-country/</link><pubDate>Mon, 03 Dec 2018 17:55:28 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/linux/block-all-ips-in-a-country/</guid><description><![CDATA[<p>搭建了一个MTProxy，分享出去，最后发现网速跑满，连接ip数高达600多，并且还在不断增加。
查看ip来源后发现九成以上是伊朗人，后来知道原来tg在他们国家被封了，所以才导致如此。</p>
<p>所以想办法屏蔽这些ip，准确的说是一整个国家的ip,或者说是一堆ip</p>
<h2 id="使用iptables添加规则">使用iptables添加规则</h2>
<p>方法如下：
1.下载一个国家的ip段，网址：<a href="http://www.ipdeny.com/ipblocks/" target="_blank" rel="noopener noreffer">http://www.ipdeny.com/ipblocks/</a></p>
<p><code>wget http://www.ipdeny.com/ipblocks/data/countries/ir.zone</code></p>
<p>2.使用脚本批量添加iptables规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="c1"># Block traffic from a specific country</span>

<span class="nv">COUNTRY</span><span class="o">=</span><span class="s2">&#34;ir&#34;</span>
<span class="nv">IPTABLES</span><span class="o">=</span>/sbin/iptables
<span class="nv">EGREP</span><span class="o">=</span>/bin/egrep

<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="k">$(</span>id -u<span class="k">)</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;you must be root&#34;</span> 1&gt;<span class="p">&amp;</span><span class="m">2</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

resetrules<span class="o">()</span> <span class="o">{</span>
<span class="nv">$IPTABLES</span> -F
<span class="nv">$IPTABLES</span> -t nat -F
<span class="nv">$IPTABLES</span> -t mangle -F
<span class="nv">$IPTABLES</span> -X
<span class="o">}</span>

resetrules

<span class="k">for</span> c in <span class="nv">$COUNTRY</span>
<span class="k">do</span>
        <span class="nv">country_file</span><span class="o">=</span><span class="nv">$c</span>.zone

        <span class="nv">IPS</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EGREP</span> -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> <span class="nv">$country_file</span><span class="k">)</span>
        <span class="k">for</span> ip in <span class="nv">$IPS</span>
        <span class="k">do</span>
            <span class="nb">echo</span> <span class="s2">&#34;blocking </span><span class="nv">$ip</span><span class="s2">&#34;</span>
            <span class="nv">$IPTABLES</span> -A INPUT -s <span class="nv">$ip</span> -j DROP
        <span class="k">done</span>
<span class="k">done</span>
iptables-save
<span class="nb">exit</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="使用ipset添加ip集合">使用ipset添加ip集合</h2>
<p>发现用iptables直接添加ip实在低效，可以用其扩展ipset直接添加一个集合。</p>
<p>什么是IP集?</p>
<p>这时候就是IP集登场了。IP集是一个内核特性，它允许多个（独立）IP地址、MAC地址或者甚至是端口号被编码和有效地存储在位图/哈希内核数据结构中。一旦IP集创建之后，你可以创建一条iptables规则来匹配这个集合。</p>
<p>你马上就会看见IP集合的好处了，它可以让你用一条iptable规则匹配多个ip地址！你可以用多个IP地址和端口号的方式来构造IP集，并且可以动态地更新规则而没有性能影响。
在Linux中安装IPset工具</p>
<p>为了创建和管理IP集，你需要使用称为ipset的用户空间工具。</p>
<p>要在Debian、Ubuntu或者Linux Mint上安装：</p>
<p><code>$ sudo apt-get install ipset</code></p>
<p>Fedora或者CentOS/RHEL 7上安装：</p>
<p><code>$ sudo yum install ipset</code></p>
<p>使用IPset命令禁止IP</p>
<p>让我通过简单的示例告诉你该如何使用ipset命令。</p>
<p>首先，让我们创建一条新的IP集，名为banthis（名字任意）：</p>
<p><code>$ sudo ipset create banthis hash:net</code></p>
<p>第二个参数(hash:net)是必须的，代表的是集合的类型。IP集有多个类型。hash:net类型的IP集使用哈希来存储多个CIDR块。如果你想要在一个集合中存储单独的IP地址，你可以使用hash:ip类型。</p>
<p>一旦创建了一个IP集之后，你可以用下面的命令来检查：</p>
<p><code>$ sudo ipset list</code></p>
<p>这显示了一个可用的IP集合列表，并有包含了集合成员的详细信息。默认上，每个IP集合可以包含65536个元素（这里是CIDR块）。你可以通过追加&quot;maxelem N&quot;选项来增加限制。</p>
<p><code>$ sudo ipset create banthis hash:net maxelem 1000000</code></p>
<p>现在让我们来增加IP块到这个集合中：</p>
<p><code>$ sudo ipset add banthis 1.1.1.1/32</code>
<code>$ sudo ipset add banthis 1.1.2.0/24</code>
<code>$ sudo ipset add banthis 1.1.3.0/24</code>
<code>$ sudo ipset add banthis 1.1.4.10/24</code></p>
<p>这一步可以使用shell脚本自动添加</p>
<p>你会看到集合成员已经改变了。</p>
<p><code>$ sudo ipset list</code></p>
<p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用&quot;-m set &ndash;match-set &ldquo;选项。</p>
<p>现在是时候去创建一个使用IP集的iptables规则了。这里的关键是使用&rdquo;-m set &ndash;match-set &ldquo;选项。</p>
<p>现在让我们创建一条让之前那些IP块不能通过80端口访问web服务的iptable规则。可以通过下面的命令：</p>
<p><code>$ sudo iptables -I INPUT -m set --match-set banthis src -p tcp --destination-port 80 -j DROP</code></p>
<p>如果你愿意，你可以保存特定的IP集到一个文件中，以后可以从文件中还原：</p>
<p><code>$ sudo ipset save banthis -f banthis.txt</code>
<code>$ sudo ipset destroy banthis</code>
<code>$ sudo ipset restore -f banthis.txt</code></p>
<h2 id="自用脚本">自用脚本</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="nv">EGREP</span><span class="o">=</span>/bin/egrep

<span class="nv">con_file</span><span class="o">=</span><span class="nv">$1</span>.zone
<span class="nv">ipset</span><span class="o">=</span><span class="nv">$1</span>ip
wget http://www.ipdeny.com/ipblocks/data/countries/<span class="nv">$con_file</span>
ipset creat <span class="nv">$ipset</span> hash:net    
<span class="nv">IPS</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EGREP</span> -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> <span class="nv">$con_file</span><span class="k">)</span>
<span class="k">for</span> ip in <span class="nv">$IPS</span>
<span class="k">do</span>
    ipset add <span class="nv">$ipset</span> <span class="nv">$ip</span>
<span class="k">done</span>
rm <span class="nv">$con_file</span>
iptables -I INPUT -m <span class="nb">set</span> --match-set <span class="nv">$ipset</span> src -p tcp --destination-port <span class="m">6666</span> -j DROP
iptables-save

<span class="nb">exit</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="参考文章">参考文章：</h2>
<p><a href="https://www.jb51.net/LINUXjishu/339309.html" target="_blank" rel="noopener noreffer">在Linux下实现批量屏蔽IP地址的方法</a></p>
]]></description></item></channel></rss>