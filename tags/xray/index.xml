<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>xray - tag - zu1k</title><link>https://lgf.im/tags/xray/</link><description>xray - tag - zu1k</description><generator>Hugo -- gohugo.io</generator><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 18 Jun 2020 09:06:25 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/xray/" rel="self" type="application/rss+xml"/><item><title>xray社区高级版破解</title><link>https://lgf.im/posts/security/reverse/xray-cracker/</link><pubDate>Thu, 18 Jun 2020 09:06:25 +0000</pubDate><author/><guid>https://lgf.im/posts/security/reverse/xray-cracker/</guid><description><![CDATA[<blockquote>
<p>首先感谢 长亭科技 提供 xray 这款非常方便非常好用的安全工具<br>
俗话说：没有人破解的工具不是好工具<br>
根据没有任何数据支持的统计，大部分安全研究人员使用的安全工具都是盗版<br>
包括但不限于： IDA \ JEB \ BurpSuite \ Vmware</p>
</blockquote>
<p>前几天长亭官方有个活动，可以领 2 个月的 xray 社区高级版证书，正好趁这个机会逆向分析了一下 xray 的证书算法，写了一个证书生成器</p>
<p>因为 xray 证书用到了 rsa 算法，所以需要替换 xray 程序中的公钥，将该功能也集成在工具中了</p>
<h2 id="工具使用">工具使用</h2>
<h3 id="查看帮助">查看帮助</h3>
<p>使用 <code>-h</code> 查看帮助</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -h
破解xray高级版证书，使用 -h 参数查看使用帮助

Usage of xray-cracker:
  -c string
        替换xray程序内置公钥，需要指定xray程序文件路径
  -g string
        生成一个永久license，需要指定用户名
  -p string
        解析官方证书，需要指定证书路径
</code></pre></td></tr></table>
</div>
</div><h3 id="生成证书">生成证书</h3>
<p>使用 <code>-g username</code> 生成永久证书</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -g <span class="s2">&#34;我叫啥&#34;</span>
破解xray高级版证书，使用 -h 参数查看使用帮助

证书已写入文件：xray-license.lic
</code></pre></td></tr></table>
</div>
</div><h3 id="破解-xray">破解 xray</h3>
<p>使用 <code>-c path-to-xray</code> 修改 xray 内置公钥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -c .<span class="se">\x</span>ray_windows_amd64.exe
破解xray高级版证书，使用 -h 参数查看使用帮助

public key index: <span class="m">16741321</span>
文件写入成功： .<span class="se">\x</span>ray_windows_amd64.exe
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>工具虽然是 windows 平台下运行，但是照样可以破解其他平台 xray<br>
目前 xray 最新版是 1.0.0，现在全平台全版本通杀</p>
</blockquote>
<h2 id="破解效果">破解效果</h2>
<p>使用修改版 xray 和永久证书后，效果如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray_windows_amd64.exe version

 __   __  _____              __     __
 <span class="se">\ \ </span>/ / <span class="p">|</span>  __ <span class="se">\ </span>     /<span class="se">\ </span>    <span class="se">\ \ </span>  / /
  <span class="se">\ </span>V /  <span class="p">|</span> <span class="p">|</span>__<span class="o">)</span> <span class="p">|</span>    /  <span class="se">\ </span>    <span class="se">\ \_</span>/ /
   &gt; &lt;   <span class="p">|</span>  _  /    / /<span class="se">\ \ </span>    <span class="se">\ </span>  /
  / . <span class="se">\ </span> <span class="p">|</span> <span class="p">|</span> <span class="se">\ \ </span>  / ____ <span class="se">\ </span>    <span class="p">|</span> <span class="p">|</span>
 /_/ <span class="se">\_\ </span><span class="p">|</span>_<span class="p">|</span>  <span class="se">\_\ </span>/_/    <span class="se">\_\ </span>   <span class="p">|</span>_<span class="p">|</span>


Version: 1.0.0/62161168/COMMUNITY-ADVANCED
Licensed to 我叫啥, license is valid <span class="k">until</span> 2099-09-09 08:00:00

<span class="o">[</span>xray 1.0.0/62161168<span class="o">]</span>
Build: <span class="o">[</span>2020-06-13<span class="o">]</span> <span class="o">[</span>windows/amd64<span class="o">]</span> <span class="o">[</span>RELEASE/COMMUNITY-ADVANCED<span class="o">]</span>
Compiler Version: go version go1.14.1 linux/amd64
License ID: <span class="m">00000000000000000000000000000000</span>
User Name: 我叫啥/00000000000000000000000000000000
Not Valid Before: 2020-06-12 00:00:00
Not Valid After: 2099-09-09 08:00:00
</code></pre></td></tr></table>
</div>
</div><h2 id="部分细节">部分细节</h2>
<blockquote>
<p>距离博文发布已经过了快一个月了，补充一点点细节信息，希望能够帮助到部分研究学习的同学</p>
</blockquote>
<p>这里只给出使用的关键函数和关键流程，一些重要参数细节需要自己探索，可以动态单步调试获得</p>
<h3 id="aes-解密">AES 解密</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">decode_data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">DecodeString</span><span class="p">(</span><span class="nx">licenseString</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">aesDecData</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">AesCBCDecryptAndUnPad</span><span class="p">(</span><span class="nx">decode_data</span><span class="p">[</span><span class="mi">17</span><span class="p">:])</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">licensePlainJsonBytes</span> <span class="o">:=</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mh">0x102</span><span class="p">:]</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="rsa-签名验证">RSA 签名验证</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">sum</span> <span class="o">:=</span> <span class="nx">sha256</span><span class="p">.</span><span class="nf">Sum256</span><span class="p">(</span><span class="nx">licensePlainJsonBytes</span><span class="p">)</span>
<span class="nx">err</span> <span class="p">=</span> <span class="nx">rsa</span><span class="p">.</span><span class="nf">VerifyPSS</span><span class="p">(</span><span class="nx">pubKey</span><span class="p">,</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">,</span> <span class="nx">sum</span><span class="p">[:],</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mh">0x102</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="2020年8月27日-补充">2020年8月27日 补充</h2>
<p>xray 官方在 1.3.0 版本中更换了授权验证机制，所以破解仅支持到 1.2.0 版本，本文使用代码现在开源： <a href="https://github.com/zu1k/xray-crack">https://github.com/zu1k/xray-crack</a></p>
<h2 id="2020年9月30日-补充">2020年9月30日 补充</h2>
<p>前几天有大佬私发我一个 License，我就又对证书算法研究了一下</p>
<p>相关代码也已经更新到 github 了</p>
<h3 id="证书生成">证书生成</h3>
<p>证书生成验证整体的思路没有大的改动，还是先 AES 解密，然后 RSA 签名验证，只是前后增加了两处简单的变换</p>
<p>在解密前有一个简单的交换，开始和最后的两个两个没有参与运算（开始第一个字节是证书版本号）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">right</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">base64DecodeData</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
<span class="k">for</span> <span class="nx">l</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">l</span> <span class="p">&lt;</span> <span class="nx">right</span><span class="p">;</span> <span class="nx">l</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">right</span> <span class="o">-</span> <span class="nx">l</span>
  <span class="k">if</span> <span class="nx">l</span> <span class="o">&gt;=</span> <span class="nx">r</span> <span class="p">{</span>
    <span class="k">break</span>
  <span class="p">}</span>
  <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span> <span class="p">=</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后进行 aes 解密，密钥是写死的，IV 是附加在证书里面的，刚刚的变换结束后，除去第一个字节是版本号，紧接着的 16 个字节是 AES 的 IV</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">aesDecData</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">Decrypt</span><span class="p">(</span><span class="nx">base64DecodeData</span><span class="p">[</span><span class="mi">17</span><span class="p">:],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">17</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p>AES 解密后就会遇到另一个变换，是简单的异或处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aesDecData</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">aesDecData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="mh">0x44</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后后面的部分就跟之前一样了</p>
<h3 id="公钥">公钥</h3>
<p>在新的版本中，RSA 的公钥被加密处理了，在运行的时候解密，这样做可以防止我们通过简单的公钥替换通杀所有的版本和平台</p>
<p>通过逆向发现，解密函数有二百多个局部变量，先是变量之间互相交换，然后两两进行加、减、异或等操作来还原公钥信息</p>
<p>我推测是用程序生成的代码，然后那生成的代码编译的，这样可以在每一次编译的时候重新生成一下代码，增加我们破解的时间</p>
<p>从这一方面出发，我只能变换一下思路，不能去硬刚</p>
<p>Golang 中 RSA 签名验证代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">err</span> <span class="o">:=</span> <span class="nx">rsa</span><span class="p">.</span><span class="nf">VerifyPSS</span><span class="p">(</span><span class="nx">pubKey</span><span class="p">,</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">,</span> <span class="nx">sum</span><span class="p">[:],</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mh">0x102</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;签名验证 失败&#34;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;签名验证 成功&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>很明显，是通过判断返回值是否为空来确定签名验证是否成功的，在汇编中一般为<code>test eax,eax</code>，然后<code>setnz</code>或者<code>setz</code>，所以我可以修改这里</p>
<p>但是这种方法我只能手工修改，目前没有实现用程序来自动化</p>
<blockquote>
<p>主要是无法确定应该修改哪一个地方，因为出现了不止一次，一个特征是调用 VerifyPSS 的那个 Call，可以尝试自己解析 pclntab 段，从中还原符号表找到这个验证函数的入口，然后找搜索关键 Call，再在这个 call 后面两三个汇编处找 setnz 或者 setz 进行修改</p>
</blockquote>
<h2 id="2020年10月4日-补充">2020年10月4日 补充</h2>
<p>感谢 @Lz1y 大佬在 PR#3 中提供的思路，现在已能够自动patch非arm版本的xray二进制了</p>
<h2 id="2020年10月5日-补充">2020年10月5日 补充</h2>
<p>上个版本直接全部进行替换，会导致xray有些功能出现错误，这里进行了修复</p>
<p>增加了 arm 版的自动patch，现在能够全版本破解了</p>
<h2 id="2020年11月6号晚-补充">2020年11月6号晚 补充</h2>
<p>刚刚发现又发新版了，发现已有的程序无法完成patch了，分析发现新的1.4虽然没有修改证书生成算法，但是针对我上面的patch进行了检查</p>
<p>我前面是对签名验证返回值进行修改，如果签名验证失败就改成验证成功。1.4增加了一次签名验证，验证的内容是错误的，必然会验证失败，如果patch还是修改为验证成功就落入了陷阱</p>
<p></p>
<p>思路是对的，但是问题不是在这里，我并没有对RSAVerify本身进行patch，而是patch函数返回后对结果的判断，并且只修改了一处判断，并没有对所有判断都进行修改，所以即使有检查也没有造成影响</p>
<p>新版本因为换用了Golang 1.14，是go的版本差异导致的patch问题（汇编不同了），目前完成了amd64平台的自动patch，其他的平台等大佬PR</p>
<p></p>
<h2 id="2020年11月11日-补充">2020年11月11日 补充</h2>
<p>感谢 <a href="https://github.com/nszy007" target="_blank" rel="noopener noreffer">@nszy007</a> 提供<a href="https://github.com/zu1k/comment/issues/4#issuecomment-725222928" target="_blank" rel="noopener noreffer">剩余平台的patch</a></p>
<h2 id="2020年11月11日-下午16点-补充">2020年11月11日 下午16点 补充</h2>
<p>收到 Chaitin 人员的要求，已删除相关源代码</p>
<h2 id="2020年11月18日-补充">2020年11月18日 补充</h2>
<p></p>
<p>思路不变，不要再给我发邮件要破解版和代码了</p>
<h2 id="2020年11月24日-补充">2020年11月24日 补充</h2>
<p></p>
<p>证书算法没有任何修改</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i><i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>前段时间长亭的小姐姐跟我说有人通过破解xray盈利，那时候我还不太信，真有人花钱买破解版？</p>
<p>前几天算是见到了
</p>
<p>希望不要再有人联系我要（买）破解代码和工具了，我是不会干这种事的</p>
</div>
        </div>
    </div>
]]></description></item></channel></rss>