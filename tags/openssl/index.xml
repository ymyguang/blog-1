<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>openssl - 标签 - zu1k</title><link>https://lgf.im/tags/openssl/</link><description>openssl - 标签 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 18 Mar 2020 12:50:10 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/openssl/" rel="self" type="application/rss+xml"/><item><title>静态链接OpenSSL进行RSA\MD5\Base64</title><link>https://lgf.im/posts/coding/openssl-first-try-rsa-md5-base64/</link><pubDate>Wed, 18 Mar 2020 12:50:10 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/coding/openssl-first-try-rsa-md5-base64/</guid><description><![CDATA[<h2 id="简介">简介</h2>
<p>目标平台： Windows 10 amd64</p>
<p>使用静态链接方式，原因：动态链接库太大了，包含很多本次实验不需要的函数</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="下载openssl代码">下载openssl代码</h3>
<p><code>git clone https://github.com/openssl/openssl.git</code></p>
<p>或者从官网 <a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a> 下载源代码</p>
<p>我使用的是openssl 1.1.1</p>
<h3 id="安装perl环境这里使用的是activeperl">安装perl环境，这里使用的是ActivePerl</h3>
<p><a href="https://www.activestate.com/products/perl/">https://www.activestate.com/products/perl/</a></p>
<h3 id="安装nasm汇编器">安装NASM汇编器</h3>
<p><a href="https://www.nasm.us/">https://www.nasm.us/</a></p>
<h3 id="配置环境变量">配置环境变量</h3>
<p>将刚刚安装的nasm和perl的bin目录加入PATH</p>
<p></p>
<h2 id="编译-openssl-静态链接库">编译 openssl 静态链接库</h2>
<h3 id="初始化环境">初始化环境</h3>
<p>使用visual studio自带的命令提示工具初始化环境，因为需要使用nmake</p>
<p></p>
<p></p>
<h3 id="生成编译配置文件">生成编译配置文件</h3>
<p>cd进入openssl源码目录</p>
<p>执行 <code>perl Configure VC-WIN64A no-asm no-shared --prefix=&quot;D:\Project\opensslwork\openssl\build&quot; --openssldir=&quot;D:\Project\opensslwork\openssl\build\ssl&quot;</code></p>
<h3 id="进行编译并测试和安装">进行编译并测试和安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nmake
nmake <span class="nb">test</span>
nmake install
</code></pre></td></tr></table>
</div>
</div><p>此时已经有了我们需要的头文件和静态链接lib库</p>
<p></p>
<p></p>
<h2 id="使用openssl的api进行编程">使用openssl的api进行编程</h2>
<h3 id="visual-studio项目配置">visual studio项目配置</h3>
<p>vs创建空项目，然后配置头文件和库文件的路径</p>
<p>项目右键-属性，配置选择所有配置，平台选择x64</p>
<p><code>VC++ 目录</code> 配置里面的 <code>包含目录</code> 添加openssl的头文件目录, 我这里是 <code>D:\Project\opensslwork\openssl\build\include;</code></p>
<p></p>
<p><code>链接器</code> 里面的 <code>输入</code> 的 <code>附加依赖项</code> 添加 静态库名，<code>libcrypto.lib;libssl.lib;</code></p>
<blockquote>
<p>注意：在使用openssl的静态链接库时，除了添加 <code>libcrypto.lib;libssl.lib;</code>，还需要添加系统的依赖库：<code>crypt32.lib;WS2_32.lib;</code>， 因为openssl在windows平台使用了这些库。
完整的： <code>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies);crypt32.lib;libcrypto.lib;libssl.lib;WS2_32.lib;</code></p>
</blockquote>
<h3 id="添加头文件">添加头文件</h3>
<p>因为需要md5,rsa,base64等操作，这里需要导入openssl四个相关的头文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;openssl/rsa.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/pem.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/md5.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/bio.h&gt;</span><span class="cp">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用md5对字符串生成摘要">使用MD5对字符串生成摘要</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">md5_hash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">in</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">md</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">in</span><span class="p">;</span>
    <span class="n">MD5</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">in</span><span class="p">),</span> <span class="n">md</span><span class="p">);</span> <span class="c1">//调用openssl的md5方法
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="生成rsa密钥对并以pem格式写入文件">生成rsa密钥对并以pem格式写入文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="n">RSA</span> <span class="o">*</span> <span class="nf">gen_rsa</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">bits</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
    <span class="n">RSA</span><span class="o">*</span> <span class="n">rsa</span> <span class="o">=</span> <span class="n">RSA_new</span><span class="p">();</span>
    <span class="n">BIGNUM</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="n">BN_new</span><span class="p">();</span>
    <span class="n">BN_set_word</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">RSA_F4</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">RSA_generate_key_ex</span><span class="p">(</span><span class="n">rsa</span><span class="p">,</span> <span class="n">bits</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//openssl中生成rsa key的新方法
</span><span class="c1"></span>    <span class="n">BN_free</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>   
    <span class="n">size_t</span> <span class="n">pri_len</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">pub_len</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pri_key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pub_key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">pubkey</span> <span class="o">=</span> <span class="n">BIO_new_file</span><span class="p">(</span><span class="s">&#34;public.pem&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">prikey</span> <span class="o">=</span> <span class="n">BIO_new_file</span><span class="p">(</span><span class="s">&#34;private.pem&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="n">PEM_write_bio_RSAPrivateKey</span><span class="p">(</span><span class="n">prikey</span><span class="p">,</span> <span class="n">rsa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//私钥写入文件
</span><span class="c1"></span>    <span class="n">PEM_write_bio_RSAPublicKey</span><span class="p">(</span><span class="n">pubkey</span><span class="p">,</span> <span class="n">rsa</span><span class="p">);</span> <span class="c1">//公钥写入文件
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">rsa</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="对数据进行base64编码base64在bio中有">对数据进行base64编码，base64在BIO中有</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">base64_encode</span><span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">b64text</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">bio</span><span class="p">,</span> <span class="o">*</span> <span class="n">b64</span><span class="p">;</span>
    <span class="n">BUF_MEM</span><span class="o">*</span> <span class="n">bufferPtr</span><span class="p">;</span>
    <span class="n">b64</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_f_base64</span><span class="p">());</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_s_mem</span><span class="p">());</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">BIO_push</span><span class="p">(</span><span class="n">b64</span><span class="p">,</span> <span class="n">bio</span><span class="p">);</span>
    <span class="n">BIO_set_flags</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">BIO_FLAGS_BASE64_NO_NL</span><span class="p">);</span>
    <span class="n">BIO_write</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
    <span class="n">BIO_flush</span><span class="p">(</span><span class="n">bio</span><span class="p">);</span>
    <span class="n">BIO_get_mem_ptr</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bufferPtr</span><span class="p">);</span>
    <span class="n">BIO_set_close</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">BIO_NOCLOSE</span><span class="p">);</span>
    <span class="o">*</span><span class="n">b64text</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">((</span><span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="o">*</span><span class="n">b64text</span><span class="p">,</span> <span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">b64text</span><span class="p">)[</span><span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="n">BIO_free_all</span><span class="p">(</span><span class="n">bio</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="最后通过main函数读入字符串并将三个过程连起来">最后通过main函数读入字符串并将三个过程连起来</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;usage: work.exe </span><span class="se">\&#34;</span><span class="s">string to hash and sign</span><span class="se">\&#34;</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;your str: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>

    <span class="c1">// first md5(str)
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">md</span><span class="p">[</span><span class="n">MD5_DIGEST_LENGTH</span><span class="p">];</span>
    <span class="n">md5_hash</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">md</span><span class="p">);</span>

    <span class="c1">// then gen rsa pkey and sign the md
</span><span class="c1"></span>    <span class="n">RSA</span><span class="o">*</span> <span class="n">rsa</span> <span class="o">=</span> <span class="n">gen_rsa</span><span class="p">();</span>
    <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sig</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">siglen</span><span class="p">;</span>
    <span class="n">RSA_sign</span><span class="p">(</span><span class="n">NID_sha1</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">MD5_DIGEST_LENGTH</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">siglen</span><span class="p">,</span> <span class="n">rsa</span><span class="p">);</span>

    <span class="c1">// final base64(sig)
</span><span class="c1"></span>    <span class="kt">char</span><span class="o">*</span> <span class="n">b64text</span><span class="p">;</span>
    <span class="n">base64_encode</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">siglen</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b64text</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">b64text</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>因为是课程作业，就没有对出现的错误情况进行处理，实际使用时需要考虑到</p>
</blockquote>
<h2 id="运行">运行</h2>
<h3 id="运行截图">运行截图</h3>
<p></p>
<h3 id="生成的私钥文件">生成的私钥文件</h3>
<p></p>
<h3 id="生成的公钥文件">生成的公钥文件</h3>
<p></p>
]]></description></item></channel></rss>