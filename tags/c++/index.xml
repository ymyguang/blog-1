<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>c++ - tag - zu1k</title><link>https://lgf.im/tags/c++/</link><description>c++ - tag - zu1k</description><generator>Hugo -- gohugo.io</generator><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 03 Dec 2018 13:09:49 +0000</lastBuildDate><atom:link href="https://lgf.im/tags/c++/" rel="self" type="application/rss+xml"/><item><title>c/c++字符串处理大集合</title><link>https://lgf.im/posts/coding/c-cpp-string-op/</link><pubDate>Mon, 03 Dec 2018 13:09:49 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/c-cpp-string-op/</guid><description><![CDATA[<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">rember</span> <span class="k">this</span>

<span class="nf">strncpy</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
<span class="n">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>

<span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="sc">&#39;#&#39;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
<span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>刚开始学C/C++时，一直对字符串处理函数一知半解，这里列举C/C++字符串处理函数，希望对初学者有一定的帮助。</p>
<h1 id="c">C：</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="kt">char</span> <span class="n">st</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>字符串长度</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strlen</span><span class="p">(</span><span class="n">st</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>字符串比较</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strcmp</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>

<span class="c1">//把st1,st2的前n个进行比较。
</span><span class="c1"></span><span class="n">strncmp</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>附加</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strcat</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>
<span class="n">strncat</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">,</span><span class="n">n</span><span class="p">);</span> <span class="c1">//n表示连接上st2的前n个给st1，在最后不要加&#39;\0&#39;。
</span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>替换</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">strcpy</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>
<span class="n">strncpy</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">,</span><span class="n">n</span><span class="p">);</span> <span class="c1">//n表示复制st2的前n个给st1，在最后要加&#39;\0&#39;。
</span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>查找</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">where</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">st</span><span class="p">,</span><span class="n">ch</span><span class="p">)</span> <span class="c1">//ch为要找的字符。
</span><span class="c1"></span><span class="n">where</span> <span class="o">=</span> <span class="n">strspn</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span> <span class="c1">//查找字符串。
</span><span class="c1"></span><span class="n">where</span> <span class="o">=</span> <span class="n">strstr</span><span class="p">(</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="c-1">C++：</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span>
<span class="n">string</span> <span class="n">str</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>字符串长度</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">len</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
<span class="n">len</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>字符串比较
可以直接比较
也可以:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">len1</span><span class="p">,</span><span class="n">str2</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span> <span class="c1">//值为负，0 ，正。
</span><span class="c1">//nops 长度到完。
</span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>附加
<code>str1 += str2;</code>
或</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">str2</span><span class="p">.</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>字符串提取</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str2</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">();</span>
<span class="n">str2</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pos1</span><span class="p">);</span>
<span class="n">str2</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">len1</span><span class="p">);</span>
<span class="n">string</span> <span class="n">a</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c1">//获得字符串s中 从第0位开始的长度为4的字符串
</span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>字符串搜索</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">where</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span>
<span class="n">where</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">str2</span><span class="p">,</span><span class="n">pos1</span><span class="p">);</span>  <span class="c1">//pos1是从str1的第几位开始。
</span><span class="c1"></span><span class="n">where</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">rfind</span><span class="p">(</span><span class="n">str2</span><span class="p">);</span> <span class="c1">//从后往前搜。
</span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>插入字符串
不是赋值语句。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">numchar</span><span class="p">,</span><span class="kt">char</span><span class="p">);</span> <span class="c1">//numchar是插入次数，char是要插入的字符。
</span></code></pre></td></tr></table>
</div>
</div><ol start="7">
<li>替换字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str1</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">);</span>
<span class="n">str1</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">str2</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="8">
<li>删除字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">str</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span><span class="n">len</span><span class="p">)</span>
<span class="n">str</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><ol start="9">
<li>交换字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">swap</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ol start="10">
<li>C &ndash;&gt; C++</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">char</span> <span class="o">*</span><span class="n">cstr</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="p">;</span>
<span class="n">string</span> <span class="n">str1</span><span class="p">;</span>
<span class="n">cstr</span> <span class="o">=</span> <span class="n">cstr</span><span class="p">;</span>
<span class="n">string</span> <span class="nf">str2</span><span class="p">(</span><span class="n">cstr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>对于ACMer来说，C的字符串处理要比C++的方便、简单，尽量用C的字符串处理函数。</p>
<h1 id="c中string类常用算法">C++中string类常用算法</h1>
<h2 id="string类的构造函数">string类的构造函数：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span> <span class="c1">//用c字符串s初始化
</span><span class="c1"></span><span class="n">string</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span> <span class="c1">//用n个字符c初始化
</span></code></pre></td></tr></table>
</div>
</div><p>此外，string类还支持默认构造函数和复制构造函数，如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string</span> <span class="n">s1</span><span class="err">；</span><span class="n">string</span>
<span class="n">s2</span><span class="o">=</span><span class="s">&#34;hello&#34;</span><span class="err">；</span>
</code></pre></td></tr></table>
</div>
</div><p>都是正确的写法。</p>
<p>当构造的string太长而无法表达时会抛出<code>length_error</code>异常</p>
<h2 id="string类的字符操作">string类的字符操作：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="n">at</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>
<span class="kt">char</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
<span class="kt">char</span> <span class="o">&amp;</span><span class="n">at</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//operator[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。
</span><span class="c1"></span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">data</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//返回一个非null终止的c字符数组
</span><span class="c1"></span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">c_str</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//返回一个以null终止的c字符串
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">copy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span><span class="c1">//把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的特性描述">string的特性描述:</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">capacity</span><span class="p">()</span><span class="k">const</span><span class="p">;</span> <span class="c1">//返回当前容量（即string中不必增加内存即可存放的元素个数）
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">max_size</span><span class="p">()</span><span class="k">const</span><span class="p">;</span> <span class="c1">//返回string对象中可存放的最大字符串的长度
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">size</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//返回当前字符串的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">length</span><span class="p">()</span><span class="k">const</span><span class="p">;</span> <span class="c1">//返回当前字符串的长度
</span><span class="c1"></span><span class="kt">bool</span> <span class="nf">empty</span><span class="p">()</span><span class="k">const</span><span class="p">;</span><span class="c1">//当前字符串是否为空
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">resize</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span><span class="c1">//把字符串当前大小置为len，并用字符c填充不足的
</span></code></pre></td></tr></table>
</div>
</div><h2 id="部分string类的输入输出操作">部分string类的输入输出操作:</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string类重载运算符operator</span><span class="o">&gt;&gt;</span><span class="c1">//用于输入，同样重载运算符operator&lt;&lt;用于输出操作。函数getline(istream &amp;in,string &amp;s);//用于从输入流in中读取字符串到s中，以换行符&#39;\n&#39;分开。
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的赋值">string的赋值：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">string</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span><span class="c1">//把字符串s赋给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span><span class="c1">//用c类型字符串s赋值
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span><span class="c1">//用c字符串s开始的n个字符赋值
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span><span class="c1">//把字符串s赋给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span><span class="c1">//用n个字符c赋值给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">start</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span><span class="c1">//把字符串s中从start开始的n个字符赋给当前字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">assign</span><span class="p">(</span><span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span><span class="n">const_itertor</span> <span class="n">last</span><span class="p">);</span><span class="c1">//把first和last迭代器之间的部分赋给字符串
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的连接">string的连接：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//把字符串s连接到当前字符串的结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">+=</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把c类型字符串s连接到当前字符串结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把c类型字符串s的前n个字符连接到当前字符串结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//同operator+=()
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把字符串s中从pos开始的n个字符连接到当前字符串的结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//在当前字符串结尾添加n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//把迭代器first和last之间的部分连接到当前字符串的结尾
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">append</span><span class="p">(</span><span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span><span class="n">const_iterator</span> <span class="n">last</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string的比较">string的比较：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//比较两个字符串是否相等运算符&#34;&gt;&#34;,&#34;&lt;&#34;,&#34;&gt;=&#34;,&#34;&lt;=&#34;,&#34;!=&#34;均被重载用于字符串的比较；
</span><span class="c1"></span><span class="kt">bool</span> <span class="n">perator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

<span class="c1">//比较当前字符串和s的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//比较当前字符串从pos开始的n个字符组成的字符串与s的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

<span class="c1">//比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2个字符组成的字符串的大小
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos2</span><span class="p">,</span><span class="kt">int</span> <span class="n">n2</span><span class="p">)</span><span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos2</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//compare函数在&gt;时返回1，&lt;时返回-1，==时返回0 
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string的子串">string的子串：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//返回pos开始的n个字符组成的字符串string的交换：
</span><span class="c1"></span><span class="n">string</span> <span class="nf">substr</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//交换当前字符串与s2的值
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string类的查找函数">string类的查找函数：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//从pos开始查找字符c在当前字符串的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找字符串s在当前串中的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找字符串s中前n个字符在当前串中的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找字符串s在当前串中的位置
</span><span class="c1">//查找成功时返回所在位置，失败返回string::npos的值
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始从后向前查找字符c在当前串中的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">rfind</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败时返回string::npos的值
</span><span class="c1"></span>
<span class="c1">//从pos开始查找字符c第一次出现的位置
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_first_not_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">find_last_not_of</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">npos</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>

<span class="c1">//find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找
</span></code></pre></td></tr></table>
</div>
</div><h2 id="string类的替换函数">string类的替换函数：</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//删除从p0开始的n0个字符，然后在p0处插入串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//删除从p0开始的n0个字符，然后在p0处插入串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//删除p0开始的n0个字符，然后在p0处插入n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n0</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为字符串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为s的前n个字符
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为串s
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换为n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//把[first0，last0）之间的部分替换成[first，last）之间的字符串string类的插入函：
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">replace</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first0</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last0</span><span class="p">,</span><span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span><span class="n">const_iteratorlast</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

<span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//前4个函数在p0位置插入字符串s中pos开始的前n个字符
</span><span class="c1"></span>
<span class="c1">//此函数在p0处插入n个字符c
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//在it处插入字符c，返回插入后迭代器的位置
</span><span class="c1"></span><span class="n">iterator</span> <span class="nf">insert</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>

<span class="c1">//在it处插入[first，last）之间的字符
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">,</span> <span class="n">const_iterator</span> <span class="n">first</span><span class="p">,</span> <span class="n">const_iterator</span> <span class="n">last</span><span class="p">);</span>

<span class="c1">//在it处插入n个字符c
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string类的删除函数">string类的删除函数</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//删除[first，last）之间的所有字符，返回删除后迭代器的位置
</span><span class="c1"></span><span class="n">iterator</span> <span class="nf">erase</span><span class="p">(</span><span class="n">iterator</span> <span class="n">first</span><span class="p">,</span> <span class="n">iterator</span> <span class="n">last</span><span class="p">);</span>

<span class="c1">//删除it指向的字符，返回删除后迭代器的位置
</span><span class="c1"></span><span class="n">iterator</span> <span class="nf">erase</span><span class="p">(</span><span class="n">iterator</span> <span class="n">it</span><span class="p">);</span>

<span class="c1">//删除pos开始的n个字符，返回修改后的字符串
</span><span class="c1"></span><span class="n">string</span> <span class="o">&amp;</span><span class="n">erase</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">npos</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="string类的迭代器处理">string类的迭代器处理：</h2>
<p>string类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</p>
<p>用string::iterator或string::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。</p>
<h3 id="常用迭代器函数有">常用迭代器函数有：</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">const_iterator</span> <span class="nf">begin</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">begin</span><span class="p">();</span> <span class="c1">//返回string的起始位置
</span><span class="c1"></span>
<span class="n">const_iterator</span> <span class="nf">end</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">end</span><span class="p">();</span><span class="c1">//返回string的最后一个字符后面的位置
</span><span class="c1"></span>
<span class="n">const_iterator</span> <span class="nf">rbegin</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">rbegin</span><span class="p">();</span> <span class="c1">//返回string的最后一个字符的位置
</span><span class="c1"></span>
<span class="n">const_iterator</span> <span class="nf">rend</span><span class="p">()</span><span class="k">const</span><span class="p">;</span>

<span class="n">iterator</span> <span class="nf">rend</span><span class="p">();</span><span class="c1">//返回string第一个字符位置的前面rbegin
</span><span class="c1"></span>
<span class="err">和</span><span class="n">rend用于从后向前的迭代访问</span><span class="err">，通过设置迭代器</span>

<span class="n">string</span><span class="o">::</span><span class="n">reverse_iterator</span><span class="p">,</span><span class="n">string</span><span class="o">::</span><span class="n">const_reverse_iterator实现</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="字符串流处理">字符串流处理：</h2>
<p>通过定义ostringstream和istringstream变量实现，<sstream>头文件中</p>
<h3 id="例如">例如：</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"> <span class="n">string</span> <span class="nf">input</span><span class="p">(</span><span class="s">&#34;hello,this is a test&#34;</span><span class="p">);</span>

 <span class="n">istringstream</span> <span class="nf">is</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>

 <span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">,</span><span class="n">s3</span><span class="p">,</span><span class="n">s4</span><span class="p">;</span>

 <span class="n">is</span><span class="o">&gt;&gt;</span><span class="n">s1</span><span class="o">&gt;&gt;</span><span class="n">s2</span><span class="o">&gt;&gt;</span><span class="n">s3</span><span class="o">&gt;&gt;</span><span class="n">s4</span><span class="p">;</span><span class="c1">//s1=&#34;hello,this&#34;,s2=&#34;is&#34;,s3=&#34;a&#34;,s4=&#34;test&#34;
</span><span class="c1"></span>
 <span class="n">ostringstream</span> <span class="n">os</span><span class="p">;</span>

 <span class="n">os</span><span class="o">&lt;&lt;</span><span class="n">s1</span><span class="o">&lt;&lt;</span><span class="n">s2</span><span class="o">&lt;&lt;</span><span class="n">s3</span><span class="o">&lt;&lt;</span><span class="n">s4</span><span class="p">;</span>

 <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">os</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>