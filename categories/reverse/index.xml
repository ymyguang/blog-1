<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>reverse - 分类 - zu1k</title><link>https://lgf.im/categories/reverse/</link><description>reverse - 分类 - zu1k</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 05 Oct 2020 20:11:24 +0800</lastBuildDate><atom:link href="https://lgf.im/categories/reverse/" rel="self" type="application/rss+xml"/><item><title>Golang逆向资料</title><link>https://lgf.im/posts/security/reverse/golang-reverse/</link><pubDate>Mon, 05 Oct 2020 20:11:24 +0800</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/golang-reverse/</guid><description><![CDATA[<p>前段时间从逆向xray开始入门Golang逆向，打算深入学习一下Golang逆向方法，这几天看了很多相关的文章，原本想要自己总结一文，但无奈大佬们的总结太全面了，我就直接扔链接吧</p>
<h2 id="go二进制文件逆向分析从基础到进阶">Go二进制文件逆向分析从基础到进阶</h2>
<p>J!4Yu大佬的系列文章太全面了，他写的<a href="https://github.com/0xjiayu/go_parser" target="_blank" rel="noopener noreffer">go_parser</a>相当好用</p>
<ul>
<li><a href="https://www.anquanke.com/post/id/214940" target="_blank" rel="noopener noreffer">综述</a></li>
<li><a href="https://www.anquanke.com/post/id/215419" target="_blank" rel="noopener noreffer">MetaInfo、函数符号和源码文件路径列表</a></li>
<li><a href="https://www.anquanke.com/post/id/215820" target="_blank" rel="noopener noreffer">数据类型</a></li>
<li><a href="https://www.anquanke.com/post/id/218377" target="_blank" rel="noopener noreffer">itab与strings</a></li>
<li><a href="https://www.anquanke.com/post/id/218674" target="_blank" rel="noopener noreffer">Tips与实战案例</a></li>
</ul>
<h2 id="英文文章">英文文章</h2>
<ul>
<li><a href="https://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/" target="_blank" rel="noopener noreffer">Reversing GO binaries like a pro</a></li>
<li><a href="https://github.com/strazzere/golang_loader_assist/blob/master/Bsides-GO-Forth-And-Reverse.pdf" target="_blank" rel="noopener noreffer">Bsides-GO-Forth-And-Reverse</a></li>
<li><a href="http://home.in.tum.de/~engelke/pubs/1709-ma.pdf" target="_blank" rel="noopener noreffer">Reconstructing Program Semantics from Go binaries</a></li>
<li><a href="https://www.pnfsoftware.com/blog/analyzing-golang-executables/" target="_blank" rel="noopener noreffer">JEB Analyzing Golang Executables</a></li>
<li><a href="https://dr-knz.net/go-calling-convention-x86-64.html" target="_blank" rel="noopener noreffer">The Go low-level calling convention on x86-64</a></li>
</ul>
<h2 id="操作文章和总结">操作文章和总结</h2>
<ul>
<li><a href="https://www.anquanke.com/post/id/85694" target="_blank" rel="noopener noreffer">手把手教你如何专业地逆向GO二进制程序</a></li>
<li><a href="https://bbs.pediy.com/thread-247232.htm" target="_blank" rel="noopener noreffer">inctf(ultimateGo)</a></li>
<li><a href="https://www.freebuf.com/articles/others-articles/176803.html" target="_blank" rel="noopener noreffer">Go语言逆向去符号信息还原</a></li>
<li><a href="https://www.anquanke.com/post/id/170332" target="_blank" rel="noopener noreffer">无符号Golang程序逆向方法解析</a></li>
<li><a href="https://www.cnxct.com/why-golang-elf-binary-file-is-large-than-c/" target="_blank" rel="noopener noreffer">golang语言编译的二进制可执行文件为什么比 C 语言大</a></li>
<li><a href="http://blog.wuwenxiang.net/Go-Questions" target="_blank" rel="noopener noreffer">Go-逆向学习问题总结</a></li>
</ul>
<h2 id="工具和插件">工具和插件</h2>
<ul>
<li><a href="https://github.com/strazzere/golang_loader_assist" target="_blank" rel="noopener noreffer">https://github.com/strazzere/golang_loader_assist</a></li>
<li><a href="https://github.com/sibears/IDAGolangHelper" target="_blank" rel="noopener noreffer">https://github.com/sibears/IDAGolangHelper</a></li>
<li><a href="https://github.com/0xjiayu/go_parser" target="_blank" rel="noopener noreffer">https://github.com/0xjiayu/go_parser</a></li>
<li><a href="https://github.com/CarveSystems/gostringsr2" target="_blank" rel="noopener noreffer">https://github.com/CarveSystems/gostringsr2</a></li>
<li><a href="https://github.com/JacobPimental/r2-gohelper" target="_blank" rel="noopener noreffer">https://github.com/JacobPimental/r2-gohelper</a></li>
<li><a href="https://github.com/sysopfb/GoMang" target="_blank" rel="noopener noreffer">https://github.com/sysopfb/GoMang</a></li>
<li><a href="https://github.com/pnfsoftware/jeb-golang-analyzer" target="_blank" rel="noopener noreffer">https://github.com/pnfsoftware/jeb-golang-analyzer</a></li>
<li><a href="https://gitlab.com/zaytsevgu/goutils" target="_blank" rel="noopener noreffer">https://gitlab.com/zaytsevgu/goutils</a></li>
<li><a href="https://gitlab.com/zaytsevgu/GoUtils2.0" target="_blank" rel="noopener noreffer">https://gitlab.com/zaytsevgu/GoUtils2.0</a></li>
</ul>
]]></description></item><item><title>Golang逆向思考</title><link>https://lgf.im/posts/security/reverse/golang-reverse-thinking/</link><pubDate>Sat, 20 Jun 2020 17:48:53 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/golang-reverse-thinking/</guid><description><![CDATA[<p>在前段时间对xray进行逆向过程中，发现golang编译的程序会有巨多函数，不能说都是多余的，但是大部分函数的确不是用户编写的代码生成的，而是golang运行时和各种库所需要的东西</p>
<p>同时，因为去除了符号表，这些大量的非实际业务代码会对我们逆向工作造成极大困难，如果能够利用一些自动化工具重建符号表或者重新命名，就可以极大的便利我们逆向</p>
<h2 id="golang特殊段">golang特殊段</h2>
<p>在本次逆向的过程中，我遇到了上述的问题，在网上搜索发现了一个ida插件， <a href="https://github.com/sibears/IDAGolangHelper.git" target="_blank" rel="noopener noreffer">IDAGolangHelper</a></p>
<p>这个插件的作者对golang编译器有深入的研究，他发现golang编译器在linux平台下交叉编译windows平台下运行的程序时，会生成一个特殊的段<code>.gopclntab</code>，在这个段中会保存一份特殊的符号表，作者利用这个段的信息对符号表进行了重建，我在使用过程中发现效果不错</p>
<p>但是该方法的使用是由限制条件的，如果没有这个段的信息就完全无法使用这个工具了</p>
<h2 id="基于同源性">基于同源性</h2>
<p>golang编译生成的程序中大部分函数都是<code>golang运行时函数</code>和一些<code>库函数</code></p>
<p>运行时函数与golang版本、运行平台和操作系统有关，感觉也会与是否采用交叉编译有关系，我没有深入研究</p>
<p>而库函数分为官方库和第三方库两种，官方库是golang官方维护的基本函数库，大家用的都是相同的，第三方库大家用的实际上也是比较集中，golang生态还不是非常完善，好用的库就那么多</p>
<p>基于以上的特点，我们可以考虑使用同源性分析的方法</p>
<h3 id="预先的工作">预先的工作</h3>
<p>在逆向之前，我们需要进行预先的准备</p>
<p>首先需要使用不同版本、不同平台的golang编译器对go运行时函数、基本库函数、知名第三方库函数等代码针对不同目标平台、目标系统进行编译，生成二进制程序，然后对二进制的函数提取特征，建立函数的特征库</p>
<h3 id="特征匹配">特征匹配</h3>
<p>在逆向的时候，我们就可以先分析程序的golang版本、编译平台、运行平台，然后使用相对应的特征库对去除了符号表的二进制函数进行特征匹配，通过这种方法可以对大部分基本的函数重建符号表，而剩余的小量函数便可以确定为用户编写的代码，需要我们深入分析</p>
<p>这个工作应该已经有人开始做了</p>
]]></description></item><item><title>xray社区高级版破解</title><link>https://lgf.im/posts/security/reverse/xray-cracker/</link><pubDate>Thu, 18 Jun 2020 09:06:25 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/xray-cracker/</guid><description><![CDATA[<blockquote>
<p>首先感谢 长亭科技 提供 xray 这款非常方便非常好用的安全工具<br>
俗话说：没有人破解的工具不是好工具<br>
根据没有任何数据支持的统计，大部分安全研究人员使用的安全工具都是盗版<br>
包括但不限于： IDA \ JEB \ BurpSuite \ Vmware</p>
</blockquote>
<p>前几天长亭官方有个活动，可以领 2 个月的 xray 社区高级版证书，正好趁这个机会逆向分析了一下 xray 的证书算法，写了一个证书生成器</p>
<p>因为 xray 证书用到了 rsa 算法，所以需要替换 xray 程序中的公钥，将该功能也集成在工具中了</p>
<h2 id="工具使用">工具使用</h2>
<h3 id="查看帮助">查看帮助</h3>
<p>使用 <code>-h</code> 查看帮助</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -h
破解xray高级版证书，使用 -h 参数查看使用帮助

Usage of xray-cracker:
  -c string
        替换xray程序内置公钥，需要指定xray程序文件路径
  -g string
        生成一个永久license，需要指定用户名
  -p string
        解析官方证书，需要指定证书路径
</code></pre></td></tr></table>
</div>
</div><h3 id="生成证书">生成证书</h3>
<p>使用 <code>-g username</code> 生成永久证书</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -g <span class="s2">&#34;我叫啥&#34;</span>
破解xray高级版证书，使用 -h 参数查看使用帮助

证书已写入文件：xray-license.lic
</code></pre></td></tr></table>
</div>
</div><h3 id="破解-xray">破解 xray</h3>
<p>使用 <code>-c path-to-xray</code> 修改 xray 内置公钥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray-cracker -c .<span class="se">\x</span>ray_windows_amd64.exe
破解xray高级版证书，使用 -h 参数查看使用帮助

public key index: <span class="m">16741321</span>
文件写入成功： .<span class="se">\x</span>ray_windows_amd64.exe
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>工具虽然是 windows 平台下运行，但是照样可以破解其他平台 xray<br>
目前 xray 最新版是 1.0.0，现在全平台全版本通杀</p>
</blockquote>
<h2 id="破解效果">破解效果</h2>
<p>使用修改版 xray 和永久证书后，效果如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">PS &gt; .<span class="se">\x</span>ray_windows_amd64.exe version

 __   __  _____              __     __
 <span class="se">\ \ </span>/ / <span class="p">|</span>  __ <span class="se">\ </span>     /<span class="se">\ </span>    <span class="se">\ \ </span>  / /
  <span class="se">\ </span>V /  <span class="p">|</span> <span class="p">|</span>__<span class="o">)</span> <span class="p">|</span>    /  <span class="se">\ </span>    <span class="se">\ \_</span>/ /
   &gt; &lt;   <span class="p">|</span>  _  /    / /<span class="se">\ \ </span>    <span class="se">\ </span>  /
  / . <span class="se">\ </span> <span class="p">|</span> <span class="p">|</span> <span class="se">\ \ </span>  / ____ <span class="se">\ </span>    <span class="p">|</span> <span class="p">|</span>
 /_/ <span class="se">\_\ </span><span class="p">|</span>_<span class="p">|</span>  <span class="se">\_\ </span>/_/    <span class="se">\_\ </span>   <span class="p">|</span>_<span class="p">|</span>


Version: 1.0.0/62161168/COMMUNITY-ADVANCED
Licensed to 我叫啥, license is valid <span class="k">until</span> 2099-09-09 08:00:00

<span class="o">[</span>xray 1.0.0/62161168<span class="o">]</span>
Build: <span class="o">[</span>2020-06-13<span class="o">]</span> <span class="o">[</span>windows/amd64<span class="o">]</span> <span class="o">[</span>RELEASE/COMMUNITY-ADVANCED<span class="o">]</span>
Compiler Version: go version go1.14.1 linux/amd64
License ID: <span class="m">00000000000000000000000000000000</span>
User Name: 我叫啥/00000000000000000000000000000000
Not Valid Before: 2020-06-12 00:00:00
Not Valid After: 2099-09-09 08:00:00
</code></pre></td></tr></table>
</div>
</div><h2 id="部分细节">部分细节</h2>
<blockquote>
<p>距离博文发布已经过了快一个月了，补充一点点细节信息，希望能够帮助到部分研究学习的同学</p>
</blockquote>
<p>这里只给出使用的关键函数和关键流程，一些重要参数细节需要自己探索，可以动态单步调试获得</p>
<h3 id="aes-解密">AES 解密</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">decode_data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">base64</span><span class="p">.</span><span class="nx">StdEncoding</span><span class="p">.</span><span class="nf">DecodeString</span><span class="p">(</span><span class="nx">licenseString</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">aesDecData</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">AesCBCDecryptAndUnPad</span><span class="p">(</span><span class="nx">decode_data</span><span class="p">[</span><span class="mi">17</span><span class="p">:])</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">licensePlainJsonBytes</span> <span class="o">:=</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mh">0x102</span><span class="p">:]</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="rsa-签名验证">RSA 签名验证</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">sum</span> <span class="o">:=</span> <span class="nx">sha256</span><span class="p">.</span><span class="nf">Sum256</span><span class="p">(</span><span class="nx">licensePlainJsonBytes</span><span class="p">)</span>
<span class="nx">err</span> <span class="p">=</span> <span class="nx">rsa</span><span class="p">.</span><span class="nf">VerifyPSS</span><span class="p">(</span><span class="nx">pubKey</span><span class="p">,</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">,</span> <span class="nx">sum</span><span class="p">[:],</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mh">0x102</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="2020-年-8-月-27-日-补充">2020 年 8 月 27 日 补充</h2>
<p>xray 官方在 1.3.0 版本中更换了授权验证机制，所以破解仅支持到 1.2.0 版本，本文使用代码现在开源： <a href="https://github.com/zu1k/xray-crack">https://github.com/zu1k/xray-crack</a></p>
<h2 id="2020-年-9-月-30-日-补充">2020 年 9 月 30 日 补充</h2>
<p>前几天有大佬私发我一个 License，我就又对证书算法研究了一下</p>
<p>相关代码也已经更新到 github 了</p>
<h3 id="证书生成">证书生成</h3>
<p>证书生成验证整体的思路没有大的改动，还是先 AES 解密，然后 RSA 签名验证，只是前后增加了两处简单的变换</p>
<p>在解密前有一个简单的交换，开始和最后的两个两个没有参与运算（开始第一个字节是证书版本号）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">right</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">base64DecodeData</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
<span class="k">for</span> <span class="nx">l</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">l</span> <span class="p">&lt;</span> <span class="nx">right</span><span class="p">;</span> <span class="nx">l</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">right</span> <span class="o">-</span> <span class="nx">l</span>
  <span class="k">if</span> <span class="nx">l</span> <span class="o">&gt;=</span> <span class="nx">r</span> <span class="p">{</span>
    <span class="k">break</span>
  <span class="p">}</span>
  <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span> <span class="p">=</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后进行 aes 解密，密钥是写死的，IV 是附加在证书里面的，刚刚的变换结束后，除去第一个字节是版本号，紧接着的 16 个字节是 AES 的 IV</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">aesDecData</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">Decrypt</span><span class="p">(</span><span class="nx">base64DecodeData</span><span class="p">[</span><span class="mi">17</span><span class="p">:],</span> <span class="nx">base64DecodeData</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">17</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p>AES 解密后就会遇到另一个变换，是简单的异或处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aesDecData</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
  <span class="nx">aesDecData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">^</span> <span class="mh">0x44</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后后面的部分就跟之前一样了</p>
<h3 id="公钥">公钥</h3>
<p>在新的版本中，RSA 的公钥被加密处理了，在运行的时候解密，这样做可以防止我们通过简单的公钥替换通杀所有的版本和平台</p>
<p>通过逆向发现，解密函数有二百多个局部变量，先是变量之间互相交换，然后两两进行加、减、异或等操作来还原公钥信息</p>
<p>我推测是用程序生成的代码，然后那生成的代码编译的，这样可以在每一次编译的时候重新生成一下代码，增加我们破解的时间</p>
<p>从这一方面出发，我只能变换一下思路，不能去硬刚</p>
<p>Golang 中 RSA 签名验证代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="nx">err</span> <span class="o">:=</span> <span class="nx">rsa</span><span class="p">.</span><span class="nf">VerifyPSS</span><span class="p">(</span><span class="nx">pubKey</span><span class="p">,</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">,</span> <span class="nx">sum</span><span class="p">[:],</span> <span class="nx">aesDecData</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mh">0x102</span><span class="p">],</span> <span class="kc">nil</span><span class="p">)</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;签名验证 失败&#34;</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;签名验证 成功&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>很明显，是通过判断返回值是否为空来确定签名验证是否成功的，在汇编中一般为<code>test eax,eax</code>，然后<code>setnz</code>或者<code>setz</code>，所以我可以修改这里</p>
<p>但是这种方法我只能手工修改，目前没有实现用程序来自动化</p>
<blockquote>
<p>主要是无法确定应该修改哪一个地方，因为出现了不止一次，一个特征是调用 VerifyPSS 的那个 Call，可以尝试自己解析 pclntab 段，从中还原符号表找到这个验证函数的入口，然后找搜索关键 Call，再在这个 call 后面两三个汇编处找 setnz 或者 setz 进行修改</p>
</blockquote>
<h2 id="2020年10月4日-补充">2020年10月4日 补充</h2>
<p>感谢 @Lz1y 大佬在 PR#3 中提供的思路，现在已能够自动patch非arm版本的xray二进制了</p>
<h2 id="2020年10月5日-补充">2020年10月5日 补充</h2>
<p>上个版本直接全部进行替换，会导致xray有些功能出现错误，这里进行了修复</p>
<p>增加了 arm 版的自动patch，现在能够全版本破解了</p>
<h2 id="2020年11月6号晚-补充">2020年11月6号晚 补充</h2>
<p>刚刚发现又发新版了，新的1.4虽然没有修改证书生成算法，但是针对我上面的patch进行了检查</p>
<p>我前面是对签名验证返回值进行修改，如果签名验证失败就改成验证成功。1.4增加了一次签名验证，验证的内容是错误的，必然会验证失败，如果patch还是修改为验证成功就落入了陷阱</p>
<p></p>
<p>思路是对的，目前完成了amd64平台的自动patch，其他的平台等大佬PR</p>
<p></p>
]]></description></item><item><title>逆向破解学校在线考试客户端</title><link>https://lgf.im/posts/security/reverse/crack-sdu-online-exam-software/</link><pubDate>Fri, 01 May 2020 21:44:54 +0000</pubDate><author>作者</author><guid>https://lgf.im/posts/security/reverse/crack-sdu-online-exam-software/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>近期，学校开始测试线上考试系统，据说十分流氓，开搞！</p>
<p>从大一学弟那里拿到了相关程序和说明文档，经过学弟的使用体验，程序开始运行会自动杀死QQ、微信等程序，隐藏并屏蔽任务栏和开始菜单，强制全屏并屏蔽一些常用的快捷键包括窗口切换等。</p>
<h2 id="开搞">开搞</h2>
<h3 id="基本信息">基本信息</h3>
<p>在虚拟机里安装程序后，先观察一下安装目录结构和里面的文件</p>
<p></p>
<p>仔细查看了各个文件夹下的内容，最终得出结论，是个QT编写的套壳浏览器，用的 QtWebEngine</p>
<p>查看主程序的信息，32位未加壳C++程序，本身非常小，只有不到1M，大部分功能应该都是调库实现的</p>
<p></p>
<p>下面开始逆向，拖入IDA 32位，自动定位到入口函数start，从执行流图中可以看到程序本身结构非常简单</p>
<h3 id="正着走">正着走</h3>
<p>下面从start开始分析</p>
<p></p>
<p>可以看到一开始start函数的栈指针分析就出问题了，但是start本身的调用非常简单，不妨来看一下
首先是 第一个call指令，进入这个函数</p>
<p></p>
<p>发现是 security_cookie检查，没有什么实际作用</p>
<p>第二个是个无条件跳转 jmp，进去看一下</p>
<p></p>
<p>可以看到这一段东西比较多，特别是各种不知道什么作用的call非常多，并且自动反编译出问题了，这个反编译问题应该是比较好解决的，我没有深究</p>
<p>简单看了一下调用的call，越深入越复杂，到这里分析不下去了，东西有点多，从其他方面入手</p>
<h3 id="去除杀进程">去除杀进程</h3>
<p>先来看一下字符串，很幸运字符串没有进行加密，因为我们知道程序会杀死qq，不如直接来搜索关键字QQ</p>
<p></p>
<p>看一下交叉引用</p>
<p></p>
<p>只有一个函数调用了它，先进入看看这个函数，关键部分如下</p>
<p></p>
<p>这就比较清楚了，程序是通过QProcess调用taskkill命令来强制来杀死这些程序的，会被杀死的程序包括实时聊天软件qq、微信，远程协助软件teamviwer、向日葵远程控制。</p>
<p>在这里我们需要去除这个杀死进程的机制，直接将执行的命令字符串给清空就行</p>
<h3 id="去除隐藏任务栏">去除隐藏任务栏</h3>
<p>同时这段命令所在的这个函数在前面还有一堆对QtWebEngine的初始化</p>
<p></p>
<p>这个函数后面的部分有点意思，看到了一些字符串不清楚什么意思</p>
<p></p>
<p>我个人对tray比较敏感，因为做过任务栏图标程序的开发，知道任务栏的英文是tray</p>
<p>这里对 Shell_TrayWhd 进行搜索</p>
<p></p>
<p>发现windows系统有一些特殊的窗口句柄，而这个正式任务栏窗口句柄</p>
<p>一开始我还对这个考试程序怎么隐藏任务栏感兴趣，现在都一目了然了，先通过系统函数获得句柄，然后调用ShowWindow将窗口设置为不显示</p>
<p>这里的ProgMan是任务管理器，所以说这段代码同时屏蔽了任务栏、开始菜单和任务管理器</p>
<p>我们需要去除这种屏蔽机制，这也非常简单，来看汇编</p>
<p></p>
<p>发现在调用showwindow前需要将参数 True or False push入栈，也就是 call ShowWindow前面的push 0，只需要修改这几处汇编即可</p>
<p></p>
<p></p>
<p>将push 0修改为push 1即可去除他的屏蔽(后面的分析知道 push 5 比较好)</p>
<h3 id="去除强制全屏">去除强制全屏</h3>
<p>下面我们来去除一下窗口全屏，虽然有任务栏可以用了，但是全屏会挡住，不好用</p>
<p>还是刚刚那个函数，通过不断查交叉应用，最后定位到start第二次jmp后的代码中</p>
<p></p>
<p>通过前面对前前后后的call和跳转的分析，可以知道没有啥具体内容，所以还得从刚刚的那个函数入手</p>
<p>发现后面有一个call</p>
<p></p>
<p>进入后</p>
<p></p>
<p>发现这个函数是要将之前设置的任务栏隐藏等给还原，所以这里应该是要退出了，重要的内容还是在杀死qq的那些操作和这个函数中间的位置</p>
<p>仔细分析后，找到了关键的地方</p>
<p></p>
<p></p>
<p>这和函数在最后面会获取主屏幕的长和宽，然后调用resize函数设置窗口大小，从而使窗口占满屏幕</p>
<p>这里看一下汇编</p>
<p></p>
<p>其实还是比较难搞的，东西比较紧凑，没法插入太多的汇编，又不想进行大改增加一个call，那就只把开始菜单的地方留出来吧，也就是只修改窗口的高</p>
<p>因为需要先把高入栈，所以前面的宽先存到 esi，我们先不要动这个，先把高减一个数然后push进去再push esi，修改之后如下</p>
<p></p>
<p>这样显示的窗口就不会挡住任务栏，我们就可以切换窗口了</p>
<h3 id="恢复窗口和按钮">恢复窗口和按钮</h3>
<p>后来又想，如果可以手动修改窗口大小就好了，再有个放大、缩小的按钮并且能移动位置就更爽了，那就接着搞</p>
<p>之前做过qt的开发，知道有一个窗口属性是可以隐藏系统窗口，只显示里面的内容从而使窗口无法修改大小和移动位置</p>
<p>搜索一番后发现使用的使 setWindowFlags 函数来实现的，那就从imports里面找一下吧</p>
<p></p>
<p></p>
<p>看交叉引用然后一个一个进去看，最后定位到一个函数，我给他起名 initWindowsComponent，前面的分析我也都相应的进行改名了，分析起来方便记忆</p>
<p></p>
<p>我这个起名应该是非常贴切了，的确是往窗口里面添加各种菜单按钮组件</p>
<p></p>
<p>在后面找到了setWindowFlags调用，但是因为qt里面用的是枚举类型，编译后都变成数字了，只能去看qt的源码</p>
<p></p>
<p>传入的枚举类型使WindowsFlags类型，跟进去后发现又是一个WindowType类型</p>
<p></p>
<p>再接着跟进，就看到了全部的内容</p>
<p></p>
<p>2048换成16进制是0x800

根据代码是无边框类型
</p>
<p>我们需要的是有边框有放大缩小和关闭按钮，所以需要的类型是</p>
<p></p>
<p>此时还没有关闭按钮，根据计算方式，还需要或上关闭按钮的值</p>
<p></p>
<p>修改这个参数后窗口就可以随意移动、修改大小、缩小或者全屏了。</p>
<h3 id="绕过摄像头检查">绕过摄像头检查</h3>
<p>我们还知道这个程序还必须要摄像头检查通过，通过简单的实验，发现摄像头只需要检查通过一次，后面不会重复检查，只会读取device.ini文件，所以我们增加这个文件，并手动指定检查通过</p>
<p></p>
<p>同时通过搜索字符串查看交叉引用可以找到需要读取或者写入文件的地方，这里没有深入研究了，谁敢兴趣谁去研究</p>
<p></p>
<h3 id="其他地方">其他地方</h3>
<p>在对这个程序探究的过程中，还发现了tab栏和menu栏可以打开显示，但是实际作用不大，就没有管。</p>
<p>同时通过burp抓包和测试，找到了在线考试的登录接口并发现普通浏览器可以正常使用</p>
<p>同时通过对相关接口的测试，找到了任意密码修改和个人信息泄露的漏洞</p>
<h2 id="申明与文件">申明与文件</h2>
<p>同时本次研究完全以学习为目的，不得将上述内容用作商业或非法，否则一切后果由用户负责。您必须在下载后的24个小时之内，从您的电脑中彻底删除上述内容。</p>
<p>破解之后的程序 {% asset_link 线上考试.zip [点击下载] %}</p>
]]></description></item></channel></rss>